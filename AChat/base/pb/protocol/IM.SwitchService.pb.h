// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.SwitchService.proto

#ifndef PROTOBUF_IM_2eSwitchService_2eproto__INCLUDED
#define PROTOBUF_IM_2eSwitchService_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace SwitchService {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_IM_2eSwitchService_2eproto();
void protobuf_AssignDesc_IM_2eSwitchService_2eproto();
void protobuf_ShutdownFile_IM_2eSwitchService_2eproto();

class IMP2PCmdMsg;

// ===================================================================

class IMP2PCmdMsg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.SwitchService.IMP2PCmdMsg) */ {
 public:
  IMP2PCmdMsg();
  virtual ~IMP2PCmdMsg();

  IMP2PCmdMsg(const IMP2PCmdMsg& from);

  inline IMP2PCmdMsg& operator=(const IMP2PCmdMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const IMP2PCmdMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMP2PCmdMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMP2PCmdMsg* other);

  // implements Message ----------------------------------------------

  inline IMP2PCmdMsg* New() const { return New(NULL); }

  IMP2PCmdMsg* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMP2PCmdMsg& from);
  void MergeFrom(const IMP2PCmdMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMP2PCmdMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  bool has_from_user_id() const;
  void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  ::google::protobuf::uint32 from_user_id() const;
  void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 to_user_id = 2;
  bool has_to_user_id() const;
  void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  ::google::protobuf::uint32 to_user_id() const;
  void set_to_user_id(::google::protobuf::uint32 value);

  // required string cmd_msg_data = 3;
  bool has_cmd_msg_data() const;
  void clear_cmd_msg_data();
  static const int kCmdMsgDataFieldNumber = 3;
  const ::std::string& cmd_msg_data() const;
  void set_cmd_msg_data(const ::std::string& value);
  void set_cmd_msg_data(const char* value);
  void set_cmd_msg_data(const char* value, size_t size);
  ::std::string* mutable_cmd_msg_data();
  ::std::string* release_cmd_msg_data();
  void set_allocated_cmd_msg_data(::std::string* cmd_msg_data);

  // @@protoc_insertion_point(class_scope:IM.SwitchService.IMP2PCmdMsg)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_cmd_msg_data();
  inline void clear_has_cmd_msg_data();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  ::google::protobuf::internal::ArenaStringPtr cmd_msg_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eSwitchService_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eSwitchService_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eSwitchService_2eproto();
  friend void protobuf_ShutdownFile_IM_2eSwitchService_2eproto();

  void InitAsDefaultInstance();
  static IMP2PCmdMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IMP2PCmdMsg

// required uint32 from_user_id = 1;
inline bool IMP2PCmdMsg::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMP2PCmdMsg::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMP2PCmdMsg::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMP2PCmdMsg::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMP2PCmdMsg::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.SwitchService.IMP2PCmdMsg.from_user_id)
  return from_user_id_;
}
inline void IMP2PCmdMsg::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.SwitchService.IMP2PCmdMsg.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool IMP2PCmdMsg::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMP2PCmdMsg::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMP2PCmdMsg::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMP2PCmdMsg::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 IMP2PCmdMsg::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.SwitchService.IMP2PCmdMsg.to_user_id)
  return to_user_id_;
}
inline void IMP2PCmdMsg::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.SwitchService.IMP2PCmdMsg.to_user_id)
}

// required string cmd_msg_data = 3;
inline bool IMP2PCmdMsg::has_cmd_msg_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMP2PCmdMsg::set_has_cmd_msg_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMP2PCmdMsg::clear_has_cmd_msg_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMP2PCmdMsg::clear_cmd_msg_data() {
  cmd_msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd_msg_data();
}
inline const ::std::string& IMP2PCmdMsg::cmd_msg_data() const {
  // @@protoc_insertion_point(field_get:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
  return cmd_msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMP2PCmdMsg::set_cmd_msg_data(const ::std::string& value) {
  set_has_cmd_msg_data();
  cmd_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
}
inline void IMP2PCmdMsg::set_cmd_msg_data(const char* value) {
  set_has_cmd_msg_data();
  cmd_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
}
inline void IMP2PCmdMsg::set_cmd_msg_data(const char* value, size_t size) {
  set_has_cmd_msg_data();
  cmd_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
}
inline ::std::string* IMP2PCmdMsg::mutable_cmd_msg_data() {
  set_has_cmd_msg_data();
  // @@protoc_insertion_point(field_mutable:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
  return cmd_msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMP2PCmdMsg::release_cmd_msg_data() {
  // @@protoc_insertion_point(field_release:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
  clear_has_cmd_msg_data();
  return cmd_msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMP2PCmdMsg::set_allocated_cmd_msg_data(::std::string* cmd_msg_data) {
  if (cmd_msg_data != NULL) {
    set_has_cmd_msg_data();
  } else {
    clear_has_cmd_msg_data();
  }
  cmd_msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd_msg_data);
  // @@protoc_insertion_point(field_set_allocated:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SwitchService
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eSwitchService_2eproto__INCLUDED
