// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.File.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.File.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace File {

void protobuf_ShutdownFile_IM_2eFile_2eproto() {
  delete IMFileLoginReq::default_instance_;
  delete IMFileLoginRsp::default_instance_;
  delete IMFileState::default_instance_;
  delete IMFilePullDataReq::default_instance_;
  delete IMFilePullDataRsp::default_instance_;
  delete IMFileReq::default_instance_;
  delete IMFileRsp::default_instance_;
  delete IMFileNotify::default_instance_;
  delete IMFileHasOfflineReq::default_instance_;
  delete IMFileHasOfflineRsp::default_instance_;
  delete IMFileAddOfflineReq::default_instance_;
  delete IMFileDelOfflineReq::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eFile_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eFile_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_IM_2eFile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMFileLoginReq::default_instance_ = new IMFileLoginReq();
  IMFileLoginRsp::default_instance_ = new IMFileLoginRsp();
  IMFileState::default_instance_ = new IMFileState();
  IMFilePullDataReq::default_instance_ = new IMFilePullDataReq();
  IMFilePullDataRsp::default_instance_ = new IMFilePullDataRsp();
  IMFileReq::default_instance_ = new IMFileReq();
  IMFileRsp::default_instance_ = new IMFileRsp();
  IMFileNotify::default_instance_ = new IMFileNotify();
  IMFileHasOfflineReq::default_instance_ = new IMFileHasOfflineReq();
  IMFileHasOfflineRsp::default_instance_ = new IMFileHasOfflineRsp();
  IMFileAddOfflineReq::default_instance_ = new IMFileAddOfflineReq();
  IMFileDelOfflineReq::default_instance_ = new IMFileDelOfflineReq();
  IMFileLoginReq::default_instance_->InitAsDefaultInstance();
  IMFileLoginRsp::default_instance_->InitAsDefaultInstance();
  IMFileState::default_instance_->InitAsDefaultInstance();
  IMFilePullDataReq::default_instance_->InitAsDefaultInstance();
  IMFilePullDataRsp::default_instance_->InitAsDefaultInstance();
  IMFileReq::default_instance_->InitAsDefaultInstance();
  IMFileRsp::default_instance_->InitAsDefaultInstance();
  IMFileNotify::default_instance_->InitAsDefaultInstance();
  IMFileHasOfflineReq::default_instance_->InitAsDefaultInstance();
  IMFileHasOfflineRsp::default_instance_->InitAsDefaultInstance();
  IMFileAddOfflineReq::default_instance_->InitAsDefaultInstance();
  IMFileDelOfflineReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eFile_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eFile_2eproto_once_);
void protobuf_AddDesc_IM_2eFile_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eFile_2eproto_once_,
                 &protobuf_AddDesc_IM_2eFile_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eFile_2eproto {
  StaticDescriptorInitializer_IM_2eFile_2eproto() {
    protobuf_AddDesc_IM_2eFile_2eproto();
  }
} static_descriptor_initializer_IM_2eFile_2eproto_;
#endif

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFileLoginReq(
    IMFileLoginReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileLoginReq::kUserIdFieldNumber;
const int IMFileLoginReq::kTaskIdFieldNumber;
const int IMFileLoginReq::kFileRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileLoginReq::IMFileLoginReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFileLoginReq)
}

void IMFileLoginReq::InitAsDefaultInstance() {
}

IMFileLoginReq::IMFileLoginReq(const IMFileLoginReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileLoginReq)
}

void IMFileLoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_role_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFileLoginReq::~IMFileLoginReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileLoginReq)
  SharedDtor();
}

void IMFileLoginReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFileLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFileLoginReq& IMFileLoginReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFileLoginReq* IMFileLoginReq::default_instance_ = NULL;

IMFileLoginReq* IMFileLoginReq::New(::google::protobuf::Arena* arena) const {
  IMFileLoginReq* n = new IMFileLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileLoginReq)
  if (_has_bits_[0 / 32] & 7u) {
    user_id_ = 0u;
    if (has_task_id()) {
      task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    file_role_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFileLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFileLoginReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFileLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required string task_id = 2;
      case 2: {
        if (tag == 18) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_file_role;
        break;
      }

      // required .IM.BaseDefine.ClientFileRole file_role = 3;
      case 3: {
        if (tag == 24) {
         parse_file_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ClientFileRole_IsValid(value)) {
            set_file_role(static_cast< ::IM::BaseDefine::ClientFileRole >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFileLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFileLoginReq)
  return false;
#undef DO_
}

void IMFileLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFileLoginReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_id(), output);
  }

  // required .IM.BaseDefine.ClientFileRole file_role = 3;
  if (has_file_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->file_role(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFileLoginReq)
}

int IMFileLoginReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.File.IMFileLoginReq)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_task_id()) {
    // required string task_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  if (has_file_role()) {
    // required .IM.BaseDefine.ClientFileRole file_role = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_role());
  }

  return total_size;
}
int IMFileLoginReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileLoginReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required string task_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());

    // required .IM.BaseDefine.ClientFileRole file_role = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_role());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileLoginReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFileLoginReq*>(&from));
}

void IMFileLoginReq::MergeFrom(const IMFileLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileLoginReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
    if (from.has_file_role()) {
      set_file_role(from.file_role());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFileLoginReq::CopyFrom(const IMFileLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMFileLoginReq::Swap(IMFileLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileLoginReq::InternalSwap(IMFileLoginReq* other) {
  std::swap(user_id_, other->user_id_);
  task_id_.Swap(&other->task_id_);
  std::swap(file_role_, other->file_role_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFileLoginReq::GetTypeName() const {
  return "IM.File.IMFileLoginReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFileLoginReq

// required uint32 user_id = 1;
bool IMFileLoginReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFileLoginReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFileLoginReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFileLoginReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMFileLoginReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileLoginReq.user_id)
  return user_id_;
}
 void IMFileLoginReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileLoginReq.user_id)
}

// required string task_id = 2;
bool IMFileLoginReq::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMFileLoginReq::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMFileLoginReq::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMFileLoginReq::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& IMFileLoginReq::task_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileLoginReq.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileLoginReq::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileLoginReq.task_id)
}
 void IMFileLoginReq::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileLoginReq.task_id)
}
 void IMFileLoginReq::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileLoginReq.task_id)
}
 ::std::string* IMFileLoginReq::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileLoginReq.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileLoginReq::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileLoginReq.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileLoginReq::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileLoginReq.task_id)
}

// required .IM.BaseDefine.ClientFileRole file_role = 3;
bool IMFileLoginReq::has_file_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMFileLoginReq::set_has_file_role() {
  _has_bits_[0] |= 0x00000004u;
}
void IMFileLoginReq::clear_has_file_role() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMFileLoginReq::clear_file_role() {
  file_role_ = 1;
  clear_has_file_role();
}
 ::IM::BaseDefine::ClientFileRole IMFileLoginReq::file_role() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileLoginReq.file_role)
  return static_cast< ::IM::BaseDefine::ClientFileRole >(file_role_);
}
 void IMFileLoginReq::set_file_role(::IM::BaseDefine::ClientFileRole value) {
  assert(::IM::BaseDefine::ClientFileRole_IsValid(value));
  set_has_file_role();
  file_role_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileLoginReq.file_role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFileLoginRsp(
    IMFileLoginRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileLoginRsp::kResultCodeFieldNumber;
const int IMFileLoginRsp::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileLoginRsp::IMFileLoginRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFileLoginRsp)
}

void IMFileLoginRsp::InitAsDefaultInstance() {
}

IMFileLoginRsp::IMFileLoginRsp(const IMFileLoginRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileLoginRsp)
}

void IMFileLoginRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFileLoginRsp::~IMFileLoginRsp() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileLoginRsp)
  SharedDtor();
}

void IMFileLoginRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFileLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFileLoginRsp& IMFileLoginRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFileLoginRsp* IMFileLoginRsp::default_instance_ = NULL;

IMFileLoginRsp* IMFileLoginRsp::New(::google::protobuf::Arena* arena) const {
  IMFileLoginRsp* n = new IMFileLoginRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileLoginRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileLoginRsp)
  if (_has_bits_[0 / 32] & 3u) {
    result_code_ = 0u;
    if (has_task_id()) {
      task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFileLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFileLoginRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFileLoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required string task_id = 2;
      case 2: {
        if (tag == 18) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFileLoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFileLoginRsp)
  return false;
#undef DO_
}

void IMFileLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFileLoginRsp)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFileLoginRsp)
}

int IMFileLoginRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.File.IMFileLoginRsp)
  int total_size = 0;

  if (has_result_code()) {
    // required uint32 result_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  if (has_task_id()) {
    // required string task_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  return total_size;
}
int IMFileLoginRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileLoginRsp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 result_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

    // required string task_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileLoginRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFileLoginRsp*>(&from));
}

void IMFileLoginRsp::MergeFrom(const IMFileLoginRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileLoginRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFileLoginRsp::CopyFrom(const IMFileLoginRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileLoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMFileLoginRsp::Swap(IMFileLoginRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileLoginRsp::InternalSwap(IMFileLoginRsp* other) {
  std::swap(result_code_, other->result_code_);
  task_id_.Swap(&other->task_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFileLoginRsp::GetTypeName() const {
  return "IM.File.IMFileLoginRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFileLoginRsp

// required uint32 result_code = 1;
bool IMFileLoginRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFileLoginRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFileLoginRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFileLoginRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
 ::google::protobuf::uint32 IMFileLoginRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileLoginRsp.result_code)
  return result_code_;
}
 void IMFileLoginRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileLoginRsp.result_code)
}

// required string task_id = 2;
bool IMFileLoginRsp::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMFileLoginRsp::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMFileLoginRsp::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMFileLoginRsp::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& IMFileLoginRsp::task_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileLoginRsp.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileLoginRsp::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileLoginRsp.task_id)
}
 void IMFileLoginRsp::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileLoginRsp.task_id)
}
 void IMFileLoginRsp::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileLoginRsp.task_id)
}
 ::std::string* IMFileLoginRsp::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileLoginRsp.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileLoginRsp::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileLoginRsp.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileLoginRsp::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileLoginRsp.task_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFileState(
    IMFileState* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileState::kStateFieldNumber;
const int IMFileState::kTaskIdFieldNumber;
const int IMFileState::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileState::IMFileState()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFileState)
}

void IMFileState::InitAsDefaultInstance() {
}

IMFileState::IMFileState(const IMFileState& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileState)
}

void IMFileState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFileState::~IMFileState() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileState)
  SharedDtor();
}

void IMFileState::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFileState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFileState& IMFileState::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFileState* IMFileState::default_instance_ = NULL;

IMFileState* IMFileState::New(::google::protobuf::Arena* arena) const {
  IMFileState* n = new IMFileState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileState::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMFileState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMFileState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(state_, user_id_);
    if (has_task_id()) {
      task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFileState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFileState, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFileState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.ClientFileState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ClientFileState_IsValid(value)) {
            set_state(static_cast< ::IM::BaseDefine::ClientFileState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required string task_id = 2;
      case 2: {
        if (tag == 18) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFileState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFileState)
  return false;
#undef DO_
}

void IMFileState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFileState)
  // required .IM.BaseDefine.ClientFileState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_id(), output);
  }

  // required uint32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFileState)
}

int IMFileState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.File.IMFileState)
  int total_size = 0;

  if (has_state()) {
    // required .IM.BaseDefine.ClientFileState state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_task_id()) {
    // required string task_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  if (has_user_id()) {
    // required uint32 user_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  return total_size;
}
int IMFileState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileState)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .IM.BaseDefine.ClientFileState state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required string task_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());

    // required uint32 user_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFileState*>(&from));
}

void IMFileState::MergeFrom(const IMFileState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFileState::CopyFrom(const IMFileState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMFileState::Swap(IMFileState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileState::InternalSwap(IMFileState* other) {
  std::swap(state_, other->state_);
  task_id_.Swap(&other->task_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFileState::GetTypeName() const {
  return "IM.File.IMFileState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFileState

// required .IM.BaseDefine.ClientFileState state = 1;
bool IMFileState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFileState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFileState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFileState::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::IM::BaseDefine::ClientFileState IMFileState::state() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileState.state)
  return static_cast< ::IM::BaseDefine::ClientFileState >(state_);
}
 void IMFileState::set_state(::IM::BaseDefine::ClientFileState value) {
  assert(::IM::BaseDefine::ClientFileState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileState.state)
}

// required string task_id = 2;
bool IMFileState::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMFileState::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMFileState::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMFileState::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& IMFileState::task_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileState.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileState::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileState.task_id)
}
 void IMFileState::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileState.task_id)
}
 void IMFileState::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileState.task_id)
}
 ::std::string* IMFileState::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileState.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileState::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileState.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileState::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileState.task_id)
}

// required uint32 user_id = 3;
bool IMFileState::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMFileState::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMFileState::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMFileState::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMFileState::user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileState.user_id)
  return user_id_;
}
 void IMFileState::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileState.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFilePullDataReq(
    IMFilePullDataReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFilePullDataReq::kTaskIdFieldNumber;
const int IMFilePullDataReq::kUserIdFieldNumber;
const int IMFilePullDataReq::kTransModeFieldNumber;
const int IMFilePullDataReq::kOffsetFieldNumber;
const int IMFilePullDataReq::kDataSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFilePullDataReq::IMFilePullDataReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFilePullDataReq)
}

void IMFilePullDataReq::InitAsDefaultInstance() {
}

IMFilePullDataReq::IMFilePullDataReq(const IMFilePullDataReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFilePullDataReq)
}

void IMFilePullDataReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  trans_mode_ = 1;
  offset_ = 0u;
  data_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFilePullDataReq::~IMFilePullDataReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFilePullDataReq)
  SharedDtor();
}

void IMFilePullDataReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFilePullDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFilePullDataReq& IMFilePullDataReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFilePullDataReq* IMFilePullDataReq::default_instance_ = NULL;

IMFilePullDataReq* IMFilePullDataReq::New(::google::protobuf::Arena* arena) const {
  IMFilePullDataReq* n = new IMFilePullDataReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFilePullDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFilePullDataReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMFilePullDataReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMFilePullDataReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(offset_, data_size_);
    if (has_task_id()) {
      task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    user_id_ = 0u;
    trans_mode_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFilePullDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFilePullDataReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFilePullDataReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string task_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trans_mode;
        break;
      }

      // required .IM.BaseDefine.TransferFileType trans_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_trans_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::TransferFileType_IsValid(value)) {
            set_trans_mode(static_cast< ::IM::BaseDefine::TransferFileType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // required uint32 offset = 4;
      case 4: {
        if (tag == 32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_data_size;
        break;
      }

      // required uint32 data_size = 5;
      case 5: {
        if (tag == 40) {
         parse_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_size_)));
          set_has_data_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFilePullDataReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFilePullDataReq)
  return false;
#undef DO_
}

void IMFilePullDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFilePullDataReq)
  // required string task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->task_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .IM.BaseDefine.TransferFileType trans_mode = 3;
  if (has_trans_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->trans_mode(), output);
  }

  // required uint32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  // required uint32 data_size = 5;
  if (has_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->data_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFilePullDataReq)
}

int IMFilePullDataReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.File.IMFilePullDataReq)
  int total_size = 0;

  if (has_task_id()) {
    // required string task_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  if (has_user_id()) {
    // required uint32 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_trans_mode()) {
    // required .IM.BaseDefine.TransferFileType trans_mode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_mode());
  }

  if (has_offset()) {
    // required uint32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  if (has_data_size()) {
    // required uint32 data_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_size());
  }

  return total_size;
}
int IMFilePullDataReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFilePullDataReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string task_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());

    // required uint32 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.TransferFileType trans_mode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_mode());

    // required uint32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

    // required uint32 data_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFilePullDataReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFilePullDataReq*>(&from));
}

void IMFilePullDataReq::MergeFrom(const IMFilePullDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFilePullDataReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_trans_mode()) {
      set_trans_mode(from.trans_mode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_data_size()) {
      set_data_size(from.data_size());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFilePullDataReq::CopyFrom(const IMFilePullDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFilePullDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFilePullDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMFilePullDataReq::Swap(IMFilePullDataReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFilePullDataReq::InternalSwap(IMFilePullDataReq* other) {
  task_id_.Swap(&other->task_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(trans_mode_, other->trans_mode_);
  std::swap(offset_, other->offset_);
  std::swap(data_size_, other->data_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFilePullDataReq::GetTypeName() const {
  return "IM.File.IMFilePullDataReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFilePullDataReq

// required string task_id = 1;
bool IMFilePullDataReq::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFilePullDataReq::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFilePullDataReq::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFilePullDataReq::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& IMFilePullDataReq::task_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFilePullDataReq.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFilePullDataReq::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFilePullDataReq.task_id)
}
 void IMFilePullDataReq::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFilePullDataReq.task_id)
}
 void IMFilePullDataReq::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFilePullDataReq.task_id)
}
 ::std::string* IMFilePullDataReq::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFilePullDataReq.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFilePullDataReq::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.File.IMFilePullDataReq.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFilePullDataReq::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFilePullDataReq.task_id)
}

// required uint32 user_id = 2;
bool IMFilePullDataReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMFilePullDataReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMFilePullDataReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMFilePullDataReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMFilePullDataReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFilePullDataReq.user_id)
  return user_id_;
}
 void IMFilePullDataReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFilePullDataReq.user_id)
}

// required .IM.BaseDefine.TransferFileType trans_mode = 3;
bool IMFilePullDataReq::has_trans_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMFilePullDataReq::set_has_trans_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void IMFilePullDataReq::clear_has_trans_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMFilePullDataReq::clear_trans_mode() {
  trans_mode_ = 1;
  clear_has_trans_mode();
}
 ::IM::BaseDefine::TransferFileType IMFilePullDataReq::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFilePullDataReq.trans_mode)
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
 void IMFilePullDataReq::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  assert(::IM::BaseDefine::TransferFileType_IsValid(value));
  set_has_trans_mode();
  trans_mode_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFilePullDataReq.trans_mode)
}

// required uint32 offset = 4;
bool IMFilePullDataReq::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMFilePullDataReq::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void IMFilePullDataReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMFilePullDataReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
 ::google::protobuf::uint32 IMFilePullDataReq::offset() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFilePullDataReq.offset)
  return offset_;
}
 void IMFilePullDataReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFilePullDataReq.offset)
}

// required uint32 data_size = 5;
bool IMFilePullDataReq::has_data_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMFilePullDataReq::set_has_data_size() {
  _has_bits_[0] |= 0x00000010u;
}
void IMFilePullDataReq::clear_has_data_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMFilePullDataReq::clear_data_size() {
  data_size_ = 0u;
  clear_has_data_size();
}
 ::google::protobuf::uint32 IMFilePullDataReq::data_size() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFilePullDataReq.data_size)
  return data_size_;
}
 void IMFilePullDataReq::set_data_size(::google::protobuf::uint32 value) {
  set_has_data_size();
  data_size_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFilePullDataReq.data_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFilePullDataRsp(
    IMFilePullDataRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFilePullDataRsp::kResultCodeFieldNumber;
const int IMFilePullDataRsp::kTaskIdFieldNumber;
const int IMFilePullDataRsp::kUserIdFieldNumber;
const int IMFilePullDataRsp::kOffsetFieldNumber;
const int IMFilePullDataRsp::kFileDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFilePullDataRsp::IMFilePullDataRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFilePullDataRsp)
}

void IMFilePullDataRsp::InitAsDefaultInstance() {
}

IMFilePullDataRsp::IMFilePullDataRsp(const IMFilePullDataRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFilePullDataRsp)
}

void IMFilePullDataRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  offset_ = 0u;
  file_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFilePullDataRsp::~IMFilePullDataRsp() {
  // @@protoc_insertion_point(destructor:IM.File.IMFilePullDataRsp)
  SharedDtor();
}

void IMFilePullDataRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFilePullDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFilePullDataRsp& IMFilePullDataRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFilePullDataRsp* IMFilePullDataRsp::default_instance_ = NULL;

IMFilePullDataRsp* IMFilePullDataRsp::New(::google::protobuf::Arena* arena) const {
  IMFilePullDataRsp* n = new IMFilePullDataRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFilePullDataRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFilePullDataRsp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMFilePullDataRsp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMFilePullDataRsp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(result_code_, user_id_);
    if (has_task_id()) {
      task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    offset_ = 0u;
    if (has_file_data()) {
      file_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFilePullDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFilePullDataRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFilePullDataRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required string task_id = 2;
      case 2: {
        if (tag == 18) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // required uint32 offset = 4;
      case 4: {
        if (tag == 32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_file_data;
        break;
      }

      // required bytes file_data = 5;
      case 5: {
        if (tag == 42) {
         parse_file_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFilePullDataRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFilePullDataRsp)
  return false;
#undef DO_
}

void IMFilePullDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFilePullDataRsp)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_id(), output);
  }

  // required uint32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  // required uint32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  // required bytes file_data = 5;
  if (has_file_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->file_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFilePullDataRsp)
}

int IMFilePullDataRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.File.IMFilePullDataRsp)
  int total_size = 0;

  if (has_result_code()) {
    // required uint32 result_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  if (has_task_id()) {
    // required string task_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  if (has_user_id()) {
    // required uint32 user_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_offset()) {
    // required uint32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  if (has_file_data()) {
    // required bytes file_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_data());
  }

  return total_size;
}
int IMFilePullDataRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFilePullDataRsp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 result_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

    // required string task_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());

    // required uint32 user_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required uint32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

    // required bytes file_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFilePullDataRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFilePullDataRsp*>(&from));
}

void IMFilePullDataRsp::MergeFrom(const IMFilePullDataRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFilePullDataRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_file_data()) {
      set_has_file_data();
      file_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFilePullDataRsp::CopyFrom(const IMFilePullDataRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFilePullDataRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFilePullDataRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMFilePullDataRsp::Swap(IMFilePullDataRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFilePullDataRsp::InternalSwap(IMFilePullDataRsp* other) {
  std::swap(result_code_, other->result_code_);
  task_id_.Swap(&other->task_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(offset_, other->offset_);
  file_data_.Swap(&other->file_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFilePullDataRsp::GetTypeName() const {
  return "IM.File.IMFilePullDataRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFilePullDataRsp

// required uint32 result_code = 1;
bool IMFilePullDataRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFilePullDataRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFilePullDataRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFilePullDataRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
 ::google::protobuf::uint32 IMFilePullDataRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFilePullDataRsp.result_code)
  return result_code_;
}
 void IMFilePullDataRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFilePullDataRsp.result_code)
}

// required string task_id = 2;
bool IMFilePullDataRsp::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMFilePullDataRsp::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMFilePullDataRsp::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMFilePullDataRsp::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& IMFilePullDataRsp::task_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFilePullDataRsp.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFilePullDataRsp::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFilePullDataRsp.task_id)
}
 void IMFilePullDataRsp::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFilePullDataRsp.task_id)
}
 void IMFilePullDataRsp::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFilePullDataRsp.task_id)
}
 ::std::string* IMFilePullDataRsp::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFilePullDataRsp.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFilePullDataRsp::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.File.IMFilePullDataRsp.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFilePullDataRsp::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFilePullDataRsp.task_id)
}

// required uint32 user_id = 3;
bool IMFilePullDataRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMFilePullDataRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMFilePullDataRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMFilePullDataRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMFilePullDataRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFilePullDataRsp.user_id)
  return user_id_;
}
 void IMFilePullDataRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFilePullDataRsp.user_id)
}

// required uint32 offset = 4;
bool IMFilePullDataRsp::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMFilePullDataRsp::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void IMFilePullDataRsp::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMFilePullDataRsp::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
 ::google::protobuf::uint32 IMFilePullDataRsp::offset() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFilePullDataRsp.offset)
  return offset_;
}
 void IMFilePullDataRsp::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFilePullDataRsp.offset)
}

// required bytes file_data = 5;
bool IMFilePullDataRsp::has_file_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMFilePullDataRsp::set_has_file_data() {
  _has_bits_[0] |= 0x00000010u;
}
void IMFilePullDataRsp::clear_has_file_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMFilePullDataRsp::clear_file_data() {
  file_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_data();
}
 const ::std::string& IMFilePullDataRsp::file_data() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFilePullDataRsp.file_data)
  return file_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFilePullDataRsp::set_file_data(const ::std::string& value) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFilePullDataRsp.file_data)
}
 void IMFilePullDataRsp::set_file_data(const char* value) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFilePullDataRsp.file_data)
}
 void IMFilePullDataRsp::set_file_data(const void* value, size_t size) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFilePullDataRsp.file_data)
}
 ::std::string* IMFilePullDataRsp::mutable_file_data() {
  set_has_file_data();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFilePullDataRsp.file_data)
  return file_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFilePullDataRsp::release_file_data() {
  // @@protoc_insertion_point(field_release:IM.File.IMFilePullDataRsp.file_data)
  clear_has_file_data();
  return file_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFilePullDataRsp::set_allocated_file_data(::std::string* file_data) {
  if (file_data != NULL) {
    set_has_file_data();
  } else {
    clear_has_file_data();
  }
  file_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_data);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFilePullDataRsp.file_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFileReq(
    IMFileReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileReq::kFromUserIdFieldNumber;
const int IMFileReq::kToUserIdFieldNumber;
const int IMFileReq::kFileNameFieldNumber;
const int IMFileReq::kFileSizeFieldNumber;
const int IMFileReq::kTransModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileReq::IMFileReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFileReq)
}

void IMFileReq::InitAsDefaultInstance() {
}

IMFileReq::IMFileReq(const IMFileReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileReq)
}

void IMFileReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0u;
  trans_mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFileReq::~IMFileReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileReq)
  SharedDtor();
}

void IMFileReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFileReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFileReq& IMFileReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFileReq* IMFileReq::default_instance_ = NULL;

IMFileReq* IMFileReq::New(::google::protobuf::Arena* arena) const {
  IMFileReq* n = new IMFileReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMFileReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMFileReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(from_user_id_, to_user_id_);
    if (has_file_name()) {
      file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    file_size_ = 0u;
    trans_mode_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFileReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFileReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // required string file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_file_size;
        break;
      }

      // required uint32 file_size = 4;
      case 4: {
        if (tag == 32) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_trans_mode;
        break;
      }

      // required .IM.BaseDefine.TransferFileType trans_mode = 5;
      case 5: {
        if (tag == 40) {
         parse_trans_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::TransferFileType_IsValid(value)) {
            set_trans_mode(static_cast< ::IM::BaseDefine::TransferFileType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFileReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFileReq)
  return false;
#undef DO_
}

void IMFileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFileReq)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_user_id(), output);
  }

  // required string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // required uint32 file_size = 4;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->file_size(), output);
  }

  // required .IM.BaseDefine.TransferFileType trans_mode = 5;
  if (has_trans_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->trans_mode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFileReq)
}

int IMFileReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.File.IMFileReq)
  int total_size = 0;

  if (has_from_user_id()) {
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  if (has_to_user_id()) {
    // required uint32 to_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());
  }

  if (has_file_name()) {
    // required string file_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (has_file_size()) {
    // required uint32 file_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_size());
  }

  if (has_trans_mode()) {
    // required .IM.BaseDefine.TransferFileType trans_mode = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_mode());
  }

  return total_size;
}
int IMFileReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());

    // required uint32 to_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());

    // required string file_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());

    // required uint32 file_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_size());

    // required .IM.BaseDefine.TransferFileType trans_mode = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFileReq*>(&from));
}

void IMFileReq::MergeFrom(const IMFileReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_trans_mode()) {
      set_trans_mode(from.trans_mode());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFileReq::CopyFrom(const IMFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMFileReq::Swap(IMFileReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileReq::InternalSwap(IMFileReq* other) {
  std::swap(from_user_id_, other->from_user_id_);
  std::swap(to_user_id_, other->to_user_id_);
  file_name_.Swap(&other->file_name_);
  std::swap(file_size_, other->file_size_);
  std::swap(trans_mode_, other->trans_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFileReq::GetTypeName() const {
  return "IM.File.IMFileReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFileReq

// required uint32 from_user_id = 1;
bool IMFileReq::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFileReq::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFileReq::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFileReq::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
 ::google::protobuf::uint32 IMFileReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileReq.from_user_id)
  return from_user_id_;
}
 void IMFileReq::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileReq.from_user_id)
}

// required uint32 to_user_id = 2;
bool IMFileReq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMFileReq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMFileReq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMFileReq::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
 ::google::protobuf::uint32 IMFileReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileReq.to_user_id)
  return to_user_id_;
}
 void IMFileReq::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileReq.to_user_id)
}

// required string file_name = 3;
bool IMFileReq::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMFileReq::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
void IMFileReq::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMFileReq::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& IMFileReq::file_name() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileReq.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileReq::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileReq.file_name)
}
 void IMFileReq::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileReq.file_name)
}
 void IMFileReq::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileReq.file_name)
}
 ::std::string* IMFileReq::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileReq.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileReq::release_file_name() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileReq.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileReq::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileReq.file_name)
}

// required uint32 file_size = 4;
bool IMFileReq::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMFileReq::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
void IMFileReq::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMFileReq::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
 ::google::protobuf::uint32 IMFileReq::file_size() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileReq.file_size)
  return file_size_;
}
 void IMFileReq::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileReq.file_size)
}

// required .IM.BaseDefine.TransferFileType trans_mode = 5;
bool IMFileReq::has_trans_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMFileReq::set_has_trans_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void IMFileReq::clear_has_trans_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMFileReq::clear_trans_mode() {
  trans_mode_ = 1;
  clear_has_trans_mode();
}
 ::IM::BaseDefine::TransferFileType IMFileReq::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileReq.trans_mode)
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
 void IMFileReq::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  assert(::IM::BaseDefine::TransferFileType_IsValid(value));
  set_has_trans_mode();
  trans_mode_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileReq.trans_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFileRsp(
    IMFileRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileRsp::kResultCodeFieldNumber;
const int IMFileRsp::kFromUserIdFieldNumber;
const int IMFileRsp::kToUserIdFieldNumber;
const int IMFileRsp::kFileNameFieldNumber;
const int IMFileRsp::kTaskIdFieldNumber;
const int IMFileRsp::kIpAddrListFieldNumber;
const int IMFileRsp::kTransModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileRsp::IMFileRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFileRsp)
}

void IMFileRsp::InitAsDefaultInstance() {
}

IMFileRsp::IMFileRsp(const IMFileRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileRsp)
}

void IMFileRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trans_mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFileRsp::~IMFileRsp() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileRsp)
  SharedDtor();
}

void IMFileRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFileRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFileRsp& IMFileRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFileRsp* IMFileRsp::default_instance_ = NULL;

IMFileRsp* IMFileRsp::New(::google::protobuf::Arena* arena) const {
  IMFileRsp* n = new IMFileRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileRsp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMFileRsp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMFileRsp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 95u) {
    ZR_(result_code_, from_user_id_);
    to_user_id_ = 0u;
    if (has_file_name()) {
      file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_task_id()) {
      task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    trans_mode_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ip_addr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFileRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFileRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFileRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_user_id;
        break;
      }

      // required uint32 from_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file_name;
        break;
      }

      // required string file_name = 4;
      case 4: {
        if (tag == 34) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_task_id;
        break;
      }

      // required string task_id = 5;
      case 5: {
        if (tag == 42) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip_addr_list;
        break;
      }

      // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
      case 6: {
        if (tag == 50) {
         parse_ip_addr_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ip_addr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ip_addr_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_ip_addr_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_trans_mode;
        break;
      }

      // required .IM.BaseDefine.TransferFileType trans_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_trans_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::TransferFileType_IsValid(value)) {
            set_trans_mode(static_cast< ::IM::BaseDefine::TransferFileType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFileRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFileRsp)
  return false;
#undef DO_
}

void IMFileRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFileRsp)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // required uint32 from_user_id = 2;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 3;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->to_user_id(), output);
  }

  // required string file_name = 4;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_name(), output);
  }

  // required string task_id = 5;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->task_id(), output);
  }

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
  for (unsigned int i = 0, n = this->ip_addr_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->ip_addr_list(i), output);
  }

  // required .IM.BaseDefine.TransferFileType trans_mode = 7;
  if (has_trans_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->trans_mode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFileRsp)
}

int IMFileRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.File.IMFileRsp)
  int total_size = 0;

  if (has_result_code()) {
    // required uint32 result_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  if (has_from_user_id()) {
    // required uint32 from_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  if (has_to_user_id()) {
    // required uint32 to_user_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());
  }

  if (has_file_name()) {
    // required string file_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (has_task_id()) {
    // required string task_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  if (has_trans_mode()) {
    // required .IM.BaseDefine.TransferFileType trans_mode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_mode());
  }

  return total_size;
}
int IMFileRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileRsp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000005f) ^ 0x0000005f) == 0) {  // All required fields are present.
    // required uint32 result_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

    // required uint32 from_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());

    // required uint32 to_user_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());

    // required string file_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());

    // required string task_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());

    // required .IM.BaseDefine.TransferFileType trans_mode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
  total_size += 1 * this->ip_addr_list_size();
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ip_addr_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFileRsp*>(&from));
}

void IMFileRsp::MergeFrom(const IMFileRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ip_addr_list_.MergeFrom(from.ip_addr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
    if (from.has_trans_mode()) {
      set_trans_mode(from.trans_mode());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFileRsp::CopyFrom(const IMFileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ip_addr_list())) return false;
  return true;
}

void IMFileRsp::Swap(IMFileRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileRsp::InternalSwap(IMFileRsp* other) {
  std::swap(result_code_, other->result_code_);
  std::swap(from_user_id_, other->from_user_id_);
  std::swap(to_user_id_, other->to_user_id_);
  file_name_.Swap(&other->file_name_);
  task_id_.Swap(&other->task_id_);
  ip_addr_list_.UnsafeArenaSwap(&other->ip_addr_list_);
  std::swap(trans_mode_, other->trans_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFileRsp::GetTypeName() const {
  return "IM.File.IMFileRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFileRsp

// required uint32 result_code = 1;
bool IMFileRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFileRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFileRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFileRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
 ::google::protobuf::uint32 IMFileRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileRsp.result_code)
  return result_code_;
}
 void IMFileRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileRsp.result_code)
}

// required uint32 from_user_id = 2;
bool IMFileRsp::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMFileRsp::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMFileRsp::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMFileRsp::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
 ::google::protobuf::uint32 IMFileRsp::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileRsp.from_user_id)
  return from_user_id_;
}
 void IMFileRsp::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileRsp.from_user_id)
}

// required uint32 to_user_id = 3;
bool IMFileRsp::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMFileRsp::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMFileRsp::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMFileRsp::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
 ::google::protobuf::uint32 IMFileRsp::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileRsp.to_user_id)
  return to_user_id_;
}
 void IMFileRsp::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileRsp.to_user_id)
}

// required string file_name = 4;
bool IMFileRsp::has_file_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMFileRsp::set_has_file_name() {
  _has_bits_[0] |= 0x00000008u;
}
void IMFileRsp::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMFileRsp::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& IMFileRsp::file_name() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileRsp.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileRsp::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileRsp.file_name)
}
 void IMFileRsp::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileRsp.file_name)
}
 void IMFileRsp::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileRsp.file_name)
}
 ::std::string* IMFileRsp::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileRsp.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileRsp::release_file_name() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileRsp.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileRsp::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileRsp.file_name)
}

// required string task_id = 5;
bool IMFileRsp::has_task_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMFileRsp::set_has_task_id() {
  _has_bits_[0] |= 0x00000010u;
}
void IMFileRsp::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMFileRsp::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& IMFileRsp::task_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileRsp.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileRsp::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileRsp.task_id)
}
 void IMFileRsp::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileRsp.task_id)
}
 void IMFileRsp::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileRsp.task_id)
}
 ::std::string* IMFileRsp::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileRsp.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileRsp::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileRsp.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileRsp::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileRsp.task_id)
}

// repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
int IMFileRsp::ip_addr_list_size() const {
  return ip_addr_list_.size();
}
void IMFileRsp::clear_ip_addr_list() {
  ip_addr_list_.Clear();
}
const ::IM::BaseDefine::IpAddr& IMFileRsp::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileRsp.ip_addr_list)
  return ip_addr_list_.Get(index);
}
::IM::BaseDefine::IpAddr* IMFileRsp::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileRsp.ip_addr_list)
  return ip_addr_list_.Mutable(index);
}
::IM::BaseDefine::IpAddr* IMFileRsp::add_ip_addr_list() {
  // @@protoc_insertion_point(field_add:IM.File.IMFileRsp.ip_addr_list)
  return ip_addr_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >*
IMFileRsp::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.File.IMFileRsp.ip_addr_list)
  return &ip_addr_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >&
IMFileRsp::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:IM.File.IMFileRsp.ip_addr_list)
  return ip_addr_list_;
}

// required .IM.BaseDefine.TransferFileType trans_mode = 7;
bool IMFileRsp::has_trans_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IMFileRsp::set_has_trans_mode() {
  _has_bits_[0] |= 0x00000040u;
}
void IMFileRsp::clear_has_trans_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
void IMFileRsp::clear_trans_mode() {
  trans_mode_ = 1;
  clear_has_trans_mode();
}
 ::IM::BaseDefine::TransferFileType IMFileRsp::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileRsp.trans_mode)
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
 void IMFileRsp::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  assert(::IM::BaseDefine::TransferFileType_IsValid(value));
  set_has_trans_mode();
  trans_mode_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileRsp.trans_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFileNotify(
    IMFileNotify* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileNotify::kFromUserIdFieldNumber;
const int IMFileNotify::kToUserIdFieldNumber;
const int IMFileNotify::kFileNameFieldNumber;
const int IMFileNotify::kFileSizeFieldNumber;
const int IMFileNotify::kTaskIdFieldNumber;
const int IMFileNotify::kIpAddrListFieldNumber;
const int IMFileNotify::kTransModeFieldNumber;
const int IMFileNotify::kOfflineReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileNotify::IMFileNotify()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFileNotify)
}

void IMFileNotify::InitAsDefaultInstance() {
}

IMFileNotify::IMFileNotify(const IMFileNotify& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileNotify)
}

void IMFileNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0u;
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trans_mode_ = 1;
  offline_ready_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFileNotify::~IMFileNotify() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileNotify)
  SharedDtor();
}

void IMFileNotify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFileNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFileNotify& IMFileNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFileNotify* IMFileNotify::default_instance_ = NULL;

IMFileNotify* IMFileNotify::New(::google::protobuf::Arena* arena) const {
  IMFileNotify* n = new IMFileNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileNotify)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMFileNotify, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMFileNotify*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 223u) {
    ZR_(from_user_id_, to_user_id_);
    if (has_file_name()) {
      file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    file_size_ = 0u;
    if (has_task_id()) {
      task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    trans_mode_ = 1;
    offline_ready_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ip_addr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFileNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFileNotify, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFileNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // required string file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_file_size;
        break;
      }

      // required uint32 file_size = 4;
      case 4: {
        if (tag == 32) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_task_id;
        break;
      }

      // required string task_id = 5;
      case 5: {
        if (tag == 42) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip_addr_list;
        break;
      }

      // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
      case 6: {
        if (tag == 50) {
         parse_ip_addr_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ip_addr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ip_addr_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_ip_addr_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_trans_mode;
        break;
      }

      // required .IM.BaseDefine.TransferFileType trans_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_trans_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::TransferFileType_IsValid(value)) {
            set_trans_mode(static_cast< ::IM::BaseDefine::TransferFileType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_offline_ready;
        break;
      }

      // required uint32 offline_ready = 8;
      case 8: {
        if (tag == 64) {
         parse_offline_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_ready_)));
          set_has_offline_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFileNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFileNotify)
  return false;
#undef DO_
}

void IMFileNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFileNotify)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_user_id(), output);
  }

  // required string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // required uint32 file_size = 4;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->file_size(), output);
  }

  // required string task_id = 5;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->task_id(), output);
  }

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
  for (unsigned int i = 0, n = this->ip_addr_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->ip_addr_list(i), output);
  }

  // required .IM.BaseDefine.TransferFileType trans_mode = 7;
  if (has_trans_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->trans_mode(), output);
  }

  // required uint32 offline_ready = 8;
  if (has_offline_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->offline_ready(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFileNotify)
}

int IMFileNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.File.IMFileNotify)
  int total_size = 0;

  if (has_from_user_id()) {
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  if (has_to_user_id()) {
    // required uint32 to_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());
  }

  if (has_file_name()) {
    // required string file_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (has_file_size()) {
    // required uint32 file_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_size());
  }

  if (has_task_id()) {
    // required string task_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  if (has_trans_mode()) {
    // required .IM.BaseDefine.TransferFileType trans_mode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_mode());
  }

  if (has_offline_ready()) {
    // required uint32 offline_ready = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offline_ready());
  }

  return total_size;
}
int IMFileNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileNotify)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000df) ^ 0x000000df) == 0) {  // All required fields are present.
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());

    // required uint32 to_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());

    // required string file_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());

    // required uint32 file_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_size());

    // required string task_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());

    // required .IM.BaseDefine.TransferFileType trans_mode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_mode());

    // required uint32 offline_ready = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offline_ready());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
  total_size += 1 * this->ip_addr_list_size();
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ip_addr_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFileNotify*>(&from));
}

void IMFileNotify::MergeFrom(const IMFileNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ip_addr_list_.MergeFrom(from.ip_addr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
    if (from.has_trans_mode()) {
      set_trans_mode(from.trans_mode());
    }
    if (from.has_offline_ready()) {
      set_offline_ready(from.offline_ready());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFileNotify::CopyFrom(const IMFileNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000df) != 0x000000df) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ip_addr_list())) return false;
  return true;
}

void IMFileNotify::Swap(IMFileNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileNotify::InternalSwap(IMFileNotify* other) {
  std::swap(from_user_id_, other->from_user_id_);
  std::swap(to_user_id_, other->to_user_id_);
  file_name_.Swap(&other->file_name_);
  std::swap(file_size_, other->file_size_);
  task_id_.Swap(&other->task_id_);
  ip_addr_list_.UnsafeArenaSwap(&other->ip_addr_list_);
  std::swap(trans_mode_, other->trans_mode_);
  std::swap(offline_ready_, other->offline_ready_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFileNotify::GetTypeName() const {
  return "IM.File.IMFileNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFileNotify

// required uint32 from_user_id = 1;
bool IMFileNotify::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFileNotify::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFileNotify::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFileNotify::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
 ::google::protobuf::uint32 IMFileNotify::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileNotify.from_user_id)
  return from_user_id_;
}
 void IMFileNotify::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileNotify.from_user_id)
}

// required uint32 to_user_id = 2;
bool IMFileNotify::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMFileNotify::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMFileNotify::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMFileNotify::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
 ::google::protobuf::uint32 IMFileNotify::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileNotify.to_user_id)
  return to_user_id_;
}
 void IMFileNotify::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileNotify.to_user_id)
}

// required string file_name = 3;
bool IMFileNotify::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMFileNotify::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
void IMFileNotify::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMFileNotify::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& IMFileNotify::file_name() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileNotify.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileNotify::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileNotify.file_name)
}
 void IMFileNotify::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileNotify.file_name)
}
 void IMFileNotify::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileNotify.file_name)
}
 ::std::string* IMFileNotify::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileNotify.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileNotify::release_file_name() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileNotify.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileNotify::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileNotify.file_name)
}

// required uint32 file_size = 4;
bool IMFileNotify::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMFileNotify::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
void IMFileNotify::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMFileNotify::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
 ::google::protobuf::uint32 IMFileNotify::file_size() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileNotify.file_size)
  return file_size_;
}
 void IMFileNotify::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileNotify.file_size)
}

// required string task_id = 5;
bool IMFileNotify::has_task_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMFileNotify::set_has_task_id() {
  _has_bits_[0] |= 0x00000010u;
}
void IMFileNotify::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMFileNotify::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& IMFileNotify::task_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileNotify.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileNotify::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileNotify.task_id)
}
 void IMFileNotify::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileNotify.task_id)
}
 void IMFileNotify::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileNotify.task_id)
}
 ::std::string* IMFileNotify::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileNotify.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileNotify::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileNotify.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileNotify::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileNotify.task_id)
}

// repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
int IMFileNotify::ip_addr_list_size() const {
  return ip_addr_list_.size();
}
void IMFileNotify::clear_ip_addr_list() {
  ip_addr_list_.Clear();
}
const ::IM::BaseDefine::IpAddr& IMFileNotify::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileNotify.ip_addr_list)
  return ip_addr_list_.Get(index);
}
::IM::BaseDefine::IpAddr* IMFileNotify::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileNotify.ip_addr_list)
  return ip_addr_list_.Mutable(index);
}
::IM::BaseDefine::IpAddr* IMFileNotify::add_ip_addr_list() {
  // @@protoc_insertion_point(field_add:IM.File.IMFileNotify.ip_addr_list)
  return ip_addr_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >*
IMFileNotify::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.File.IMFileNotify.ip_addr_list)
  return &ip_addr_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >&
IMFileNotify::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:IM.File.IMFileNotify.ip_addr_list)
  return ip_addr_list_;
}

// required .IM.BaseDefine.TransferFileType trans_mode = 7;
bool IMFileNotify::has_trans_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IMFileNotify::set_has_trans_mode() {
  _has_bits_[0] |= 0x00000040u;
}
void IMFileNotify::clear_has_trans_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
void IMFileNotify::clear_trans_mode() {
  trans_mode_ = 1;
  clear_has_trans_mode();
}
 ::IM::BaseDefine::TransferFileType IMFileNotify::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileNotify.trans_mode)
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
 void IMFileNotify::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  assert(::IM::BaseDefine::TransferFileType_IsValid(value));
  set_has_trans_mode();
  trans_mode_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileNotify.trans_mode)
}

// required uint32 offline_ready = 8;
bool IMFileNotify::has_offline_ready() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IMFileNotify::set_has_offline_ready() {
  _has_bits_[0] |= 0x00000080u;
}
void IMFileNotify::clear_has_offline_ready() {
  _has_bits_[0] &= ~0x00000080u;
}
void IMFileNotify::clear_offline_ready() {
  offline_ready_ = 0u;
  clear_has_offline_ready();
}
 ::google::protobuf::uint32 IMFileNotify::offline_ready() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileNotify.offline_ready)
  return offline_ready_;
}
 void IMFileNotify::set_offline_ready(::google::protobuf::uint32 value) {
  set_has_offline_ready();
  offline_ready_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileNotify.offline_ready)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFileHasOfflineReq(
    IMFileHasOfflineReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileHasOfflineReq::kUserIdFieldNumber;
const int IMFileHasOfflineReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileHasOfflineReq::IMFileHasOfflineReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFileHasOfflineReq)
}

void IMFileHasOfflineReq::InitAsDefaultInstance() {
}

IMFileHasOfflineReq::IMFileHasOfflineReq(const IMFileHasOfflineReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileHasOfflineReq)
}

void IMFileHasOfflineReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFileHasOfflineReq::~IMFileHasOfflineReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileHasOfflineReq)
  SharedDtor();
}

void IMFileHasOfflineReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFileHasOfflineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFileHasOfflineReq& IMFileHasOfflineReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFileHasOfflineReq* IMFileHasOfflineReq::default_instance_ = NULL;

IMFileHasOfflineReq* IMFileHasOfflineReq::New(::google::protobuf::Arena* arena) const {
  IMFileHasOfflineReq* n = new IMFileHasOfflineReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileHasOfflineReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileHasOfflineReq)
  if (_has_bits_[0 / 32] & 3u) {
    user_id_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFileHasOfflineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFileHasOfflineReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFileHasOfflineReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFileHasOfflineReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFileHasOfflineReq)
  return false;
#undef DO_
}

void IMFileHasOfflineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFileHasOfflineReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFileHasOfflineReq)
}

int IMFileHasOfflineReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileHasOfflineReq)
  int total_size = 0;

  // required uint32 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileHasOfflineReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFileHasOfflineReq*>(&from));
}

void IMFileHasOfflineReq::MergeFrom(const IMFileHasOfflineReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileHasOfflineReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFileHasOfflineReq::CopyFrom(const IMFileHasOfflineReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileHasOfflineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileHasOfflineReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMFileHasOfflineReq::Swap(IMFileHasOfflineReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileHasOfflineReq::InternalSwap(IMFileHasOfflineReq* other) {
  std::swap(user_id_, other->user_id_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFileHasOfflineReq::GetTypeName() const {
  return "IM.File.IMFileHasOfflineReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFileHasOfflineReq

// required uint32 user_id = 1;
bool IMFileHasOfflineReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFileHasOfflineReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFileHasOfflineReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFileHasOfflineReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMFileHasOfflineReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileHasOfflineReq.user_id)
  return user_id_;
}
 void IMFileHasOfflineReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileHasOfflineReq.user_id)
}

// optional bytes attach_data = 20;
bool IMFileHasOfflineReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMFileHasOfflineReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
void IMFileHasOfflineReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMFileHasOfflineReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMFileHasOfflineReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileHasOfflineReq.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileHasOfflineReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileHasOfflineReq.attach_data)
}
 void IMFileHasOfflineReq::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileHasOfflineReq.attach_data)
}
 void IMFileHasOfflineReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileHasOfflineReq.attach_data)
}
 ::std::string* IMFileHasOfflineReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileHasOfflineReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileHasOfflineReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileHasOfflineReq.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileHasOfflineReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileHasOfflineReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFileHasOfflineRsp(
    IMFileHasOfflineRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileHasOfflineRsp::kUserIdFieldNumber;
const int IMFileHasOfflineRsp::kOfflineFileListFieldNumber;
const int IMFileHasOfflineRsp::kIpAddrListFieldNumber;
const int IMFileHasOfflineRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileHasOfflineRsp::IMFileHasOfflineRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFileHasOfflineRsp)
}

void IMFileHasOfflineRsp::InitAsDefaultInstance() {
}

IMFileHasOfflineRsp::IMFileHasOfflineRsp(const IMFileHasOfflineRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileHasOfflineRsp)
}

void IMFileHasOfflineRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFileHasOfflineRsp::~IMFileHasOfflineRsp() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileHasOfflineRsp)
  SharedDtor();
}

void IMFileHasOfflineRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFileHasOfflineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFileHasOfflineRsp& IMFileHasOfflineRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFileHasOfflineRsp* IMFileHasOfflineRsp::default_instance_ = NULL;

IMFileHasOfflineRsp* IMFileHasOfflineRsp::New(::google::protobuf::Arena* arena) const {
  IMFileHasOfflineRsp* n = new IMFileHasOfflineRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileHasOfflineRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileHasOfflineRsp)
  if (_has_bits_[0 / 32] & 9u) {
    user_id_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  offline_file_list_.Clear();
  ip_addr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFileHasOfflineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFileHasOfflineRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFileHasOfflineRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_offline_file_list;
        break;
      }

      // repeated .IM.BaseDefine.OfflineFileInfo offline_file_list = 2;
      case 2: {
        if (tag == 18) {
         parse_offline_file_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_offline_file_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_offline_file_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_offline_file_list;
        if (input->ExpectTag(26)) goto parse_loop_ip_addr_list;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .IM.BaseDefine.IpAddr ip_addr_list = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ip_addr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ip_addr_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_ip_addr_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFileHasOfflineRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFileHasOfflineRsp)
  return false;
#undef DO_
}

void IMFileHasOfflineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFileHasOfflineRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.OfflineFileInfo offline_file_list = 2;
  for (unsigned int i = 0, n = this->offline_file_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->offline_file_list(i), output);
  }

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 3;
  for (unsigned int i = 0, n = this->ip_addr_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ip_addr_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFileHasOfflineRsp)
}

int IMFileHasOfflineRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileHasOfflineRsp)
  int total_size = 0;

  // required uint32 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // repeated .IM.BaseDefine.OfflineFileInfo offline_file_list = 2;
  total_size += 1 * this->offline_file_list_size();
  for (int i = 0; i < this->offline_file_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offline_file_list(i));
  }

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 3;
  total_size += 1 * this->ip_addr_list_size();
  for (int i = 0; i < this->ip_addr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ip_addr_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileHasOfflineRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFileHasOfflineRsp*>(&from));
}

void IMFileHasOfflineRsp::MergeFrom(const IMFileHasOfflineRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileHasOfflineRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  offline_file_list_.MergeFrom(from.offline_file_list_);
  ip_addr_list_.MergeFrom(from.ip_addr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFileHasOfflineRsp::CopyFrom(const IMFileHasOfflineRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileHasOfflineRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileHasOfflineRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->offline_file_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ip_addr_list())) return false;
  return true;
}

void IMFileHasOfflineRsp::Swap(IMFileHasOfflineRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileHasOfflineRsp::InternalSwap(IMFileHasOfflineRsp* other) {
  std::swap(user_id_, other->user_id_);
  offline_file_list_.UnsafeArenaSwap(&other->offline_file_list_);
  ip_addr_list_.UnsafeArenaSwap(&other->ip_addr_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFileHasOfflineRsp::GetTypeName() const {
  return "IM.File.IMFileHasOfflineRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFileHasOfflineRsp

// required uint32 user_id = 1;
bool IMFileHasOfflineRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFileHasOfflineRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFileHasOfflineRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFileHasOfflineRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMFileHasOfflineRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileHasOfflineRsp.user_id)
  return user_id_;
}
 void IMFileHasOfflineRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileHasOfflineRsp.user_id)
}

// repeated .IM.BaseDefine.OfflineFileInfo offline_file_list = 2;
int IMFileHasOfflineRsp::offline_file_list_size() const {
  return offline_file_list_.size();
}
void IMFileHasOfflineRsp::clear_offline_file_list() {
  offline_file_list_.Clear();
}
const ::IM::BaseDefine::OfflineFileInfo& IMFileHasOfflineRsp::offline_file_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileHasOfflineRsp.offline_file_list)
  return offline_file_list_.Get(index);
}
::IM::BaseDefine::OfflineFileInfo* IMFileHasOfflineRsp::mutable_offline_file_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileHasOfflineRsp.offline_file_list)
  return offline_file_list_.Mutable(index);
}
::IM::BaseDefine::OfflineFileInfo* IMFileHasOfflineRsp::add_offline_file_list() {
  // @@protoc_insertion_point(field_add:IM.File.IMFileHasOfflineRsp.offline_file_list)
  return offline_file_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::OfflineFileInfo >*
IMFileHasOfflineRsp::mutable_offline_file_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.File.IMFileHasOfflineRsp.offline_file_list)
  return &offline_file_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::OfflineFileInfo >&
IMFileHasOfflineRsp::offline_file_list() const {
  // @@protoc_insertion_point(field_list:IM.File.IMFileHasOfflineRsp.offline_file_list)
  return offline_file_list_;
}

// repeated .IM.BaseDefine.IpAddr ip_addr_list = 3;
int IMFileHasOfflineRsp::ip_addr_list_size() const {
  return ip_addr_list_.size();
}
void IMFileHasOfflineRsp::clear_ip_addr_list() {
  ip_addr_list_.Clear();
}
const ::IM::BaseDefine::IpAddr& IMFileHasOfflineRsp::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileHasOfflineRsp.ip_addr_list)
  return ip_addr_list_.Get(index);
}
::IM::BaseDefine::IpAddr* IMFileHasOfflineRsp::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileHasOfflineRsp.ip_addr_list)
  return ip_addr_list_.Mutable(index);
}
::IM::BaseDefine::IpAddr* IMFileHasOfflineRsp::add_ip_addr_list() {
  // @@protoc_insertion_point(field_add:IM.File.IMFileHasOfflineRsp.ip_addr_list)
  return ip_addr_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >*
IMFileHasOfflineRsp::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.File.IMFileHasOfflineRsp.ip_addr_list)
  return &ip_addr_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >&
IMFileHasOfflineRsp::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:IM.File.IMFileHasOfflineRsp.ip_addr_list)
  return ip_addr_list_;
}

// optional bytes attach_data = 20;
bool IMFileHasOfflineRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMFileHasOfflineRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
void IMFileHasOfflineRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMFileHasOfflineRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMFileHasOfflineRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileHasOfflineRsp.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileHasOfflineRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileHasOfflineRsp.attach_data)
}
 void IMFileHasOfflineRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileHasOfflineRsp.attach_data)
}
 void IMFileHasOfflineRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileHasOfflineRsp.attach_data)
}
 ::std::string* IMFileHasOfflineRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileHasOfflineRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileHasOfflineRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileHasOfflineRsp.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileHasOfflineRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileHasOfflineRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFileAddOfflineReq(
    IMFileAddOfflineReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileAddOfflineReq::kFromUserIdFieldNumber;
const int IMFileAddOfflineReq::kToUserIdFieldNumber;
const int IMFileAddOfflineReq::kTaskIdFieldNumber;
const int IMFileAddOfflineReq::kFileNameFieldNumber;
const int IMFileAddOfflineReq::kFileSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileAddOfflineReq::IMFileAddOfflineReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFileAddOfflineReq)
}

void IMFileAddOfflineReq::InitAsDefaultInstance() {
}

IMFileAddOfflineReq::IMFileAddOfflineReq(const IMFileAddOfflineReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileAddOfflineReq)
}

void IMFileAddOfflineReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFileAddOfflineReq::~IMFileAddOfflineReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileAddOfflineReq)
  SharedDtor();
}

void IMFileAddOfflineReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFileAddOfflineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFileAddOfflineReq& IMFileAddOfflineReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFileAddOfflineReq* IMFileAddOfflineReq::default_instance_ = NULL;

IMFileAddOfflineReq* IMFileAddOfflineReq::New(::google::protobuf::Arena* arena) const {
  IMFileAddOfflineReq* n = new IMFileAddOfflineReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileAddOfflineReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileAddOfflineReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMFileAddOfflineReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMFileAddOfflineReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(from_user_id_, to_user_id_);
    if (has_task_id()) {
      task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_file_name()) {
      file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    file_size_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFileAddOfflineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFileAddOfflineReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFileAddOfflineReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_task_id;
        break;
      }

      // required string task_id = 3;
      case 3: {
        if (tag == 26) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file_name;
        break;
      }

      // required string file_name = 4;
      case 4: {
        if (tag == 34) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_file_size;
        break;
      }

      // required uint32 file_size = 5;
      case 5: {
        if (tag == 40) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFileAddOfflineReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFileAddOfflineReq)
  return false;
#undef DO_
}

void IMFileAddOfflineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFileAddOfflineReq)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_user_id(), output);
  }

  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->task_id(), output);
  }

  // required string file_name = 4;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_name(), output);
  }

  // required uint32 file_size = 5;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->file_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFileAddOfflineReq)
}

int IMFileAddOfflineReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.File.IMFileAddOfflineReq)
  int total_size = 0;

  if (has_from_user_id()) {
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  if (has_to_user_id()) {
    // required uint32 to_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());
  }

  if (has_task_id()) {
    // required string task_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  if (has_file_name()) {
    // required string file_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (has_file_size()) {
    // required uint32 file_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_size());
  }

  return total_size;
}
int IMFileAddOfflineReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileAddOfflineReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());

    // required uint32 to_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());

    // required string task_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());

    // required string file_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());

    // required uint32 file_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileAddOfflineReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFileAddOfflineReq*>(&from));
}

void IMFileAddOfflineReq::MergeFrom(const IMFileAddOfflineReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileAddOfflineReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFileAddOfflineReq::CopyFrom(const IMFileAddOfflineReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileAddOfflineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileAddOfflineReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMFileAddOfflineReq::Swap(IMFileAddOfflineReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileAddOfflineReq::InternalSwap(IMFileAddOfflineReq* other) {
  std::swap(from_user_id_, other->from_user_id_);
  std::swap(to_user_id_, other->to_user_id_);
  task_id_.Swap(&other->task_id_);
  file_name_.Swap(&other->file_name_);
  std::swap(file_size_, other->file_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFileAddOfflineReq::GetTypeName() const {
  return "IM.File.IMFileAddOfflineReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFileAddOfflineReq

// required uint32 from_user_id = 1;
bool IMFileAddOfflineReq::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFileAddOfflineReq::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFileAddOfflineReq::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFileAddOfflineReq::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
 ::google::protobuf::uint32 IMFileAddOfflineReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileAddOfflineReq.from_user_id)
  return from_user_id_;
}
 void IMFileAddOfflineReq::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileAddOfflineReq.from_user_id)
}

// required uint32 to_user_id = 2;
bool IMFileAddOfflineReq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMFileAddOfflineReq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMFileAddOfflineReq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMFileAddOfflineReq::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
 ::google::protobuf::uint32 IMFileAddOfflineReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileAddOfflineReq.to_user_id)
  return to_user_id_;
}
 void IMFileAddOfflineReq::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileAddOfflineReq.to_user_id)
}

// required string task_id = 3;
bool IMFileAddOfflineReq::has_task_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMFileAddOfflineReq::set_has_task_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMFileAddOfflineReq::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMFileAddOfflineReq::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& IMFileAddOfflineReq::task_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileAddOfflineReq.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileAddOfflineReq::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileAddOfflineReq.task_id)
}
 void IMFileAddOfflineReq::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileAddOfflineReq.task_id)
}
 void IMFileAddOfflineReq::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileAddOfflineReq.task_id)
}
 ::std::string* IMFileAddOfflineReq::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileAddOfflineReq.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileAddOfflineReq::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileAddOfflineReq.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileAddOfflineReq::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileAddOfflineReq.task_id)
}

// required string file_name = 4;
bool IMFileAddOfflineReq::has_file_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMFileAddOfflineReq::set_has_file_name() {
  _has_bits_[0] |= 0x00000008u;
}
void IMFileAddOfflineReq::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMFileAddOfflineReq::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& IMFileAddOfflineReq::file_name() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileAddOfflineReq.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileAddOfflineReq::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileAddOfflineReq.file_name)
}
 void IMFileAddOfflineReq::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileAddOfflineReq.file_name)
}
 void IMFileAddOfflineReq::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileAddOfflineReq.file_name)
}
 ::std::string* IMFileAddOfflineReq::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileAddOfflineReq.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileAddOfflineReq::release_file_name() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileAddOfflineReq.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileAddOfflineReq::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileAddOfflineReq.file_name)
}

// required uint32 file_size = 5;
bool IMFileAddOfflineReq::has_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMFileAddOfflineReq::set_has_file_size() {
  _has_bits_[0] |= 0x00000010u;
}
void IMFileAddOfflineReq::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMFileAddOfflineReq::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
 ::google::protobuf::uint32 IMFileAddOfflineReq::file_size() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileAddOfflineReq.file_size)
  return file_size_;
}
 void IMFileAddOfflineReq::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileAddOfflineReq.file_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMFileDelOfflineReq(
    IMFileDelOfflineReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileDelOfflineReq::kFromUserIdFieldNumber;
const int IMFileDelOfflineReq::kToUserIdFieldNumber;
const int IMFileDelOfflineReq::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileDelOfflineReq::IMFileDelOfflineReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.File.IMFileDelOfflineReq)
}

void IMFileDelOfflineReq::InitAsDefaultInstance() {
}

IMFileDelOfflineReq::IMFileDelOfflineReq(const IMFileDelOfflineReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileDelOfflineReq)
}

void IMFileDelOfflineReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_user_id_ = 0u;
  to_user_id_ = 0u;
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMFileDelOfflineReq::~IMFileDelOfflineReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileDelOfflineReq)
  SharedDtor();
}

void IMFileDelOfflineReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMFileDelOfflineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMFileDelOfflineReq& IMFileDelOfflineReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eFile_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eFile_2eproto();
#endif
  return *default_instance_;
}

IMFileDelOfflineReq* IMFileDelOfflineReq::default_instance_ = NULL;

IMFileDelOfflineReq* IMFileDelOfflineReq::New(::google::protobuf::Arena* arena) const {
  IMFileDelOfflineReq* n = new IMFileDelOfflineReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileDelOfflineReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileDelOfflineReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMFileDelOfflineReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMFileDelOfflineReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(from_user_id_, to_user_id_);
    if (has_task_id()) {
      task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMFileDelOfflineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMFileDelOfflineReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.File.IMFileDelOfflineReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_user_id;
        break;
      }

      // required uint32 to_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_task_id;
        break;
      }

      // required string task_id = 3;
      case 3: {
        if (tag == 26) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.File.IMFileDelOfflineReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.File.IMFileDelOfflineReq)
  return false;
#undef DO_
}

void IMFileDelOfflineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.File.IMFileDelOfflineReq)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 to_user_id = 2;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_user_id(), output);
  }

  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->task_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.File.IMFileDelOfflineReq)
}

int IMFileDelOfflineReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.File.IMFileDelOfflineReq)
  int total_size = 0;

  if (has_from_user_id()) {
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  if (has_to_user_id()) {
    // required uint32 to_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());
  }

  if (has_task_id()) {
    // required string task_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  return total_size;
}
int IMFileDelOfflineReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileDelOfflineReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());

    // required uint32 to_user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());

    // required string task_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileDelOfflineReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMFileDelOfflineReq*>(&from));
}

void IMFileDelOfflineReq::MergeFrom(const IMFileDelOfflineReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileDelOfflineReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMFileDelOfflineReq::CopyFrom(const IMFileDelOfflineReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileDelOfflineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileDelOfflineReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMFileDelOfflineReq::Swap(IMFileDelOfflineReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileDelOfflineReq::InternalSwap(IMFileDelOfflineReq* other) {
  std::swap(from_user_id_, other->from_user_id_);
  std::swap(to_user_id_, other->to_user_id_);
  task_id_.Swap(&other->task_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMFileDelOfflineReq::GetTypeName() const {
  return "IM.File.IMFileDelOfflineReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMFileDelOfflineReq

// required uint32 from_user_id = 1;
bool IMFileDelOfflineReq::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMFileDelOfflineReq::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMFileDelOfflineReq::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMFileDelOfflineReq::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
 ::google::protobuf::uint32 IMFileDelOfflineReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileDelOfflineReq.from_user_id)
  return from_user_id_;
}
 void IMFileDelOfflineReq::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileDelOfflineReq.from_user_id)
}

// required uint32 to_user_id = 2;
bool IMFileDelOfflineReq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMFileDelOfflineReq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMFileDelOfflineReq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMFileDelOfflineReq::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
 ::google::protobuf::uint32 IMFileDelOfflineReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileDelOfflineReq.to_user_id)
  return to_user_id_;
}
 void IMFileDelOfflineReq::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.File.IMFileDelOfflineReq.to_user_id)
}

// required string task_id = 3;
bool IMFileDelOfflineReq::has_task_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMFileDelOfflineReq::set_has_task_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMFileDelOfflineReq::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMFileDelOfflineReq::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& IMFileDelOfflineReq::task_id() const {
  // @@protoc_insertion_point(field_get:IM.File.IMFileDelOfflineReq.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileDelOfflineReq::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.File.IMFileDelOfflineReq.task_id)
}
 void IMFileDelOfflineReq::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.File.IMFileDelOfflineReq.task_id)
}
 void IMFileDelOfflineReq::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.File.IMFileDelOfflineReq.task_id)
}
 ::std::string* IMFileDelOfflineReq::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:IM.File.IMFileDelOfflineReq.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMFileDelOfflineReq::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.File.IMFileDelOfflineReq.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMFileDelOfflineReq::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.File.IMFileDelOfflineReq.task_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace File
}  // namespace IM

// @@protoc_insertion_point(global_scope)
