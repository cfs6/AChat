// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Group.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Group {

void protobuf_ShutdownFile_IM_2eGroup_2eproto() {
  delete IMNormalGroupListReq::default_instance_;
  delete IMNormalGroupListRsp::default_instance_;
  delete IMGroupInfoListReq::default_instance_;
  delete IMGroupInfoListRsp::default_instance_;
  delete IMGroupCreateReq::default_instance_;
  delete IMGroupCreateRsp::default_instance_;
  delete IMGroupChangeMemberReq::default_instance_;
  delete IMGroupChangeMemberRsp::default_instance_;
  delete IMGroupShieldReq::default_instance_;
  delete IMGroupShieldRsp::default_instance_;
  delete IMGroupChangeMemberNotify::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eGroup_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eGroup_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_IM_2eGroup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMNormalGroupListReq::default_instance_ = new IMNormalGroupListReq();
  IMNormalGroupListRsp::default_instance_ = new IMNormalGroupListRsp();
  IMGroupInfoListReq::default_instance_ = new IMGroupInfoListReq();
  IMGroupInfoListRsp::default_instance_ = new IMGroupInfoListRsp();
  IMGroupCreateReq::default_instance_ = new IMGroupCreateReq();
  IMGroupCreateRsp::default_instance_ = new IMGroupCreateRsp();
  IMGroupChangeMemberReq::default_instance_ = new IMGroupChangeMemberReq();
  IMGroupChangeMemberRsp::default_instance_ = new IMGroupChangeMemberRsp();
  IMGroupShieldReq::default_instance_ = new IMGroupShieldReq();
  IMGroupShieldRsp::default_instance_ = new IMGroupShieldRsp();
  IMGroupChangeMemberNotify::default_instance_ = new IMGroupChangeMemberNotify();
  IMNormalGroupListReq::default_instance_->InitAsDefaultInstance();
  IMNormalGroupListRsp::default_instance_->InitAsDefaultInstance();
  IMGroupInfoListReq::default_instance_->InitAsDefaultInstance();
  IMGroupInfoListRsp::default_instance_->InitAsDefaultInstance();
  IMGroupCreateReq::default_instance_->InitAsDefaultInstance();
  IMGroupCreateRsp::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberReq::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberRsp::default_instance_->InitAsDefaultInstance();
  IMGroupShieldReq::default_instance_->InitAsDefaultInstance();
  IMGroupShieldRsp::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eGroup_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eGroup_2eproto_once_);
void protobuf_AddDesc_IM_2eGroup_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eGroup_2eproto_once_,
                 &protobuf_AddDesc_IM_2eGroup_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eGroup_2eproto {
  StaticDescriptorInitializer_IM_2eGroup_2eproto() {
    protobuf_AddDesc_IM_2eGroup_2eproto();
  }
} static_descriptor_initializer_IM_2eGroup_2eproto_;
#endif

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMNormalGroupListReq(
    IMNormalGroupListReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMNormalGroupListReq::kUserIdFieldNumber;
const int IMNormalGroupListReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMNormalGroupListReq::IMNormalGroupListReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMNormalGroupListReq)
}

void IMNormalGroupListReq::InitAsDefaultInstance() {
}

IMNormalGroupListReq::IMNormalGroupListReq(const IMNormalGroupListReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMNormalGroupListReq)
}

void IMNormalGroupListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMNormalGroupListReq::~IMNormalGroupListReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMNormalGroupListReq)
  SharedDtor();
}

void IMNormalGroupListReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMNormalGroupListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMNormalGroupListReq& IMNormalGroupListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMNormalGroupListReq* IMNormalGroupListReq::default_instance_ = NULL;

IMNormalGroupListReq* IMNormalGroupListReq::New(::google::protobuf::Arena* arena) const {
  IMNormalGroupListReq* n = new IMNormalGroupListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMNormalGroupListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMNormalGroupListReq)
  if (_has_bits_[0 / 32] & 3u) {
    user_id_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMNormalGroupListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMNormalGroupListReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Group.IMNormalGroupListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMNormalGroupListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMNormalGroupListReq)
  return false;
#undef DO_
}

void IMNormalGroupListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMNormalGroupListReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Group.IMNormalGroupListReq)
}

int IMNormalGroupListReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMNormalGroupListReq)
  int total_size = 0;

  // required uint32 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMNormalGroupListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMNormalGroupListReq*>(&from));
}

void IMNormalGroupListReq::MergeFrom(const IMNormalGroupListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMNormalGroupListReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMNormalGroupListReq::CopyFrom(const IMNormalGroupListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMNormalGroupListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMNormalGroupListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMNormalGroupListReq::Swap(IMNormalGroupListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMNormalGroupListReq::InternalSwap(IMNormalGroupListReq* other) {
  std::swap(user_id_, other->user_id_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMNormalGroupListReq::GetTypeName() const {
  return "IM.Group.IMNormalGroupListReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMNormalGroupListReq

// required uint32 user_id = 1;
bool IMNormalGroupListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMNormalGroupListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMNormalGroupListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMNormalGroupListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMNormalGroupListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListReq.user_id)
  return user_id_;
}
 void IMNormalGroupListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListReq.user_id)
}

// optional bytes attach_data = 20;
bool IMNormalGroupListReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMNormalGroupListReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
void IMNormalGroupListReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMNormalGroupListReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMNormalGroupListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListReq.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMNormalGroupListReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListReq.attach_data)
}
 void IMNormalGroupListReq::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMNormalGroupListReq.attach_data)
}
 void IMNormalGroupListReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMNormalGroupListReq.attach_data)
}
 ::std::string* IMNormalGroupListReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMNormalGroupListReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMNormalGroupListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMNormalGroupListReq.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMNormalGroupListReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMNormalGroupListReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMNormalGroupListRsp(
    IMNormalGroupListRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMNormalGroupListRsp::kUserIdFieldNumber;
const int IMNormalGroupListRsp::kGroupVersionListFieldNumber;
const int IMNormalGroupListRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMNormalGroupListRsp::IMNormalGroupListRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMNormalGroupListRsp)
}

void IMNormalGroupListRsp::InitAsDefaultInstance() {
}

IMNormalGroupListRsp::IMNormalGroupListRsp(const IMNormalGroupListRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMNormalGroupListRsp)
}

void IMNormalGroupListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMNormalGroupListRsp::~IMNormalGroupListRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMNormalGroupListRsp)
  SharedDtor();
}

void IMNormalGroupListRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMNormalGroupListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMNormalGroupListRsp& IMNormalGroupListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMNormalGroupListRsp* IMNormalGroupListRsp::default_instance_ = NULL;

IMNormalGroupListRsp* IMNormalGroupListRsp::New(::google::protobuf::Arena* arena) const {
  IMNormalGroupListRsp* n = new IMNormalGroupListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMNormalGroupListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMNormalGroupListRsp)
  if (_has_bits_[0 / 32] & 5u) {
    user_id_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  group_version_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMNormalGroupListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMNormalGroupListRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Group.IMNormalGroupListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_version_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
      case 2: {
        if (tag == 18) {
         parse_group_version_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_group_version_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_group_version_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_group_version_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMNormalGroupListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMNormalGroupListRsp)
  return false;
#undef DO_
}

void IMNormalGroupListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMNormalGroupListRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  for (unsigned int i = 0, n = this->group_version_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_version_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Group.IMNormalGroupListRsp)
}

int IMNormalGroupListRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMNormalGroupListRsp)
  int total_size = 0;

  // required uint32 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  total_size += 1 * this->group_version_list_size();
  for (int i = 0; i < this->group_version_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_version_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMNormalGroupListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMNormalGroupListRsp*>(&from));
}

void IMNormalGroupListRsp::MergeFrom(const IMNormalGroupListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMNormalGroupListRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  group_version_list_.MergeFrom(from.group_version_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMNormalGroupListRsp::CopyFrom(const IMNormalGroupListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMNormalGroupListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMNormalGroupListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_version_list())) return false;
  return true;
}

void IMNormalGroupListRsp::Swap(IMNormalGroupListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMNormalGroupListRsp::InternalSwap(IMNormalGroupListRsp* other) {
  std::swap(user_id_, other->user_id_);
  group_version_list_.UnsafeArenaSwap(&other->group_version_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMNormalGroupListRsp::GetTypeName() const {
  return "IM.Group.IMNormalGroupListRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMNormalGroupListRsp

// required uint32 user_id = 1;
bool IMNormalGroupListRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMNormalGroupListRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMNormalGroupListRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMNormalGroupListRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMNormalGroupListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListRsp.user_id)
  return user_id_;
}
 void IMNormalGroupListRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListRsp.user_id)
}

// repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
int IMNormalGroupListRsp::group_version_list_size() const {
  return group_version_list_.size();
}
void IMNormalGroupListRsp::clear_group_version_list() {
  group_version_list_.Clear();
}
const ::IM::BaseDefine::GroupVersionInfo& IMNormalGroupListRsp::group_version_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListRsp.group_version_list)
  return group_version_list_.Get(index);
}
::IM::BaseDefine::GroupVersionInfo* IMNormalGroupListRsp::mutable_group_version_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMNormalGroupListRsp.group_version_list)
  return group_version_list_.Mutable(index);
}
::IM::BaseDefine::GroupVersionInfo* IMNormalGroupListRsp::add_group_version_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMNormalGroupListRsp.group_version_list)
  return group_version_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >*
IMNormalGroupListRsp::mutable_group_version_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMNormalGroupListRsp.group_version_list)
  return &group_version_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >&
IMNormalGroupListRsp::group_version_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMNormalGroupListRsp.group_version_list)
  return group_version_list_;
}

// optional bytes attach_data = 20;
bool IMNormalGroupListRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMNormalGroupListRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
void IMNormalGroupListRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMNormalGroupListRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMNormalGroupListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListRsp.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMNormalGroupListRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListRsp.attach_data)
}
 void IMNormalGroupListRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMNormalGroupListRsp.attach_data)
}
 void IMNormalGroupListRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMNormalGroupListRsp.attach_data)
}
 ::std::string* IMNormalGroupListRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMNormalGroupListRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMNormalGroupListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMNormalGroupListRsp.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMNormalGroupListRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMNormalGroupListRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGroupInfoListReq(
    IMGroupInfoListReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGroupInfoListReq::kUserIdFieldNumber;
const int IMGroupInfoListReq::kGroupVersionListFieldNumber;
const int IMGroupInfoListReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGroupInfoListReq::IMGroupInfoListReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoListReq)
}

void IMGroupInfoListReq::InitAsDefaultInstance() {
}

IMGroupInfoListReq::IMGroupInfoListReq(const IMGroupInfoListReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoListReq)
}

void IMGroupInfoListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoListReq::~IMGroupInfoListReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoListReq)
  SharedDtor();
}

void IMGroupInfoListReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupInfoListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoListReq& IMGroupInfoListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoListReq* IMGroupInfoListReq::default_instance_ = NULL;

IMGroupInfoListReq* IMGroupInfoListReq::New(::google::protobuf::Arena* arena) const {
  IMGroupInfoListReq* n = new IMGroupInfoListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGroupInfoListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupInfoListReq)
  if (_has_bits_[0 / 32] & 5u) {
    user_id_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  group_version_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGroupInfoListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGroupInfoListReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_version_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
      case 2: {
        if (tag == 18) {
         parse_group_version_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_group_version_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_group_version_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_group_version_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoListReq)
  return false;
#undef DO_
}

void IMGroupInfoListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoListReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  for (unsigned int i = 0, n = this->group_version_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_version_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoListReq)
}

int IMGroupInfoListReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupInfoListReq)
  int total_size = 0;

  // required uint32 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  total_size += 1 * this->group_version_list_size();
  for (int i = 0; i < this->group_version_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_version_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoListReq*>(&from));
}

void IMGroupInfoListReq::MergeFrom(const IMGroupInfoListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupInfoListReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  group_version_list_.MergeFrom(from.group_version_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGroupInfoListReq::CopyFrom(const IMGroupInfoListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupInfoListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_version_list())) return false;
  return true;
}

void IMGroupInfoListReq::Swap(IMGroupInfoListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGroupInfoListReq::InternalSwap(IMGroupInfoListReq* other) {
  std::swap(user_id_, other->user_id_);
  group_version_list_.UnsafeArenaSwap(&other->group_version_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGroupInfoListReq::GetTypeName() const {
  return "IM.Group.IMGroupInfoListReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGroupInfoListReq

// required uint32 user_id = 1;
bool IMGroupInfoListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGroupInfoListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGroupInfoListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGroupInfoListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGroupInfoListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListReq.user_id)
  return user_id_;
}
 void IMGroupInfoListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListReq.user_id)
}

// repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
int IMGroupInfoListReq::group_version_list_size() const {
  return group_version_list_.size();
}
void IMGroupInfoListReq::clear_group_version_list() {
  group_version_list_.Clear();
}
const ::IM::BaseDefine::GroupVersionInfo& IMGroupInfoListReq::group_version_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListReq.group_version_list)
  return group_version_list_.Get(index);
}
::IM::BaseDefine::GroupVersionInfo* IMGroupInfoListReq::mutable_group_version_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListReq.group_version_list)
  return group_version_list_.Mutable(index);
}
::IM::BaseDefine::GroupVersionInfo* IMGroupInfoListReq::add_group_version_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupInfoListReq.group_version_list)
  return group_version_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >*
IMGroupInfoListReq::mutable_group_version_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupInfoListReq.group_version_list)
  return &group_version_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >&
IMGroupInfoListReq::group_version_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupInfoListReq.group_version_list)
  return group_version_list_;
}

// optional bytes attach_data = 20;
bool IMGroupInfoListReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGroupInfoListReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGroupInfoListReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGroupInfoListReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGroupInfoListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListReq.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupInfoListReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListReq.attach_data)
}
 void IMGroupInfoListReq::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoListReq.attach_data)
}
 void IMGroupInfoListReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoListReq.attach_data)
}
 ::std::string* IMGroupInfoListReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGroupInfoListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupInfoListReq.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupInfoListReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoListReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGroupInfoListRsp(
    IMGroupInfoListRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGroupInfoListRsp::kUserIdFieldNumber;
const int IMGroupInfoListRsp::kGroupInfoListFieldNumber;
const int IMGroupInfoListRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGroupInfoListRsp::IMGroupInfoListRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoListRsp)
}

void IMGroupInfoListRsp::InitAsDefaultInstance() {
}

IMGroupInfoListRsp::IMGroupInfoListRsp(const IMGroupInfoListRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoListRsp)
}

void IMGroupInfoListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoListRsp::~IMGroupInfoListRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoListRsp)
  SharedDtor();
}

void IMGroupInfoListRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupInfoListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoListRsp& IMGroupInfoListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoListRsp* IMGroupInfoListRsp::default_instance_ = NULL;

IMGroupInfoListRsp* IMGroupInfoListRsp::New(::google::protobuf::Arena* arena) const {
  IMGroupInfoListRsp* n = new IMGroupInfoListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGroupInfoListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupInfoListRsp)
  if (_has_bits_[0 / 32] & 5u) {
    user_id_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  group_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGroupInfoListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGroupInfoListRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_info_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
      case 2: {
        if (tag == 18) {
         parse_group_info_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_group_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_group_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_group_info_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoListRsp)
  return false;
#undef DO_
}

void IMGroupInfoListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoListRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
  for (unsigned int i = 0, n = this->group_info_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_info_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoListRsp)
}

int IMGroupInfoListRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupInfoListRsp)
  int total_size = 0;

  // required uint32 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
  total_size += 1 * this->group_info_list_size();
  for (int i = 0; i < this->group_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoListRsp*>(&from));
}

void IMGroupInfoListRsp::MergeFrom(const IMGroupInfoListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupInfoListRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  group_info_list_.MergeFrom(from.group_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGroupInfoListRsp::CopyFrom(const IMGroupInfoListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupInfoListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_info_list())) return false;
  return true;
}

void IMGroupInfoListRsp::Swap(IMGroupInfoListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGroupInfoListRsp::InternalSwap(IMGroupInfoListRsp* other) {
  std::swap(user_id_, other->user_id_);
  group_info_list_.UnsafeArenaSwap(&other->group_info_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGroupInfoListRsp::GetTypeName() const {
  return "IM.Group.IMGroupInfoListRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGroupInfoListRsp

// required uint32 user_id = 1;
bool IMGroupInfoListRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGroupInfoListRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGroupInfoListRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGroupInfoListRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGroupInfoListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListRsp.user_id)
  return user_id_;
}
 void IMGroupInfoListRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListRsp.user_id)
}

// repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
int IMGroupInfoListRsp::group_info_list_size() const {
  return group_info_list_.size();
}
void IMGroupInfoListRsp::clear_group_info_list() {
  group_info_list_.Clear();
}
const ::IM::BaseDefine::GroupInfo& IMGroupInfoListRsp::group_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListRsp.group_info_list)
  return group_info_list_.Get(index);
}
::IM::BaseDefine::GroupInfo* IMGroupInfoListRsp::mutable_group_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListRsp.group_info_list)
  return group_info_list_.Mutable(index);
}
::IM::BaseDefine::GroupInfo* IMGroupInfoListRsp::add_group_info_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupInfoListRsp.group_info_list)
  return group_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >*
IMGroupInfoListRsp::mutable_group_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupInfoListRsp.group_info_list)
  return &group_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >&
IMGroupInfoListRsp::group_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupInfoListRsp.group_info_list)
  return group_info_list_;
}

// optional bytes attach_data = 20;
bool IMGroupInfoListRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGroupInfoListRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGroupInfoListRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGroupInfoListRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGroupInfoListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListRsp.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupInfoListRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListRsp.attach_data)
}
 void IMGroupInfoListRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoListRsp.attach_data)
}
 void IMGroupInfoListRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoListRsp.attach_data)
}
 ::std::string* IMGroupInfoListRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGroupInfoListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupInfoListRsp.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupInfoListRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoListRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGroupCreateReq(
    IMGroupCreateReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGroupCreateReq::kUserIdFieldNumber;
const int IMGroupCreateReq::kGroupTypeFieldNumber;
const int IMGroupCreateReq::kGroupNameFieldNumber;
const int IMGroupCreateReq::kGroupAvatarFieldNumber;
const int IMGroupCreateReq::kMemberIdListFieldNumber;
const int IMGroupCreateReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGroupCreateReq::IMGroupCreateReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupCreateReq)
}

void IMGroupCreateReq::InitAsDefaultInstance() {
}

IMGroupCreateReq::IMGroupCreateReq(const IMGroupCreateReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupCreateReq)
}

void IMGroupCreateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  group_type_ = 2;
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupCreateReq::~IMGroupCreateReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupCreateReq)
  SharedDtor();
}

void IMGroupCreateReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupCreateReq& IMGroupCreateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupCreateReq* IMGroupCreateReq::default_instance_ = NULL;

IMGroupCreateReq* IMGroupCreateReq::New(::google::protobuf::Arena* arena) const {
  IMGroupCreateReq* n = new IMGroupCreateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGroupCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupCreateReq)
  if (_has_bits_[0 / 32] & 47u) {
    user_id_ = 0u;
    group_type_ = 2;
    if (has_group_name()) {
      group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_group_avatar()) {
      group_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  member_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGroupCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGroupCreateReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupCreateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
      case 2: {
        if (tag == 16) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // required string group_name = 3;
      case 3: {
        if (tag == 26) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_avatar;
        break;
      }

      // required string group_avatar = 4;
      case 4: {
        if (tag == 34) {
         parse_group_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_id_list;
        break;
      }

      // repeated uint32 member_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupCreateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupCreateReq)
  return false;
#undef DO_
}

void IMGroupCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupCreateReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->group_type(), output);
  }

  // required string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // required string group_avatar = 4;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_avatar(), output);
  }

  // repeated uint32 member_id_list = 5;
  for (int i = 0; i < this->member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupCreateReq)
}

int IMGroupCreateReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Group.IMGroupCreateReq)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_group_type()) {
    // required .IM.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
  }

  if (has_group_name()) {
    // required string group_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());
  }

  if (has_group_avatar()) {
    // required string group_avatar = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_avatar());
  }

  return total_size;
}
int IMGroupCreateReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupCreateReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());

    // required string group_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());

    // required string group_avatar = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_avatar());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // repeated uint32 member_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_id_list(i));
    }
    total_size += 1 * this->member_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupCreateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupCreateReq*>(&from));
}

void IMGroupCreateReq::MergeFrom(const IMGroupCreateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupCreateReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_name()) {
      set_has_group_name();
      group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
    }
    if (from.has_group_avatar()) {
      set_has_group_avatar();
      group_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_avatar_);
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGroupCreateReq::CopyFrom(const IMGroupCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupCreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupCreateReq::Swap(IMGroupCreateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGroupCreateReq::InternalSwap(IMGroupCreateReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(group_type_, other->group_type_);
  group_name_.Swap(&other->group_name_);
  group_avatar_.Swap(&other->group_avatar_);
  member_id_list_.UnsafeArenaSwap(&other->member_id_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGroupCreateReq::GetTypeName() const {
  return "IM.Group.IMGroupCreateReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGroupCreateReq

// required uint32 user_id = 1;
bool IMGroupCreateReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGroupCreateReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGroupCreateReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGroupCreateReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGroupCreateReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.user_id)
  return user_id_;
}
 void IMGroupCreateReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.user_id)
}

// required .IM.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
bool IMGroupCreateReq::has_group_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGroupCreateReq::set_has_group_type() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGroupCreateReq::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGroupCreateReq::clear_group_type() {
  group_type_ = 2;
  clear_has_group_type();
}
 ::IM::BaseDefine::GroupType IMGroupCreateReq::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
 void IMGroupCreateReq::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_type)
}

// required string group_name = 3;
bool IMGroupCreateReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGroupCreateReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGroupCreateReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGroupCreateReq::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_name();
}
 const ::std::string& IMGroupCreateReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_name)
  return group_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupCreateReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_name)
}
 void IMGroupCreateReq::set_group_name(const char* value) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateReq.group_name)
}
 void IMGroupCreateReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateReq.group_name)
}
 ::std::string* IMGroupCreateReq::mutable_group_name() {
  set_has_group_name();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGroupCreateReq::release_group_name() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupCreateReq.group_name)
  clear_has_group_name();
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupCreateReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    set_has_group_name();
  } else {
    clear_has_group_name();
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.group_name)
}

// required string group_avatar = 4;
bool IMGroupCreateReq::has_group_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMGroupCreateReq::set_has_group_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
void IMGroupCreateReq::clear_has_group_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMGroupCreateReq::clear_group_avatar() {
  group_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_avatar();
}
 const ::std::string& IMGroupCreateReq::group_avatar() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_avatar)
  return group_avatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupCreateReq::set_group_avatar(const ::std::string& value) {
  set_has_group_avatar();
  group_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_avatar)
}
 void IMGroupCreateReq::set_group_avatar(const char* value) {
  set_has_group_avatar();
  group_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateReq.group_avatar)
}
 void IMGroupCreateReq::set_group_avatar(const char* value, size_t size) {
  set_has_group_avatar();
  group_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateReq.group_avatar)
}
 ::std::string* IMGroupCreateReq::mutable_group_avatar() {
  set_has_group_avatar();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.group_avatar)
  return group_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGroupCreateReq::release_group_avatar() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupCreateReq.group_avatar)
  clear_has_group_avatar();
  return group_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupCreateReq::set_allocated_group_avatar(::std::string* group_avatar) {
  if (group_avatar != NULL) {
    set_has_group_avatar();
  } else {
    clear_has_group_avatar();
  }
  group_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_avatar);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.group_avatar)
}

// repeated uint32 member_id_list = 5;
int IMGroupCreateReq::member_id_list_size() const {
  return member_id_list_.size();
}
void IMGroupCreateReq::clear_member_id_list() {
  member_id_list_.Clear();
}
 ::google::protobuf::uint32 IMGroupCreateReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.member_id_list)
  return member_id_list_.Get(index);
}
 void IMGroupCreateReq::set_member_id_list(int index, ::google::protobuf::uint32 value) {
  member_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.member_id_list)
}
 void IMGroupCreateReq::add_member_id_list(::google::protobuf::uint32 value) {
  member_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupCreateReq.member_id_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupCreateReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupCreateReq.member_id_list)
  return member_id_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupCreateReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupCreateReq.member_id_list)
  return &member_id_list_;
}

// optional bytes attach_data = 20;
bool IMGroupCreateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IMGroupCreateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
void IMGroupCreateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void IMGroupCreateReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGroupCreateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupCreateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.attach_data)
}
 void IMGroupCreateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateReq.attach_data)
}
 void IMGroupCreateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateReq.attach_data)
}
 ::std::string* IMGroupCreateReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGroupCreateReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupCreateReq.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupCreateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGroupCreateRsp(
    IMGroupCreateRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGroupCreateRsp::kUserIdFieldNumber;
const int IMGroupCreateRsp::kResultCodeFieldNumber;
const int IMGroupCreateRsp::kGroupIdFieldNumber;
const int IMGroupCreateRsp::kGroupNameFieldNumber;
const int IMGroupCreateRsp::kUserIdListFieldNumber;
const int IMGroupCreateRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGroupCreateRsp::IMGroupCreateRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupCreateRsp)
}

void IMGroupCreateRsp::InitAsDefaultInstance() {
}

IMGroupCreateRsp::IMGroupCreateRsp(const IMGroupCreateRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupCreateRsp)
}

void IMGroupCreateRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  result_code_ = 0u;
  group_id_ = 0u;
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupCreateRsp::~IMGroupCreateRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupCreateRsp)
  SharedDtor();
}

void IMGroupCreateRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupCreateRsp& IMGroupCreateRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupCreateRsp* IMGroupCreateRsp::default_instance_ = NULL;

IMGroupCreateRsp* IMGroupCreateRsp::New(::google::protobuf::Arena* arena) const {
  IMGroupCreateRsp* n = new IMGroupCreateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGroupCreateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupCreateRsp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMGroupCreateRsp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMGroupCreateRsp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 47u) {
    ZR_(user_id_, result_code_);
    group_id_ = 0u;
    if (has_group_name()) {
      group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGroupCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGroupCreateRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupCreateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_name;
        break;
      }

      // required string group_name = 4;
      case 4: {
        if (tag == 34) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_user_id_list;
        break;
      }

      // repeated uint32 user_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_user_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupCreateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupCreateRsp)
  return false;
#undef DO_
}

void IMGroupCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupCreateRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // required string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_name(), output);
  }

  // repeated uint32 user_id_list = 5;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupCreateRsp)
}

int IMGroupCreateRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Group.IMGroupCreateRsp)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_result_code()) {
    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  if (has_group_name()) {
    // required string group_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());
  }

  return total_size;
}
int IMGroupCreateRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupCreateRsp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

    // required string group_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 36u) {
    // optional uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id_list(i));
    }
    total_size += 1 * this->user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupCreateRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupCreateRsp*>(&from));
}

void IMGroupCreateRsp::MergeFrom(const IMGroupCreateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupCreateRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  user_id_list_.MergeFrom(from.user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_has_group_name();
      group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGroupCreateRsp::CopyFrom(const IMGroupCreateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupCreateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupCreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void IMGroupCreateRsp::Swap(IMGroupCreateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGroupCreateRsp::InternalSwap(IMGroupCreateRsp* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(result_code_, other->result_code_);
  std::swap(group_id_, other->group_id_);
  group_name_.Swap(&other->group_name_);
  user_id_list_.UnsafeArenaSwap(&other->user_id_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGroupCreateRsp::GetTypeName() const {
  return "IM.Group.IMGroupCreateRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGroupCreateRsp

// required uint32 user_id = 1;
bool IMGroupCreateRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGroupCreateRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGroupCreateRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGroupCreateRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGroupCreateRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.user_id)
  return user_id_;
}
 void IMGroupCreateRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.user_id)
}

// required uint32 result_code = 2;
bool IMGroupCreateRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGroupCreateRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGroupCreateRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGroupCreateRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
 ::google::protobuf::uint32 IMGroupCreateRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.result_code)
  return result_code_;
}
 void IMGroupCreateRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.result_code)
}

// optional uint32 group_id = 3;
bool IMGroupCreateRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGroupCreateRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGroupCreateRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGroupCreateRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
 ::google::protobuf::uint32 IMGroupCreateRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.group_id)
  return group_id_;
}
 void IMGroupCreateRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.group_id)
}

// required string group_name = 4;
bool IMGroupCreateRsp::has_group_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMGroupCreateRsp::set_has_group_name() {
  _has_bits_[0] |= 0x00000008u;
}
void IMGroupCreateRsp::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMGroupCreateRsp::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_name();
}
 const ::std::string& IMGroupCreateRsp::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.group_name)
  return group_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupCreateRsp::set_group_name(const ::std::string& value) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.group_name)
}
 void IMGroupCreateRsp::set_group_name(const char* value) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateRsp.group_name)
}
 void IMGroupCreateRsp::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateRsp.group_name)
}
 ::std::string* IMGroupCreateRsp::mutable_group_name() {
  set_has_group_name();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateRsp.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGroupCreateRsp::release_group_name() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupCreateRsp.group_name)
  clear_has_group_name();
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupCreateRsp::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    set_has_group_name();
  } else {
    clear_has_group_name();
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateRsp.group_name)
}

// repeated uint32 user_id_list = 5;
int IMGroupCreateRsp::user_id_list_size() const {
  return user_id_list_.size();
}
void IMGroupCreateRsp::clear_user_id_list() {
  user_id_list_.Clear();
}
 ::google::protobuf::uint32 IMGroupCreateRsp::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.user_id_list)
  return user_id_list_.Get(index);
}
 void IMGroupCreateRsp::set_user_id_list(int index, ::google::protobuf::uint32 value) {
  user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.user_id_list)
}
 void IMGroupCreateRsp::add_user_id_list(::google::protobuf::uint32 value) {
  user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupCreateRsp.user_id_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupCreateRsp::user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupCreateRsp.user_id_list)
  return user_id_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupCreateRsp::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupCreateRsp.user_id_list)
  return &user_id_list_;
}

// optional bytes attach_data = 20;
bool IMGroupCreateRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IMGroupCreateRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
void IMGroupCreateRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void IMGroupCreateRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGroupCreateRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupCreateRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.attach_data)
}
 void IMGroupCreateRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateRsp.attach_data)
}
 void IMGroupCreateRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateRsp.attach_data)
}
 ::std::string* IMGroupCreateRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGroupCreateRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupCreateRsp.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupCreateRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGroupChangeMemberReq(
    IMGroupChangeMemberReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGroupChangeMemberReq::kUserIdFieldNumber;
const int IMGroupChangeMemberReq::kChangeTypeFieldNumber;
const int IMGroupChangeMemberReq::kGroupIdFieldNumber;
const int IMGroupChangeMemberReq::kMemberIdListFieldNumber;
const int IMGroupChangeMemberReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGroupChangeMemberReq::IMGroupChangeMemberReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberReq)
}

void IMGroupChangeMemberReq::InitAsDefaultInstance() {
}

IMGroupChangeMemberReq::IMGroupChangeMemberReq(const IMGroupChangeMemberReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberReq)
}

void IMGroupChangeMemberReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  change_type_ = 1;
  group_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberReq::~IMGroupChangeMemberReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberReq)
  SharedDtor();
}

void IMGroupChangeMemberReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupChangeMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberReq& IMGroupChangeMemberReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberReq* IMGroupChangeMemberReq::default_instance_ = NULL;

IMGroupChangeMemberReq* IMGroupChangeMemberReq::New(::google::protobuf::Arena* arena) const {
  IMGroupChangeMemberReq* n = new IMGroupChangeMemberReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGroupChangeMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupChangeMemberReq)
  if (_has_bits_[0 / 32] & 23u) {
    user_id_ = 0u;
    change_type_ = 1;
    group_id_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  member_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGroupChangeMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGroupChangeMemberReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // required .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupModifyType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupModifyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_id_list;
        break;
      }

      // repeated uint32 member_id_list = 4;
      case 4: {
        if (tag == 32) {
         parse_member_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_member_id_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberReq)
  return false;
#undef DO_
}

void IMGroupChangeMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // repeated uint32 member_id_list = 4;
  for (int i = 0; i < this->member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->member_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberReq)
}

int IMGroupChangeMemberReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Group.IMGroupChangeMemberReq)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_change_type()) {
    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  if (has_group_id()) {
    // required uint32 group_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  return total_size;
}
int IMGroupChangeMemberReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupChangeMemberReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());

    // required uint32 group_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // repeated uint32 member_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_id_list(i));
    }
    total_size += 1 * this->member_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberReq*>(&from));
}

void IMGroupChangeMemberReq::MergeFrom(const IMGroupChangeMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupChangeMemberReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGroupChangeMemberReq::CopyFrom(const IMGroupChangeMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupChangeMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupChangeMemberReq::Swap(IMGroupChangeMemberReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGroupChangeMemberReq::InternalSwap(IMGroupChangeMemberReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(change_type_, other->change_type_);
  std::swap(group_id_, other->group_id_);
  member_id_list_.UnsafeArenaSwap(&other->member_id_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGroupChangeMemberReq::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGroupChangeMemberReq

// required uint32 user_id = 1;
bool IMGroupChangeMemberReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGroupChangeMemberReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGroupChangeMemberReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGroupChangeMemberReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGroupChangeMemberReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.user_id)
  return user_id_;
}
 void IMGroupChangeMemberReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.user_id)
}

// required .IM.BaseDefine.GroupModifyType change_type = 2;
bool IMGroupChangeMemberReq::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGroupChangeMemberReq::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGroupChangeMemberReq::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGroupChangeMemberReq::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
 ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberReq::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.change_type)
  return static_cast< ::IM::BaseDefine::GroupModifyType >(change_type_);
}
 void IMGroupChangeMemberReq::set_change_type(::IM::BaseDefine::GroupModifyType value) {
  assert(::IM::BaseDefine::GroupModifyType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.change_type)
}

// required uint32 group_id = 3;
bool IMGroupChangeMemberReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGroupChangeMemberReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGroupChangeMemberReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGroupChangeMemberReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
 ::google::protobuf::uint32 IMGroupChangeMemberReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.group_id)
  return group_id_;
}
 void IMGroupChangeMemberReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.group_id)
}

// repeated uint32 member_id_list = 4;
int IMGroupChangeMemberReq::member_id_list_size() const {
  return member_id_list_.size();
}
void IMGroupChangeMemberReq::clear_member_id_list() {
  member_id_list_.Clear();
}
 ::google::protobuf::uint32 IMGroupChangeMemberReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return member_id_list_.Get(index);
}
 void IMGroupChangeMemberReq::set_member_id_list(int index, ::google::protobuf::uint32 value) {
  member_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.member_id_list)
}
 void IMGroupChangeMemberReq::add_member_id_list(::google::protobuf::uint32 value) {
  member_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberReq.member_id_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupChangeMemberReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return member_id_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupChangeMemberReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return &member_id_list_;
}

// optional bytes attach_data = 20;
bool IMGroupChangeMemberReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMGroupChangeMemberReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
void IMGroupChangeMemberReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMGroupChangeMemberReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGroupChangeMemberReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupChangeMemberReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.attach_data)
}
 void IMGroupChangeMemberReq::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupChangeMemberReq.attach_data)
}
 void IMGroupChangeMemberReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupChangeMemberReq.attach_data)
}
 ::std::string* IMGroupChangeMemberReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGroupChangeMemberReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupChangeMemberReq.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupChangeMemberReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupChangeMemberReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGroupChangeMemberRsp(
    IMGroupChangeMemberRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGroupChangeMemberRsp::kUserIdFieldNumber;
const int IMGroupChangeMemberRsp::kChangeTypeFieldNumber;
const int IMGroupChangeMemberRsp::kResultCodeFieldNumber;
const int IMGroupChangeMemberRsp::kGroupIdFieldNumber;
const int IMGroupChangeMemberRsp::kCurUserIdListFieldNumber;
const int IMGroupChangeMemberRsp::kChgUserIdListFieldNumber;
const int IMGroupChangeMemberRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGroupChangeMemberRsp::IMGroupChangeMemberRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberRsp)
}

void IMGroupChangeMemberRsp::InitAsDefaultInstance() {
}

IMGroupChangeMemberRsp::IMGroupChangeMemberRsp(const IMGroupChangeMemberRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberRsp)
}

void IMGroupChangeMemberRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  change_type_ = 1;
  result_code_ = 0u;
  group_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberRsp::~IMGroupChangeMemberRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberRsp)
  SharedDtor();
}

void IMGroupChangeMemberRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupChangeMemberRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberRsp& IMGroupChangeMemberRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberRsp* IMGroupChangeMemberRsp::default_instance_ = NULL;

IMGroupChangeMemberRsp* IMGroupChangeMemberRsp::New(::google::protobuf::Arena* arena) const {
  IMGroupChangeMemberRsp* n = new IMGroupChangeMemberRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGroupChangeMemberRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupChangeMemberRsp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMGroupChangeMemberRsp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMGroupChangeMemberRsp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 79u) {
    ZR_(result_code_, group_id_);
    user_id_ = 0u;
    change_type_ = 1;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  cur_user_id_list_.Clear();
  chg_user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGroupChangeMemberRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGroupChangeMemberRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // required .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupModifyType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupModifyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_user_id_list;
        break;
      }

      // repeated uint32 cur_user_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_cur_user_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_user_id_list;
        if (input->ExpectTag(48)) goto parse_chg_user_id_list;
        break;
      }

      // repeated uint32 chg_user_id_list = 6;
      case 6: {
        if (tag == 48) {
         parse_chg_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_chg_user_id_list())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chg_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_chg_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberRsp)
  return false;
#undef DO_
}

void IMGroupChangeMemberRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // required uint32 result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result_code(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // repeated uint32 cur_user_id_list = 5;
  for (int i = 0; i < this->cur_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->cur_user_id_list(i), output);
  }

  // repeated uint32 chg_user_id_list = 6;
  for (int i = 0; i < this->chg_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->chg_user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberRsp)
}

int IMGroupChangeMemberRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Group.IMGroupChangeMemberRsp)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_change_type()) {
    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  if (has_result_code()) {
    // required uint32 result_code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  if (has_group_id()) {
    // required uint32 group_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  return total_size;
}
int IMGroupChangeMemberRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupChangeMemberRsp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());

    // required uint32 result_code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

    // required uint32 group_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // repeated uint32 cur_user_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_user_id_list(i));
    }
    total_size += 1 * this->cur_user_id_list_size() + data_size;
  }

  // repeated uint32 chg_user_id_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->chg_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chg_user_id_list(i));
    }
    total_size += 1 * this->chg_user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberRsp*>(&from));
}

void IMGroupChangeMemberRsp::MergeFrom(const IMGroupChangeMemberRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupChangeMemberRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cur_user_id_list_.MergeFrom(from.cur_user_id_list_);
  chg_user_id_list_.MergeFrom(from.chg_user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGroupChangeMemberRsp::CopyFrom(const IMGroupChangeMemberRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupChangeMemberRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupChangeMemberRsp::Swap(IMGroupChangeMemberRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGroupChangeMemberRsp::InternalSwap(IMGroupChangeMemberRsp* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(change_type_, other->change_type_);
  std::swap(result_code_, other->result_code_);
  std::swap(group_id_, other->group_id_);
  cur_user_id_list_.UnsafeArenaSwap(&other->cur_user_id_list_);
  chg_user_id_list_.UnsafeArenaSwap(&other->chg_user_id_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGroupChangeMemberRsp::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGroupChangeMemberRsp

// required uint32 user_id = 1;
bool IMGroupChangeMemberRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGroupChangeMemberRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGroupChangeMemberRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGroupChangeMemberRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGroupChangeMemberRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.user_id)
  return user_id_;
}
 void IMGroupChangeMemberRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.user_id)
}

// required .IM.BaseDefine.GroupModifyType change_type = 2;
bool IMGroupChangeMemberRsp::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGroupChangeMemberRsp::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGroupChangeMemberRsp::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGroupChangeMemberRsp::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
 ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberRsp::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.change_type)
  return static_cast< ::IM::BaseDefine::GroupModifyType >(change_type_);
}
 void IMGroupChangeMemberRsp::set_change_type(::IM::BaseDefine::GroupModifyType value) {
  assert(::IM::BaseDefine::GroupModifyType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.change_type)
}

// required uint32 result_code = 3;
bool IMGroupChangeMemberRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGroupChangeMemberRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGroupChangeMemberRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGroupChangeMemberRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
 ::google::protobuf::uint32 IMGroupChangeMemberRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.result_code)
  return result_code_;
}
 void IMGroupChangeMemberRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.result_code)
}

// required uint32 group_id = 4;
bool IMGroupChangeMemberRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMGroupChangeMemberRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
void IMGroupChangeMemberRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMGroupChangeMemberRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
 ::google::protobuf::uint32 IMGroupChangeMemberRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.group_id)
  return group_id_;
}
 void IMGroupChangeMemberRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.group_id)
}

// repeated uint32 cur_user_id_list = 5;
int IMGroupChangeMemberRsp::cur_user_id_list_size() const {
  return cur_user_id_list_.size();
}
void IMGroupChangeMemberRsp::clear_cur_user_id_list() {
  cur_user_id_list_.Clear();
}
 ::google::protobuf::uint32 IMGroupChangeMemberRsp::cur_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
  return cur_user_id_list_.Get(index);
}
 void IMGroupChangeMemberRsp::set_cur_user_id_list(int index, ::google::protobuf::uint32 value) {
  cur_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
}
 void IMGroupChangeMemberRsp::add_cur_user_id_list(::google::protobuf::uint32 value) {
  cur_user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupChangeMemberRsp::cur_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
  return cur_user_id_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupChangeMemberRsp::mutable_cur_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
  return &cur_user_id_list_;
}

// repeated uint32 chg_user_id_list = 6;
int IMGroupChangeMemberRsp::chg_user_id_list_size() const {
  return chg_user_id_list_.size();
}
void IMGroupChangeMemberRsp::clear_chg_user_id_list() {
  chg_user_id_list_.Clear();
}
 ::google::protobuf::uint32 IMGroupChangeMemberRsp::chg_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return chg_user_id_list_.Get(index);
}
 void IMGroupChangeMemberRsp::set_chg_user_id_list(int index, ::google::protobuf::uint32 value) {
  chg_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
}
 void IMGroupChangeMemberRsp::add_chg_user_id_list(::google::protobuf::uint32 value) {
  chg_user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupChangeMemberRsp::chg_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return chg_user_id_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupChangeMemberRsp::mutable_chg_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return &chg_user_id_list_;
}

// optional bytes attach_data = 20;
bool IMGroupChangeMemberRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IMGroupChangeMemberRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
void IMGroupChangeMemberRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void IMGroupChangeMemberRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGroupChangeMemberRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupChangeMemberRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.attach_data)
}
 void IMGroupChangeMemberRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupChangeMemberRsp.attach_data)
}
 void IMGroupChangeMemberRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupChangeMemberRsp.attach_data)
}
 ::std::string* IMGroupChangeMemberRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGroupChangeMemberRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupChangeMemberRsp.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupChangeMemberRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupChangeMemberRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGroupShieldReq(
    IMGroupShieldReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGroupShieldReq::kUserIdFieldNumber;
const int IMGroupShieldReq::kGroupIdFieldNumber;
const int IMGroupShieldReq::kShieldStatusFieldNumber;
const int IMGroupShieldReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGroupShieldReq::IMGroupShieldReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupShieldReq)
}

void IMGroupShieldReq::InitAsDefaultInstance() {
}

IMGroupShieldReq::IMGroupShieldReq(const IMGroupShieldReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupShieldReq)
}

void IMGroupShieldReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  group_id_ = 0u;
  shield_status_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupShieldReq::~IMGroupShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupShieldReq)
  SharedDtor();
}

void IMGroupShieldReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupShieldReq& IMGroupShieldReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupShieldReq* IMGroupShieldReq::default_instance_ = NULL;

IMGroupShieldReq* IMGroupShieldReq::New(::google::protobuf::Arena* arena) const {
  IMGroupShieldReq* n = new IMGroupShieldReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGroupShieldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupShieldReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMGroupShieldReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMGroupShieldReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(user_id_, group_id_);
    shield_status_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGroupShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGroupShieldReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupShieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shield_status;
        break;
      }

      // required uint32 shield_status = 3;
      case 3: {
        if (tag == 24) {
         parse_shield_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
          set_has_shield_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupShieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupShieldReq)
  return false;
#undef DO_
}

void IMGroupShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupShieldReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 shield_status = 3;
  if (has_shield_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shield_status(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupShieldReq)
}

int IMGroupShieldReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Group.IMGroupShieldReq)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_group_id()) {
    // required uint32 group_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  if (has_shield_status()) {
    // required uint32 shield_status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  return total_size;
}
int IMGroupShieldReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupShieldReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required uint32 group_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());

    // required uint32 shield_status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupShieldReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupShieldReq*>(&from));
}

void IMGroupShieldReq::MergeFrom(const IMGroupShieldReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupShieldReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_shield_status()) {
      set_shield_status(from.shield_status());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGroupShieldReq::CopyFrom(const IMGroupShieldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupShieldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupShieldReq::Swap(IMGroupShieldReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGroupShieldReq::InternalSwap(IMGroupShieldReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(group_id_, other->group_id_);
  std::swap(shield_status_, other->shield_status_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGroupShieldReq::GetTypeName() const {
  return "IM.Group.IMGroupShieldReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGroupShieldReq

// required uint32 user_id = 1;
bool IMGroupShieldReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGroupShieldReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGroupShieldReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGroupShieldReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGroupShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.user_id)
  return user_id_;
}
 void IMGroupShieldReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.user_id)
}

// required uint32 group_id = 2;
bool IMGroupShieldReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGroupShieldReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGroupShieldReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGroupShieldReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
 ::google::protobuf::uint32 IMGroupShieldReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.group_id)
  return group_id_;
}
 void IMGroupShieldReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.group_id)
}

// required uint32 shield_status = 3;
bool IMGroupShieldReq::has_shield_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGroupShieldReq::set_has_shield_status() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGroupShieldReq::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGroupShieldReq::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
 ::google::protobuf::uint32 IMGroupShieldReq::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.shield_status)
  return shield_status_;
}
 void IMGroupShieldReq::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.shield_status)
}

// optional bytes attach_data = 20;
bool IMGroupShieldReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMGroupShieldReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
void IMGroupShieldReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMGroupShieldReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGroupShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupShieldReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.attach_data)
}
 void IMGroupShieldReq::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupShieldReq.attach_data)
}
 void IMGroupShieldReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupShieldReq.attach_data)
}
 ::std::string* IMGroupShieldReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupShieldReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGroupShieldReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupShieldReq.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupShieldReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGroupShieldRsp(
    IMGroupShieldRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGroupShieldRsp::kUserIdFieldNumber;
const int IMGroupShieldRsp::kGroupIdFieldNumber;
const int IMGroupShieldRsp::kResultCodeFieldNumber;
const int IMGroupShieldRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGroupShieldRsp::IMGroupShieldRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupShieldRsp)
}

void IMGroupShieldRsp::InitAsDefaultInstance() {
}

IMGroupShieldRsp::IMGroupShieldRsp(const IMGroupShieldRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupShieldRsp)
}

void IMGroupShieldRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  group_id_ = 0u;
  result_code_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupShieldRsp::~IMGroupShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupShieldRsp)
  SharedDtor();
}

void IMGroupShieldRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupShieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupShieldRsp& IMGroupShieldRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupShieldRsp* IMGroupShieldRsp::default_instance_ = NULL;

IMGroupShieldRsp* IMGroupShieldRsp::New(::google::protobuf::Arena* arena) const {
  IMGroupShieldRsp* n = new IMGroupShieldRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGroupShieldRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupShieldRsp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMGroupShieldRsp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMGroupShieldRsp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(user_id_, group_id_);
    result_code_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGroupShieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGroupShieldRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupShieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupShieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupShieldRsp)
  return false;
#undef DO_
}

void IMGroupShieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupShieldRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupShieldRsp)
}

int IMGroupShieldRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Group.IMGroupShieldRsp)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_group_id()) {
    // required uint32 group_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  if (has_result_code()) {
    // required uint32 result_code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  return total_size;
}
int IMGroupShieldRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupShieldRsp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required uint32 group_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());

    // required uint32 result_code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupShieldRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupShieldRsp*>(&from));
}

void IMGroupShieldRsp::MergeFrom(const IMGroupShieldRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupShieldRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGroupShieldRsp::CopyFrom(const IMGroupShieldRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupShieldRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupShieldRsp::Swap(IMGroupShieldRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGroupShieldRsp::InternalSwap(IMGroupShieldRsp* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(group_id_, other->group_id_);
  std::swap(result_code_, other->result_code_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGroupShieldRsp::GetTypeName() const {
  return "IM.Group.IMGroupShieldRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGroupShieldRsp

// required uint32 user_id = 1;
bool IMGroupShieldRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGroupShieldRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGroupShieldRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGroupShieldRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGroupShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.user_id)
  return user_id_;
}
 void IMGroupShieldRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.user_id)
}

// required uint32 group_id = 2;
bool IMGroupShieldRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGroupShieldRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGroupShieldRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGroupShieldRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
 ::google::protobuf::uint32 IMGroupShieldRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.group_id)
  return group_id_;
}
 void IMGroupShieldRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.group_id)
}

// required uint32 result_code = 3;
bool IMGroupShieldRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGroupShieldRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGroupShieldRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGroupShieldRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
 ::google::protobuf::uint32 IMGroupShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.result_code)
  return result_code_;
}
 void IMGroupShieldRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.result_code)
}

// optional bytes attach_data = 20;
bool IMGroupShieldRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMGroupShieldRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
void IMGroupShieldRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMGroupShieldRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGroupShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupShieldRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.attach_data)
}
 void IMGroupShieldRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupShieldRsp.attach_data)
}
 void IMGroupShieldRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupShieldRsp.attach_data)
}
 ::std::string* IMGroupShieldRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupShieldRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGroupShieldRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Group.IMGroupShieldRsp.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGroupShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupShieldRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGroupChangeMemberNotify(
    IMGroupChangeMemberNotify* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGroupChangeMemberNotify::kUserIdFieldNumber;
const int IMGroupChangeMemberNotify::kChangeTypeFieldNumber;
const int IMGroupChangeMemberNotify::kGroupIdFieldNumber;
const int IMGroupChangeMemberNotify::kCurUserIdListFieldNumber;
const int IMGroupChangeMemberNotify::kChgUserIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGroupChangeMemberNotify::IMGroupChangeMemberNotify()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberNotify)
}

void IMGroupChangeMemberNotify::InitAsDefaultInstance() {
}

IMGroupChangeMemberNotify::IMGroupChangeMemberNotify(const IMGroupChangeMemberNotify& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberNotify)
}

void IMGroupChangeMemberNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  change_type_ = 1;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberNotify::~IMGroupChangeMemberNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberNotify)
  SharedDtor();
}

void IMGroupChangeMemberNotify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupChangeMemberNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberNotify& IMGroupChangeMemberNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberNotify* IMGroupChangeMemberNotify::default_instance_ = NULL;

IMGroupChangeMemberNotify* IMGroupChangeMemberNotify::New(::google::protobuf::Arena* arena) const {
  IMGroupChangeMemberNotify* n = new IMGroupChangeMemberNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGroupChangeMemberNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupChangeMemberNotify)
  if (_has_bits_[0 / 32] & 7u) {
    user_id_ = 0u;
    change_type_ = 1;
    group_id_ = 0u;
  }
  cur_user_id_list_.Clear();
  chg_user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGroupChangeMemberNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGroupChangeMemberNotify, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // required .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupModifyType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupModifyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_user_id_list;
        break;
      }

      // repeated uint32 cur_user_id_list = 4;
      case 4: {
        if (tag == 32) {
         parse_cur_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_cur_user_id_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_user_id_list;
        if (input->ExpectTag(40)) goto parse_chg_user_id_list;
        break;
      }

      // repeated uint32 chg_user_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_chg_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_chg_user_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chg_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chg_user_id_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberNotify)
  return false;
#undef DO_
}

void IMGroupChangeMemberNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // repeated uint32 cur_user_id_list = 4;
  for (int i = 0; i < this->cur_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->cur_user_id_list(i), output);
  }

  // repeated uint32 chg_user_id_list = 5;
  for (int i = 0; i < this->chg_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->chg_user_id_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberNotify)
}

int IMGroupChangeMemberNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Group.IMGroupChangeMemberNotify)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_change_type()) {
    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  if (has_group_id()) {
    // required uint32 group_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  return total_size;
}
int IMGroupChangeMemberNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupChangeMemberNotify)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());

    // required uint32 group_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 cur_user_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_user_id_list(i));
    }
    total_size += 1 * this->cur_user_id_list_size() + data_size;
  }

  // repeated uint32 chg_user_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->chg_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chg_user_id_list(i));
    }
    total_size += 1 * this->chg_user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberNotify*>(&from));
}

void IMGroupChangeMemberNotify::MergeFrom(const IMGroupChangeMemberNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupChangeMemberNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cur_user_id_list_.MergeFrom(from.cur_user_id_list_);
  chg_user_id_list_.MergeFrom(from.chg_user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGroupChangeMemberNotify::CopyFrom(const IMGroupChangeMemberNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupChangeMemberNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupChangeMemberNotify::Swap(IMGroupChangeMemberNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGroupChangeMemberNotify::InternalSwap(IMGroupChangeMemberNotify* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(change_type_, other->change_type_);
  std::swap(group_id_, other->group_id_);
  cur_user_id_list_.UnsafeArenaSwap(&other->cur_user_id_list_);
  chg_user_id_list_.UnsafeArenaSwap(&other->chg_user_id_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGroupChangeMemberNotify::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGroupChangeMemberNotify

// required uint32 user_id = 1;
bool IMGroupChangeMemberNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGroupChangeMemberNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGroupChangeMemberNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGroupChangeMemberNotify::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGroupChangeMemberNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.user_id)
  return user_id_;
}
 void IMGroupChangeMemberNotify::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.user_id)
}

// required .IM.BaseDefine.GroupModifyType change_type = 2;
bool IMGroupChangeMemberNotify::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGroupChangeMemberNotify::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGroupChangeMemberNotify::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGroupChangeMemberNotify::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
 ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberNotify::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.change_type)
  return static_cast< ::IM::BaseDefine::GroupModifyType >(change_type_);
}
 void IMGroupChangeMemberNotify::set_change_type(::IM::BaseDefine::GroupModifyType value) {
  assert(::IM::BaseDefine::GroupModifyType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.change_type)
}

// required uint32 group_id = 3;
bool IMGroupChangeMemberNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGroupChangeMemberNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGroupChangeMemberNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGroupChangeMemberNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
 ::google::protobuf::uint32 IMGroupChangeMemberNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.group_id)
  return group_id_;
}
 void IMGroupChangeMemberNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.group_id)
}

// repeated uint32 cur_user_id_list = 4;
int IMGroupChangeMemberNotify::cur_user_id_list_size() const {
  return cur_user_id_list_.size();
}
void IMGroupChangeMemberNotify::clear_cur_user_id_list() {
  cur_user_id_list_.Clear();
}
 ::google::protobuf::uint32 IMGroupChangeMemberNotify::cur_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
  return cur_user_id_list_.Get(index);
}
 void IMGroupChangeMemberNotify::set_cur_user_id_list(int index, ::google::protobuf::uint32 value) {
  cur_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
}
 void IMGroupChangeMemberNotify::add_cur_user_id_list(::google::protobuf::uint32 value) {
  cur_user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupChangeMemberNotify::cur_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
  return cur_user_id_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupChangeMemberNotify::mutable_cur_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
  return &cur_user_id_list_;
}

// repeated uint32 chg_user_id_list = 5;
int IMGroupChangeMemberNotify::chg_user_id_list_size() const {
  return chg_user_id_list_.size();
}
void IMGroupChangeMemberNotify::clear_chg_user_id_list() {
  chg_user_id_list_.Clear();
}
 ::google::protobuf::uint32 IMGroupChangeMemberNotify::chg_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return chg_user_id_list_.Get(index);
}
 void IMGroupChangeMemberNotify::set_chg_user_id_list(int index, ::google::protobuf::uint32 value) {
  chg_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
}
 void IMGroupChangeMemberNotify::add_chg_user_id_list(::google::protobuf::uint32 value) {
  chg_user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupChangeMemberNotify::chg_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return chg_user_id_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupChangeMemberNotify::mutable_chg_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return &chg_user_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Group
}  // namespace IM

// @@protoc_insertion_point(global_scope)
