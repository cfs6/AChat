// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Message {

void protobuf_ShutdownFile_IM_2eMessage_2eproto() {
  delete IMMsgData::default_instance_;
  delete IMMsgDataAck::default_instance_;
  delete IMMsgDataReadAck::default_instance_;
  delete IMMsgDataReadNotify::default_instance_;
  delete IMClientTimeReq::default_instance_;
  delete IMClientTimeRsp::default_instance_;
  delete IMUnreadMsgCntReq::default_instance_;
  delete IMUnreadMsgCntRsp::default_instance_;
  delete IMGetMsgListReq::default_instance_;
  delete IMGetMsgListRsp::default_instance_;
  delete IMGetLatestMsgIdReq::default_instance_;
  delete IMGetLatestMsgIdRsp::default_instance_;
  delete IMGetMsgByIdReq::default_instance_;
  delete IMGetMsgByIdRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_IM_2eMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMMsgData::default_instance_ = new IMMsgData();
  IMMsgDataAck::default_instance_ = new IMMsgDataAck();
  IMMsgDataReadAck::default_instance_ = new IMMsgDataReadAck();
  IMMsgDataReadNotify::default_instance_ = new IMMsgDataReadNotify();
  IMClientTimeReq::default_instance_ = new IMClientTimeReq();
  IMClientTimeRsp::default_instance_ = new IMClientTimeRsp();
  IMUnreadMsgCntReq::default_instance_ = new IMUnreadMsgCntReq();
  IMUnreadMsgCntRsp::default_instance_ = new IMUnreadMsgCntRsp();
  IMGetMsgListReq::default_instance_ = new IMGetMsgListReq();
  IMGetMsgListRsp::default_instance_ = new IMGetMsgListRsp();
  IMGetLatestMsgIdReq::default_instance_ = new IMGetLatestMsgIdReq();
  IMGetLatestMsgIdRsp::default_instance_ = new IMGetLatestMsgIdRsp();
  IMGetMsgByIdReq::default_instance_ = new IMGetMsgByIdReq();
  IMGetMsgByIdRsp::default_instance_ = new IMGetMsgByIdRsp();
  IMMsgData::default_instance_->InitAsDefaultInstance();
  IMMsgDataAck::default_instance_->InitAsDefaultInstance();
  IMMsgDataReadAck::default_instance_->InitAsDefaultInstance();
  IMMsgDataReadNotify::default_instance_->InitAsDefaultInstance();
  IMClientTimeReq::default_instance_->InitAsDefaultInstance();
  IMClientTimeRsp::default_instance_->InitAsDefaultInstance();
  IMUnreadMsgCntReq::default_instance_->InitAsDefaultInstance();
  IMUnreadMsgCntRsp::default_instance_->InitAsDefaultInstance();
  IMGetMsgListReq::default_instance_->InitAsDefaultInstance();
  IMGetMsgListRsp::default_instance_->InitAsDefaultInstance();
  IMGetLatestMsgIdReq::default_instance_->InitAsDefaultInstance();
  IMGetLatestMsgIdRsp::default_instance_->InitAsDefaultInstance();
  IMGetMsgByIdReq::default_instance_->InitAsDefaultInstance();
  IMGetMsgByIdRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eMessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eMessage_2eproto_once_);
void protobuf_AddDesc_IM_2eMessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eMessage_2eproto_once_,
                 &protobuf_AddDesc_IM_2eMessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eMessage_2eproto {
  StaticDescriptorInitializer_IM_2eMessage_2eproto() {
    protobuf_AddDesc_IM_2eMessage_2eproto();
  }
} static_descriptor_initializer_IM_2eMessage_2eproto_;
#endif

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMMsgData(
    IMMsgData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgData::kFromUserIdFieldNumber;
const int IMMsgData::kToSessionIdFieldNumber;
const int IMMsgData::kMsgIdFieldNumber;
const int IMMsgData::kCreateTimeFieldNumber;
const int IMMsgData::kMsgTypeFieldNumber;
const int IMMsgData::kMsgDataFieldNumber;
const int IMMsgData::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgData::IMMsgData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgData)
}

void IMMsgData::InitAsDefaultInstance() {
}

IMMsgData::IMMsgData(const IMMsgData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgData)
}

void IMMsgData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_user_id_ = 0u;
  to_session_id_ = 0u;
  msg_id_ = 0u;
  create_time_ = 0u;
  msg_type_ = 1;
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMsgData::~IMMsgData() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgData)
  SharedDtor();
}

void IMMsgData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMMsgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgData& IMMsgData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMMsgData* IMMsgData::default_instance_ = NULL;

IMMsgData* IMMsgData::New(::google::protobuf::Arena* arena) const {
  IMMsgData* n = new IMMsgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgData::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMMsgData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMMsgData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(from_user_id_, create_time_);
    msg_type_ = 1;
    if (has_msg_data()) {
      msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMMsgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMMsgData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_session_id;
        break;
      }

      // required uint32 to_session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_session_id_)));
          set_has_to_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 4;
      case 4: {
        if (tag == 32) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msg_type;
        break;
      }

      // required .IM.BaseDefine.MsgType msg_type = 5;
      case 5: {
        if (tag == 40) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::IM::BaseDefine::MsgType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 6;
      case 6: {
        if (tag == 50) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgData)
  return false;
#undef DO_
}

void IMMsgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgData)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 to_session_id = 2;
  if (has_to_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_session_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required uint32 create_time = 4;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_time(), output);
  }

  // required .IM.BaseDefine.MsgType msg_type = 5;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_type(), output);
  }

  // required bytes msg_data = 6;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->msg_data(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgData)
}

int IMMsgData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Message.IMMsgData)
  int total_size = 0;

  if (has_from_user_id()) {
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  if (has_to_session_id()) {
    // required uint32 to_session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_session_id());
  }

  if (has_msg_id()) {
    // required uint32 msg_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  if (has_create_time()) {
    // required uint32 create_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_time());
  }

  if (has_msg_type()) {
    // required .IM.BaseDefine.MsgType msg_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  if (has_msg_data()) {
    // required bytes msg_data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());
  }

  return total_size;
}
int IMMsgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());

    // required uint32 to_session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_session_id());

    // required uint32 msg_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());

    // required uint32 create_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_time());

    // required .IM.BaseDefine.MsgType msg_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());

    // required bytes msg_data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgData*>(&from));
}

void IMMsgData::MergeFrom(const IMMsgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_session_id()) {
      set_to_session_id(from.to_session_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_data()) {
      set_has_msg_data();
      msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMMsgData::CopyFrom(const IMMsgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMMsgData::Swap(IMMsgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgData::InternalSwap(IMMsgData* other) {
  std::swap(from_user_id_, other->from_user_id_);
  std::swap(to_session_id_, other->to_session_id_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(create_time_, other->create_time_);
  std::swap(msg_type_, other->msg_type_);
  msg_data_.Swap(&other->msg_data_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgData::GetTypeName() const {
  return "IM.Message.IMMsgData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgData

// required uint32 from_user_id = 1;
bool IMMsgData::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMMsgData::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMMsgData::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMMsgData::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
 ::google::protobuf::uint32 IMMsgData::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.from_user_id)
  return from_user_id_;
}
 void IMMsgData::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.from_user_id)
}

// required uint32 to_session_id = 2;
bool IMMsgData::has_to_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMMsgData::set_has_to_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMMsgData::clear_has_to_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMMsgData::clear_to_session_id() {
  to_session_id_ = 0u;
  clear_has_to_session_id();
}
 ::google::protobuf::uint32 IMMsgData::to_session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.to_session_id)
  return to_session_id_;
}
 void IMMsgData::set_to_session_id(::google::protobuf::uint32 value) {
  set_has_to_session_id();
  to_session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.to_session_id)
}

// required uint32 msg_id = 3;
bool IMMsgData::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMMsgData::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMMsgData::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMMsgData::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
 ::google::protobuf::uint32 IMMsgData::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_id)
  return msg_id_;
}
 void IMMsgData::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_id)
}

// required uint32 create_time = 4;
bool IMMsgData::has_create_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMMsgData::set_has_create_time() {
  _has_bits_[0] |= 0x00000008u;
}
void IMMsgData::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMMsgData::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
 ::google::protobuf::uint32 IMMsgData::create_time() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.create_time)
  return create_time_;
}
 void IMMsgData::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.create_time)
}

// required .IM.BaseDefine.MsgType msg_type = 5;
bool IMMsgData::has_msg_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMMsgData::set_has_msg_type() {
  _has_bits_[0] |= 0x00000010u;
}
void IMMsgData::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMMsgData::clear_msg_type() {
  msg_type_ = 1;
  clear_has_msg_type();
}
 ::IM::BaseDefine::MsgType IMMsgData::msg_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_type)
  return static_cast< ::IM::BaseDefine::MsgType >(msg_type_);
}
 void IMMsgData::set_msg_type(::IM::BaseDefine::MsgType value) {
  assert(::IM::BaseDefine::MsgType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_type)
}

// required bytes msg_data = 6;
bool IMMsgData::has_msg_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IMMsgData::set_has_msg_data() {
  _has_bits_[0] |= 0x00000020u;
}
void IMMsgData::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void IMMsgData::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_data();
}
 const ::std::string& IMMsgData::msg_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_data)
  return msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMMsgData::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_data)
}
 void IMMsgData::set_msg_data(const char* value) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMMsgData.msg_data)
}
 void IMMsgData::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMMsgData.msg_data)
}
 ::std::string* IMMsgData::mutable_msg_data() {
  set_has_msg_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMMsgData.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMMsgData::release_msg_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMMsgData.msg_data)
  clear_has_msg_data();
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMMsgData::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    set_has_msg_data();
  } else {
    clear_has_msg_data();
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMMsgData.msg_data)
}

// optional bytes attach_data = 20;
bool IMMsgData::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IMMsgData::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
void IMMsgData::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void IMMsgData::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMMsgData::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMMsgData::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.attach_data)
}
 void IMMsgData::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMMsgData.attach_data)
}
 void IMMsgData::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMMsgData.attach_data)
}
 ::std::string* IMMsgData::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMMsgData.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMMsgData::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMMsgData.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMMsgData::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMMsgData.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMMsgDataAck(
    IMMsgDataAck* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgDataAck::kUserIdFieldNumber;
const int IMMsgDataAck::kSessionIdFieldNumber;
const int IMMsgDataAck::kMsgIdFieldNumber;
const int IMMsgDataAck::kSessionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgDataAck::IMMsgDataAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgDataAck)
}

void IMMsgDataAck::InitAsDefaultInstance() {
}

IMMsgDataAck::IMMsgDataAck(const IMMsgDataAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataAck)
}

void IMMsgDataAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  session_id_ = 0u;
  msg_id_ = 0u;
  session_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMsgDataAck::~IMMsgDataAck() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataAck)
  SharedDtor();
}

void IMMsgDataAck::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMMsgDataAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgDataAck& IMMsgDataAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMMsgDataAck* IMMsgDataAck::default_instance_ = NULL;

IMMsgDataAck* IMMsgDataAck::New(::google::protobuf::Arena* arena) const {
  IMMsgDataAck* n = new IMMsgDataAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMMsgDataAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMMsgDataAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(user_id_, msg_id_);
    session_type_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMMsgDataAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMMsgDataAck, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgDataAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 4;
      case 4: {
        if (tag == 32) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgDataAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgDataAck)
  return false;
#undef DO_
}

void IMMsgDataAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgDataAck)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 4;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgDataAck)
}

int IMMsgDataAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Message.IMMsgDataAck)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_session_id()) {
    // required uint32 session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_msg_id()) {
    // required uint32 msg_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  if (has_session_type()) {
    // required .IM.BaseDefine.SessionType session_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  return total_size;
}
int IMMsgDataAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataAck)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required uint32 session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required uint32 msg_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());

    // required .IM.BaseDefine.SessionType session_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgDataAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgDataAck*>(&from));
}

void IMMsgDataAck::MergeFrom(const IMMsgDataAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMMsgDataAck::CopyFrom(const IMMsgDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMMsgDataAck::Swap(IMMsgDataAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgDataAck::InternalSwap(IMMsgDataAck* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_id_, other->session_id_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgDataAck::GetTypeName() const {
  return "IM.Message.IMMsgDataAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgDataAck

// required uint32 user_id = 1;
bool IMMsgDataAck::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMMsgDataAck::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMMsgDataAck::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMMsgDataAck::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMMsgDataAck::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.user_id)
  return user_id_;
}
 void IMMsgDataAck::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.user_id)
}

// required uint32 session_id = 2;
bool IMMsgDataAck::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMMsgDataAck::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMMsgDataAck::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMMsgDataAck::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 IMMsgDataAck::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.session_id)
  return session_id_;
}
 void IMMsgDataAck::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.session_id)
}

// required uint32 msg_id = 3;
bool IMMsgDataAck::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMMsgDataAck::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMMsgDataAck::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMMsgDataAck::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
 ::google::protobuf::uint32 IMMsgDataAck::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.msg_id)
  return msg_id_;
}
 void IMMsgDataAck::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.msg_id)
}

// required .IM.BaseDefine.SessionType session_type = 4;
bool IMMsgDataAck::has_session_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMMsgDataAck::set_has_session_type() {
  _has_bits_[0] |= 0x00000008u;
}
void IMMsgDataAck::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMMsgDataAck::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
 ::IM::BaseDefine::SessionType IMMsgDataAck::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
 void IMMsgDataAck::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.session_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMMsgDataReadAck(
    IMMsgDataReadAck* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgDataReadAck::kUserIdFieldNumber;
const int IMMsgDataReadAck::kSessionIdFieldNumber;
const int IMMsgDataReadAck::kMsgIdFieldNumber;
const int IMMsgDataReadAck::kSessionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgDataReadAck::IMMsgDataReadAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgDataReadAck)
}

void IMMsgDataReadAck::InitAsDefaultInstance() {
}

IMMsgDataReadAck::IMMsgDataReadAck(const IMMsgDataReadAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataReadAck)
}

void IMMsgDataReadAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  session_id_ = 0u;
  msg_id_ = 0u;
  session_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMsgDataReadAck::~IMMsgDataReadAck() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataReadAck)
  SharedDtor();
}

void IMMsgDataReadAck::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMMsgDataReadAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgDataReadAck& IMMsgDataReadAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMMsgDataReadAck* IMMsgDataReadAck::default_instance_ = NULL;

IMMsgDataReadAck* IMMsgDataReadAck::New(::google::protobuf::Arena* arena) const {
  IMMsgDataReadAck* n = new IMMsgDataReadAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgDataReadAck::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataReadAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMMsgDataReadAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMMsgDataReadAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(user_id_, msg_id_);
    session_type_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMMsgDataReadAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMMsgDataReadAck, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgDataReadAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 4;
      case 4: {
        if (tag == 32) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgDataReadAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgDataReadAck)
  return false;
#undef DO_
}

void IMMsgDataReadAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgDataReadAck)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 4;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgDataReadAck)
}

int IMMsgDataReadAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Message.IMMsgDataReadAck)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_session_id()) {
    // required uint32 session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_msg_id()) {
    // required uint32 msg_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  if (has_session_type()) {
    // required .IM.BaseDefine.SessionType session_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  return total_size;
}
int IMMsgDataReadAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataReadAck)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required uint32 session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required uint32 msg_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());

    // required .IM.BaseDefine.SessionType session_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgDataReadAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgDataReadAck*>(&from));
}

void IMMsgDataReadAck::MergeFrom(const IMMsgDataReadAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataReadAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMMsgDataReadAck::CopyFrom(const IMMsgDataReadAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataReadAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataReadAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMMsgDataReadAck::Swap(IMMsgDataReadAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgDataReadAck::InternalSwap(IMMsgDataReadAck* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_id_, other->session_id_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgDataReadAck::GetTypeName() const {
  return "IM.Message.IMMsgDataReadAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgDataReadAck

// required uint32 user_id = 1;
bool IMMsgDataReadAck::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMMsgDataReadAck::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMMsgDataReadAck::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMMsgDataReadAck::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMMsgDataReadAck::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.user_id)
  return user_id_;
}
 void IMMsgDataReadAck::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.user_id)
}

// required uint32 session_id = 2;
bool IMMsgDataReadAck::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMMsgDataReadAck::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMMsgDataReadAck::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMMsgDataReadAck::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 IMMsgDataReadAck::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.session_id)
  return session_id_;
}
 void IMMsgDataReadAck::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.session_id)
}

// required uint32 msg_id = 3;
bool IMMsgDataReadAck::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMMsgDataReadAck::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMMsgDataReadAck::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMMsgDataReadAck::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
 ::google::protobuf::uint32 IMMsgDataReadAck::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.msg_id)
  return msg_id_;
}
 void IMMsgDataReadAck::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.msg_id)
}

// required .IM.BaseDefine.SessionType session_type = 4;
bool IMMsgDataReadAck::has_session_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMMsgDataReadAck::set_has_session_type() {
  _has_bits_[0] |= 0x00000008u;
}
void IMMsgDataReadAck::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMMsgDataReadAck::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
 ::IM::BaseDefine::SessionType IMMsgDataReadAck::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
 void IMMsgDataReadAck::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.session_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMMsgDataReadNotify(
    IMMsgDataReadNotify* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgDataReadNotify::kUserIdFieldNumber;
const int IMMsgDataReadNotify::kSessionIdFieldNumber;
const int IMMsgDataReadNotify::kMsgIdFieldNumber;
const int IMMsgDataReadNotify::kSessionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgDataReadNotify::IMMsgDataReadNotify()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgDataReadNotify)
}

void IMMsgDataReadNotify::InitAsDefaultInstance() {
}

IMMsgDataReadNotify::IMMsgDataReadNotify(const IMMsgDataReadNotify& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataReadNotify)
}

void IMMsgDataReadNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  session_id_ = 0u;
  msg_id_ = 0u;
  session_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMsgDataReadNotify::~IMMsgDataReadNotify() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataReadNotify)
  SharedDtor();
}

void IMMsgDataReadNotify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMMsgDataReadNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgDataReadNotify& IMMsgDataReadNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMMsgDataReadNotify* IMMsgDataReadNotify::default_instance_ = NULL;

IMMsgDataReadNotify* IMMsgDataReadNotify::New(::google::protobuf::Arena* arena) const {
  IMMsgDataReadNotify* n = new IMMsgDataReadNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgDataReadNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataReadNotify)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMMsgDataReadNotify, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMMsgDataReadNotify*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(user_id_, msg_id_);
    session_type_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMMsgDataReadNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMMsgDataReadNotify, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgDataReadNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 4;
      case 4: {
        if (tag == 32) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgDataReadNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgDataReadNotify)
  return false;
#undef DO_
}

void IMMsgDataReadNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgDataReadNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 4;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgDataReadNotify)
}

int IMMsgDataReadNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Message.IMMsgDataReadNotify)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_session_id()) {
    // required uint32 session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_msg_id()) {
    // required uint32 msg_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  if (has_session_type()) {
    // required .IM.BaseDefine.SessionType session_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  return total_size;
}
int IMMsgDataReadNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataReadNotify)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required uint32 session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required uint32 msg_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());

    // required .IM.BaseDefine.SessionType session_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgDataReadNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgDataReadNotify*>(&from));
}

void IMMsgDataReadNotify::MergeFrom(const IMMsgDataReadNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataReadNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMMsgDataReadNotify::CopyFrom(const IMMsgDataReadNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataReadNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataReadNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMMsgDataReadNotify::Swap(IMMsgDataReadNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgDataReadNotify::InternalSwap(IMMsgDataReadNotify* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_id_, other->session_id_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgDataReadNotify::GetTypeName() const {
  return "IM.Message.IMMsgDataReadNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgDataReadNotify

// required uint32 user_id = 1;
bool IMMsgDataReadNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMMsgDataReadNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMMsgDataReadNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMMsgDataReadNotify::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMMsgDataReadNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.user_id)
  return user_id_;
}
 void IMMsgDataReadNotify::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.user_id)
}

// required uint32 session_id = 2;
bool IMMsgDataReadNotify::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMMsgDataReadNotify::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IMMsgDataReadNotify::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMMsgDataReadNotify::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 IMMsgDataReadNotify::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.session_id)
  return session_id_;
}
 void IMMsgDataReadNotify::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.session_id)
}

// required uint32 msg_id = 3;
bool IMMsgDataReadNotify::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMMsgDataReadNotify::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMMsgDataReadNotify::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMMsgDataReadNotify::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
 ::google::protobuf::uint32 IMMsgDataReadNotify::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.msg_id)
  return msg_id_;
}
 void IMMsgDataReadNotify::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.msg_id)
}

// required .IM.BaseDefine.SessionType session_type = 4;
bool IMMsgDataReadNotify::has_session_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMMsgDataReadNotify::set_has_session_type() {
  _has_bits_[0] |= 0x00000008u;
}
void IMMsgDataReadNotify::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMMsgDataReadNotify::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
 ::IM::BaseDefine::SessionType IMMsgDataReadNotify::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
 void IMMsgDataReadNotify::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.session_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMClientTimeReq(
    IMClientTimeReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMClientTimeReq::IMClientTimeReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMClientTimeReq)
}

void IMClientTimeReq::InitAsDefaultInstance() {
}

IMClientTimeReq::IMClientTimeReq(const IMClientTimeReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMClientTimeReq)
}

void IMClientTimeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMClientTimeReq::~IMClientTimeReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMClientTimeReq)
  SharedDtor();
}

void IMClientTimeReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMClientTimeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMClientTimeReq& IMClientTimeReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMClientTimeReq* IMClientTimeReq::default_instance_ = NULL;

IMClientTimeReq* IMClientTimeReq::New(::google::protobuf::Arena* arena) const {
  IMClientTimeReq* n = new IMClientTimeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMClientTimeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMClientTimeReq)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMClientTimeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMClientTimeReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMClientTimeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMClientTimeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMClientTimeReq)
  return false;
#undef DO_
}

void IMClientTimeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMClientTimeReq)
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMClientTimeReq)
}

int IMClientTimeReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMClientTimeReq)
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMClientTimeReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMClientTimeReq*>(&from));
}

void IMClientTimeReq::MergeFrom(const IMClientTimeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMClientTimeReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMClientTimeReq::CopyFrom(const IMClientTimeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMClientTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMClientTimeReq::IsInitialized() const {

  return true;
}

void IMClientTimeReq::Swap(IMClientTimeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMClientTimeReq::InternalSwap(IMClientTimeReq* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMClientTimeReq::GetTypeName() const {
  return "IM.Message.IMClientTimeReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMClientTimeReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMClientTimeRsp(
    IMClientTimeRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMClientTimeRsp::kServerTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMClientTimeRsp::IMClientTimeRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMClientTimeRsp)
}

void IMClientTimeRsp::InitAsDefaultInstance() {
}

IMClientTimeRsp::IMClientTimeRsp(const IMClientTimeRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMClientTimeRsp)
}

void IMClientTimeRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMClientTimeRsp::~IMClientTimeRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMClientTimeRsp)
  SharedDtor();
}

void IMClientTimeRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMClientTimeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMClientTimeRsp& IMClientTimeRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMClientTimeRsp* IMClientTimeRsp::default_instance_ = NULL;

IMClientTimeRsp* IMClientTimeRsp::New(::google::protobuf::Arena* arena) const {
  IMClientTimeRsp* n = new IMClientTimeRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMClientTimeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMClientTimeRsp)
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMClientTimeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMClientTimeRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMClientTimeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMClientTimeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMClientTimeRsp)
  return false;
#undef DO_
}

void IMClientTimeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMClientTimeRsp)
  // required uint32 server_time = 1;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMClientTimeRsp)
}

int IMClientTimeRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMClientTimeRsp)
  int total_size = 0;

  // required uint32 server_time = 1;
  if (has_server_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_time());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMClientTimeRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMClientTimeRsp*>(&from));
}

void IMClientTimeRsp::MergeFrom(const IMClientTimeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMClientTimeRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMClientTimeRsp::CopyFrom(const IMClientTimeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMClientTimeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMClientTimeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMClientTimeRsp::Swap(IMClientTimeRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMClientTimeRsp::InternalSwap(IMClientTimeRsp* other) {
  std::swap(server_time_, other->server_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMClientTimeRsp::GetTypeName() const {
  return "IM.Message.IMClientTimeRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMClientTimeRsp

// required uint32 server_time = 1;
bool IMClientTimeRsp::has_server_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMClientTimeRsp::set_has_server_time() {
  _has_bits_[0] |= 0x00000001u;
}
void IMClientTimeRsp::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMClientTimeRsp::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
 ::google::protobuf::uint32 IMClientTimeRsp::server_time() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMClientTimeRsp.server_time)
  return server_time_;
}
 void IMClientTimeRsp::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMClientTimeRsp.server_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMUnreadMsgCntReq(
    IMUnreadMsgCntReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUnreadMsgCntReq::kUserIdFieldNumber;
const int IMUnreadMsgCntReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUnreadMsgCntReq::IMUnreadMsgCntReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMUnreadMsgCntReq)
}

void IMUnreadMsgCntReq::InitAsDefaultInstance() {
}

IMUnreadMsgCntReq::IMUnreadMsgCntReq(const IMUnreadMsgCntReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMUnreadMsgCntReq)
}

void IMUnreadMsgCntReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUnreadMsgCntReq::~IMUnreadMsgCntReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMUnreadMsgCntReq)
  SharedDtor();
}

void IMUnreadMsgCntReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUnreadMsgCntReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUnreadMsgCntReq& IMUnreadMsgCntReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMUnreadMsgCntReq* IMUnreadMsgCntReq::default_instance_ = NULL;

IMUnreadMsgCntReq* IMUnreadMsgCntReq::New(::google::protobuf::Arena* arena) const {
  IMUnreadMsgCntReq* n = new IMUnreadMsgCntReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUnreadMsgCntReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMUnreadMsgCntReq)
  if (_has_bits_[0 / 32] & 3u) {
    user_id_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMUnreadMsgCntReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMUnreadMsgCntReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMUnreadMsgCntReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMUnreadMsgCntReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMUnreadMsgCntReq)
  return false;
#undef DO_
}

void IMUnreadMsgCntReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMUnreadMsgCntReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMUnreadMsgCntReq)
}

int IMUnreadMsgCntReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMUnreadMsgCntReq)
  int total_size = 0;

  // required uint32 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUnreadMsgCntReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUnreadMsgCntReq*>(&from));
}

void IMUnreadMsgCntReq::MergeFrom(const IMUnreadMsgCntReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMUnreadMsgCntReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMUnreadMsgCntReq::CopyFrom(const IMUnreadMsgCntReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMUnreadMsgCntReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUnreadMsgCntReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMUnreadMsgCntReq::Swap(IMUnreadMsgCntReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUnreadMsgCntReq::InternalSwap(IMUnreadMsgCntReq* other) {
  std::swap(user_id_, other->user_id_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMUnreadMsgCntReq::GetTypeName() const {
  return "IM.Message.IMUnreadMsgCntReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUnreadMsgCntReq

// required uint32 user_id = 1;
bool IMUnreadMsgCntReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMUnreadMsgCntReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMUnreadMsgCntReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMUnreadMsgCntReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMUnreadMsgCntReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntReq.user_id)
  return user_id_;
}
 void IMUnreadMsgCntReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntReq.user_id)
}

// optional bytes attach_data = 20;
bool IMUnreadMsgCntReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMUnreadMsgCntReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
void IMUnreadMsgCntReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMUnreadMsgCntReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMUnreadMsgCntReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntReq.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMUnreadMsgCntReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntReq.attach_data)
}
 void IMUnreadMsgCntReq::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMUnreadMsgCntReq.attach_data)
}
 void IMUnreadMsgCntReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMUnreadMsgCntReq.attach_data)
}
 ::std::string* IMUnreadMsgCntReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMUnreadMsgCntReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMUnreadMsgCntReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMUnreadMsgCntReq.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMUnreadMsgCntReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMUnreadMsgCntReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMUnreadMsgCntRsp(
    IMUnreadMsgCntRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUnreadMsgCntRsp::kUserIdFieldNumber;
const int IMUnreadMsgCntRsp::kTotalCntFieldNumber;
const int IMUnreadMsgCntRsp::kUnreadinfoListFieldNumber;
const int IMUnreadMsgCntRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUnreadMsgCntRsp::IMUnreadMsgCntRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMUnreadMsgCntRsp)
}

void IMUnreadMsgCntRsp::InitAsDefaultInstance() {
}

IMUnreadMsgCntRsp::IMUnreadMsgCntRsp(const IMUnreadMsgCntRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMUnreadMsgCntRsp)
}

void IMUnreadMsgCntRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  total_cnt_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUnreadMsgCntRsp::~IMUnreadMsgCntRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMUnreadMsgCntRsp)
  SharedDtor();
}

void IMUnreadMsgCntRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUnreadMsgCntRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUnreadMsgCntRsp& IMUnreadMsgCntRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMUnreadMsgCntRsp* IMUnreadMsgCntRsp::default_instance_ = NULL;

IMUnreadMsgCntRsp* IMUnreadMsgCntRsp::New(::google::protobuf::Arena* arena) const {
  IMUnreadMsgCntRsp* n = new IMUnreadMsgCntRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUnreadMsgCntRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMUnreadMsgCntRsp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMUnreadMsgCntRsp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMUnreadMsgCntRsp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 11u) {
    ZR_(user_id_, total_cnt_);
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  unreadinfo_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMUnreadMsgCntRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMUnreadMsgCntRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMUnreadMsgCntRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_cnt;
        break;
      }

      // required uint32 total_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_total_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_cnt_)));
          set_has_total_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unreadinfo_list;
        break;
      }

      // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
      case 3: {
        if (tag == 26) {
         parse_unreadinfo_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_unreadinfo_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_unreadinfo_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_unreadinfo_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMUnreadMsgCntRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMUnreadMsgCntRsp)
  return false;
#undef DO_
}

void IMUnreadMsgCntRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMUnreadMsgCntRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 total_cnt = 2;
  if (has_total_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_cnt(), output);
  }

  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  for (unsigned int i = 0, n = this->unreadinfo_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->unreadinfo_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMUnreadMsgCntRsp)
}

int IMUnreadMsgCntRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Message.IMUnreadMsgCntRsp)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_total_cnt()) {
    // required uint32 total_cnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_cnt());
  }

  return total_size;
}
int IMUnreadMsgCntRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMUnreadMsgCntRsp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required uint32 total_cnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  total_size += 1 * this->unreadinfo_list_size();
  for (int i = 0; i < this->unreadinfo_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unreadinfo_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUnreadMsgCntRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUnreadMsgCntRsp*>(&from));
}

void IMUnreadMsgCntRsp::MergeFrom(const IMUnreadMsgCntRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMUnreadMsgCntRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  unreadinfo_list_.MergeFrom(from.unreadinfo_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_total_cnt()) {
      set_total_cnt(from.total_cnt());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMUnreadMsgCntRsp::CopyFrom(const IMUnreadMsgCntRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMUnreadMsgCntRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUnreadMsgCntRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->unreadinfo_list())) return false;
  return true;
}

void IMUnreadMsgCntRsp::Swap(IMUnreadMsgCntRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUnreadMsgCntRsp::InternalSwap(IMUnreadMsgCntRsp* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(total_cnt_, other->total_cnt_);
  unreadinfo_list_.UnsafeArenaSwap(&other->unreadinfo_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMUnreadMsgCntRsp::GetTypeName() const {
  return "IM.Message.IMUnreadMsgCntRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUnreadMsgCntRsp

// required uint32 user_id = 1;
bool IMUnreadMsgCntRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMUnreadMsgCntRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMUnreadMsgCntRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMUnreadMsgCntRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMUnreadMsgCntRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.user_id)
  return user_id_;
}
 void IMUnreadMsgCntRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntRsp.user_id)
}

// required uint32 total_cnt = 2;
bool IMUnreadMsgCntRsp::has_total_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMUnreadMsgCntRsp::set_has_total_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
void IMUnreadMsgCntRsp::clear_has_total_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMUnreadMsgCntRsp::clear_total_cnt() {
  total_cnt_ = 0u;
  clear_has_total_cnt();
}
 ::google::protobuf::uint32 IMUnreadMsgCntRsp::total_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.total_cnt)
  return total_cnt_;
}
 void IMUnreadMsgCntRsp::set_total_cnt(::google::protobuf::uint32 value) {
  set_has_total_cnt();
  total_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntRsp.total_cnt)
}

// repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
int IMUnreadMsgCntRsp::unreadinfo_list_size() const {
  return unreadinfo_list_.size();
}
void IMUnreadMsgCntRsp::clear_unreadinfo_list() {
  unreadinfo_list_.Clear();
}
const ::IM::BaseDefine::UnreadInfo& IMUnreadMsgCntRsp::unreadinfo_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return unreadinfo_list_.Get(index);
}
::IM::BaseDefine::UnreadInfo* IMUnreadMsgCntRsp::mutable_unreadinfo_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return unreadinfo_list_.Mutable(index);
}
::IM::BaseDefine::UnreadInfo* IMUnreadMsgCntRsp::add_unreadinfo_list() {
  // @@protoc_insertion_point(field_add:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return unreadinfo_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >*
IMUnreadMsgCntRsp::mutable_unreadinfo_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return &unreadinfo_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >&
IMUnreadMsgCntRsp::unreadinfo_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return unreadinfo_list_;
}

// optional bytes attach_data = 20;
bool IMUnreadMsgCntRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMUnreadMsgCntRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
void IMUnreadMsgCntRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMUnreadMsgCntRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMUnreadMsgCntRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMUnreadMsgCntRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntRsp.attach_data)
}
 void IMUnreadMsgCntRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMUnreadMsgCntRsp.attach_data)
}
 void IMUnreadMsgCntRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMUnreadMsgCntRsp.attach_data)
}
 ::std::string* IMUnreadMsgCntRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMUnreadMsgCntRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMUnreadMsgCntRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMUnreadMsgCntRsp.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMUnreadMsgCntRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMUnreadMsgCntRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGetMsgListReq(
    IMGetMsgListReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetMsgListReq::kUserIdFieldNumber;
const int IMGetMsgListReq::kSessionTypeFieldNumber;
const int IMGetMsgListReq::kSessionIdFieldNumber;
const int IMGetMsgListReq::kMsgIdBeginFieldNumber;
const int IMGetMsgListReq::kMsgCntFieldNumber;
const int IMGetMsgListReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetMsgListReq::IMGetMsgListReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgListReq)
}

void IMGetMsgListReq::InitAsDefaultInstance() {
}

IMGetMsgListReq::IMGetMsgListReq(const IMGetMsgListReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgListReq)
}

void IMGetMsgListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  msg_id_begin_ = 0u;
  msg_cnt_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetMsgListReq::~IMGetMsgListReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgListReq)
  SharedDtor();
}

void IMGetMsgListReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGetMsgListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetMsgListReq& IMGetMsgListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMGetMsgListReq* IMGetMsgListReq::default_instance_ = NULL;

IMGetMsgListReq* IMGetMsgListReq::New(::google::protobuf::Arena* arena) const {
  IMGetMsgListReq* n = new IMGetMsgListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetMsgListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgListReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMGetMsgListReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMGetMsgListReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(session_id_, msg_id_begin_);
    user_id_ = 0u;
    session_type_ = 1;
    msg_cnt_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGetMsgListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGetMsgListReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_begin;
        break;
      }

      // required uint32 msg_id_begin = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_begin_)));
          set_has_msg_id_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msg_cnt;
        break;
      }

      // required uint32 msg_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_msg_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_cnt_)));
          set_has_msg_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgListReq)
  return false;
#undef DO_
}

void IMGetMsgListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgListReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // required uint32 msg_id_begin = 4;
  if (has_msg_id_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_id_begin(), output);
  }

  // required uint32 msg_cnt = 5;
  if (has_msg_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msg_cnt(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgListReq)
}

int IMGetMsgListReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Message.IMGetMsgListReq)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_session_type()) {
    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  if (has_session_id()) {
    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_msg_id_begin()) {
    // required uint32 msg_id_begin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id_begin());
  }

  if (has_msg_cnt()) {
    // required uint32 msg_cnt = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_cnt());
  }

  return total_size;
}
int IMGetMsgListReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgListReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required uint32 msg_id_begin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id_begin());

    // required uint32 msg_cnt = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetMsgListReq*>(&from));
}

void IMGetMsgListReq::MergeFrom(const IMGetMsgListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgListReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id_begin()) {
      set_msg_id_begin(from.msg_id_begin());
    }
    if (from.has_msg_cnt()) {
      set_msg_cnt(from.msg_cnt());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGetMsgListReq::CopyFrom(const IMGetMsgListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMGetMsgListReq::Swap(IMGetMsgListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetMsgListReq::InternalSwap(IMGetMsgListReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(msg_id_begin_, other->msg_id_begin_);
  std::swap(msg_cnt_, other->msg_cnt_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetMsgListReq::GetTypeName() const {
  return "IM.Message.IMGetMsgListReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetMsgListReq

// required uint32 user_id = 1;
bool IMGetMsgListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGetMsgListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGetMsgListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGetMsgListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGetMsgListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.user_id)
  return user_id_;
}
 void IMGetMsgListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.user_id)
}

// required .IM.BaseDefine.SessionType session_type = 2;
bool IMGetMsgListReq::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGetMsgListReq::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGetMsgListReq::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGetMsgListReq::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
 ::IM::BaseDefine::SessionType IMGetMsgListReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
 void IMGetMsgListReq::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.session_type)
}

// required uint32 session_id = 3;
bool IMGetMsgListReq::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGetMsgListReq::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGetMsgListReq::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGetMsgListReq::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 IMGetMsgListReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.session_id)
  return session_id_;
}
 void IMGetMsgListReq::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.session_id)
}

// required uint32 msg_id_begin = 4;
bool IMGetMsgListReq::has_msg_id_begin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMGetMsgListReq::set_has_msg_id_begin() {
  _has_bits_[0] |= 0x00000008u;
}
void IMGetMsgListReq::clear_has_msg_id_begin() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMGetMsgListReq::clear_msg_id_begin() {
  msg_id_begin_ = 0u;
  clear_has_msg_id_begin();
}
 ::google::protobuf::uint32 IMGetMsgListReq::msg_id_begin() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.msg_id_begin)
  return msg_id_begin_;
}
 void IMGetMsgListReq::set_msg_id_begin(::google::protobuf::uint32 value) {
  set_has_msg_id_begin();
  msg_id_begin_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.msg_id_begin)
}

// required uint32 msg_cnt = 5;
bool IMGetMsgListReq::has_msg_cnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMGetMsgListReq::set_has_msg_cnt() {
  _has_bits_[0] |= 0x00000010u;
}
void IMGetMsgListReq::clear_has_msg_cnt() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMGetMsgListReq::clear_msg_cnt() {
  msg_cnt_ = 0u;
  clear_has_msg_cnt();
}
 ::google::protobuf::uint32 IMGetMsgListReq::msg_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.msg_cnt)
  return msg_cnt_;
}
 void IMGetMsgListReq::set_msg_cnt(::google::protobuf::uint32 value) {
  set_has_msg_cnt();
  msg_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.msg_cnt)
}

// optional bytes attach_data = 20;
bool IMGetMsgListReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IMGetMsgListReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
void IMGetMsgListReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void IMGetMsgListReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGetMsgListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetMsgListReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.attach_data)
}
 void IMGetMsgListReq::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetMsgListReq.attach_data)
}
 void IMGetMsgListReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetMsgListReq.attach_data)
}
 ::std::string* IMGetMsgListReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgListReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGetMsgListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgListReq.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetMsgListReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgListReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGetMsgListRsp(
    IMGetMsgListRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetMsgListRsp::kUserIdFieldNumber;
const int IMGetMsgListRsp::kSessionTypeFieldNumber;
const int IMGetMsgListRsp::kSessionIdFieldNumber;
const int IMGetMsgListRsp::kMsgIdBeginFieldNumber;
const int IMGetMsgListRsp::kMsgListFieldNumber;
const int IMGetMsgListRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetMsgListRsp::IMGetMsgListRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgListRsp)
}

void IMGetMsgListRsp::InitAsDefaultInstance() {
}

IMGetMsgListRsp::IMGetMsgListRsp(const IMGetMsgListRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgListRsp)
}

void IMGetMsgListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  msg_id_begin_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetMsgListRsp::~IMGetMsgListRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgListRsp)
  SharedDtor();
}

void IMGetMsgListRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGetMsgListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetMsgListRsp& IMGetMsgListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMGetMsgListRsp* IMGetMsgListRsp::default_instance_ = NULL;

IMGetMsgListRsp* IMGetMsgListRsp::New(::google::protobuf::Arena* arena) const {
  IMGetMsgListRsp* n = new IMGetMsgListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetMsgListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgListRsp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMGetMsgListRsp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMGetMsgListRsp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 47u) {
    ZR_(session_id_, msg_id_begin_);
    user_id_ = 0u;
    session_type_ = 1;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  msg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGetMsgListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGetMsgListRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_begin;
        break;
      }

      // required uint32 msg_id_begin = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_begin_)));
          set_has_msg_id_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg_list;
        break;
      }

      // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
      case 5: {
        if (tag == 42) {
         parse_msg_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_msg_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_msg_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgListRsp)
  return false;
#undef DO_
}

void IMGetMsgListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgListRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // required uint32 msg_id_begin = 4;
  if (has_msg_id_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_id_begin(), output);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  for (unsigned int i = 0, n = this->msg_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->msg_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgListRsp)
}

int IMGetMsgListRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Message.IMGetMsgListRsp)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_session_type()) {
    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  if (has_session_id()) {
    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_msg_id_begin()) {
    // required uint32 msg_id_begin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id_begin());
  }

  return total_size;
}
int IMGetMsgListRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgListRsp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required uint32 msg_id_begin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id_begin());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  total_size += 1 * this->msg_list_size();
  for (int i = 0; i < this->msg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetMsgListRsp*>(&from));
}

void IMGetMsgListRsp::MergeFrom(const IMGetMsgListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgListRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  msg_list_.MergeFrom(from.msg_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id_begin()) {
      set_msg_id_begin(from.msg_id_begin());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGetMsgListRsp::CopyFrom(const IMGetMsgListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_list())) return false;
  return true;
}

void IMGetMsgListRsp::Swap(IMGetMsgListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetMsgListRsp::InternalSwap(IMGetMsgListRsp* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(msg_id_begin_, other->msg_id_begin_);
  msg_list_.UnsafeArenaSwap(&other->msg_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetMsgListRsp::GetTypeName() const {
  return "IM.Message.IMGetMsgListRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetMsgListRsp

// required uint32 user_id = 1;
bool IMGetMsgListRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGetMsgListRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGetMsgListRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGetMsgListRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGetMsgListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.user_id)
  return user_id_;
}
 void IMGetMsgListRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.user_id)
}

// required .IM.BaseDefine.SessionType session_type = 2;
bool IMGetMsgListRsp::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGetMsgListRsp::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGetMsgListRsp::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGetMsgListRsp::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
 ::IM::BaseDefine::SessionType IMGetMsgListRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
 void IMGetMsgListRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.session_type)
}

// required uint32 session_id = 3;
bool IMGetMsgListRsp::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGetMsgListRsp::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGetMsgListRsp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGetMsgListRsp::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 IMGetMsgListRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.session_id)
  return session_id_;
}
 void IMGetMsgListRsp::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.session_id)
}

// required uint32 msg_id_begin = 4;
bool IMGetMsgListRsp::has_msg_id_begin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMGetMsgListRsp::set_has_msg_id_begin() {
  _has_bits_[0] |= 0x00000008u;
}
void IMGetMsgListRsp::clear_has_msg_id_begin() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMGetMsgListRsp::clear_msg_id_begin() {
  msg_id_begin_ = 0u;
  clear_has_msg_id_begin();
}
 ::google::protobuf::uint32 IMGetMsgListRsp::msg_id_begin() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.msg_id_begin)
  return msg_id_begin_;
}
 void IMGetMsgListRsp::set_msg_id_begin(::google::protobuf::uint32 value) {
  set_has_msg_id_begin();
  msg_id_begin_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.msg_id_begin)
}

// repeated .IM.BaseDefine.MsgInfo msg_list = 5;
int IMGetMsgListRsp::msg_list_size() const {
  return msg_list_.size();
}
void IMGetMsgListRsp::clear_msg_list() {
  msg_list_.Clear();
}
const ::IM::BaseDefine::MsgInfo& IMGetMsgListRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.msg_list)
  return msg_list_.Get(index);
}
::IM::BaseDefine::MsgInfo* IMGetMsgListRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgListRsp.msg_list)
  return msg_list_.Mutable(index);
}
::IM::BaseDefine::MsgInfo* IMGetMsgListRsp::add_msg_list() {
  // @@protoc_insertion_point(field_add:IM.Message.IMGetMsgListRsp.msg_list)
  return msg_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
IMGetMsgListRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMGetMsgListRsp.msg_list)
  return &msg_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
IMGetMsgListRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMGetMsgListRsp.msg_list)
  return msg_list_;
}

// optional bytes attach_data = 20;
bool IMGetMsgListRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IMGetMsgListRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
void IMGetMsgListRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void IMGetMsgListRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGetMsgListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetMsgListRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.attach_data)
}
 void IMGetMsgListRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetMsgListRsp.attach_data)
}
 void IMGetMsgListRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetMsgListRsp.attach_data)
}
 ::std::string* IMGetMsgListRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgListRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGetMsgListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgListRsp.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetMsgListRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgListRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGetLatestMsgIdReq(
    IMGetLatestMsgIdReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetLatestMsgIdReq::kUserIdFieldNumber;
const int IMGetLatestMsgIdReq::kSessionTypeFieldNumber;
const int IMGetLatestMsgIdReq::kSessionIdFieldNumber;
const int IMGetLatestMsgIdReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetLatestMsgIdReq::IMGetLatestMsgIdReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetLatestMsgIdReq)
}

void IMGetLatestMsgIdReq::InitAsDefaultInstance() {
}

IMGetLatestMsgIdReq::IMGetLatestMsgIdReq(const IMGetLatestMsgIdReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetLatestMsgIdReq)
}

void IMGetLatestMsgIdReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetLatestMsgIdReq::~IMGetLatestMsgIdReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetLatestMsgIdReq)
  SharedDtor();
}

void IMGetLatestMsgIdReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGetLatestMsgIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetLatestMsgIdReq& IMGetLatestMsgIdReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMGetLatestMsgIdReq* IMGetLatestMsgIdReq::default_instance_ = NULL;

IMGetLatestMsgIdReq* IMGetLatestMsgIdReq::New(::google::protobuf::Arena* arena) const {
  IMGetLatestMsgIdReq* n = new IMGetLatestMsgIdReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetLatestMsgIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetLatestMsgIdReq)
  if (_has_bits_[0 / 32] & 15u) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGetLatestMsgIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGetLatestMsgIdReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetLatestMsgIdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetLatestMsgIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetLatestMsgIdReq)
  return false;
#undef DO_
}

void IMGetLatestMsgIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetLatestMsgIdReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetLatestMsgIdReq)
}

int IMGetLatestMsgIdReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Message.IMGetLatestMsgIdReq)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_session_type()) {
    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  if (has_session_id()) {
    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  return total_size;
}
int IMGetLatestMsgIdReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetLatestMsgIdReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetLatestMsgIdReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetLatestMsgIdReq*>(&from));
}

void IMGetLatestMsgIdReq::MergeFrom(const IMGetLatestMsgIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetLatestMsgIdReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGetLatestMsgIdReq::CopyFrom(const IMGetLatestMsgIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetLatestMsgIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetLatestMsgIdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGetLatestMsgIdReq::Swap(IMGetLatestMsgIdReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetLatestMsgIdReq::InternalSwap(IMGetLatestMsgIdReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetLatestMsgIdReq::GetTypeName() const {
  return "IM.Message.IMGetLatestMsgIdReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetLatestMsgIdReq

// required uint32 user_id = 1;
bool IMGetLatestMsgIdReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGetLatestMsgIdReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGetLatestMsgIdReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGetLatestMsgIdReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGetLatestMsgIdReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.user_id)
  return user_id_;
}
 void IMGetLatestMsgIdReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.user_id)
}

// required .IM.BaseDefine.SessionType session_type = 2;
bool IMGetLatestMsgIdReq::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGetLatestMsgIdReq::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGetLatestMsgIdReq::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGetLatestMsgIdReq::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
 ::IM::BaseDefine::SessionType IMGetLatestMsgIdReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
 void IMGetLatestMsgIdReq::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.session_type)
}

// required uint32 session_id = 3;
bool IMGetLatestMsgIdReq::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGetLatestMsgIdReq::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGetLatestMsgIdReq::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGetLatestMsgIdReq::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 IMGetLatestMsgIdReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.session_id)
  return session_id_;
}
 void IMGetLatestMsgIdReq::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.session_id)
}

// optional bytes attach_data = 20;
bool IMGetLatestMsgIdReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMGetLatestMsgIdReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
void IMGetLatestMsgIdReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMGetLatestMsgIdReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGetLatestMsgIdReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetLatestMsgIdReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.attach_data)
}
 void IMGetLatestMsgIdReq::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetLatestMsgIdReq.attach_data)
}
 void IMGetLatestMsgIdReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetLatestMsgIdReq.attach_data)
}
 ::std::string* IMGetLatestMsgIdReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetLatestMsgIdReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGetLatestMsgIdReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetLatestMsgIdReq.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetLatestMsgIdReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetLatestMsgIdReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGetLatestMsgIdRsp(
    IMGetLatestMsgIdRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetLatestMsgIdRsp::kUserIdFieldNumber;
const int IMGetLatestMsgIdRsp::kSessionTypeFieldNumber;
const int IMGetLatestMsgIdRsp::kSessionIdFieldNumber;
const int IMGetLatestMsgIdRsp::kLatestMsgIdFieldNumber;
const int IMGetLatestMsgIdRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetLatestMsgIdRsp)
}

void IMGetLatestMsgIdRsp::InitAsDefaultInstance() {
}

IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp(const IMGetLatestMsgIdRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetLatestMsgIdRsp)
}

void IMGetLatestMsgIdRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  latest_msg_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetLatestMsgIdRsp::~IMGetLatestMsgIdRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetLatestMsgIdRsp)
  SharedDtor();
}

void IMGetLatestMsgIdRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGetLatestMsgIdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetLatestMsgIdRsp& IMGetLatestMsgIdRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMGetLatestMsgIdRsp* IMGetLatestMsgIdRsp::default_instance_ = NULL;

IMGetLatestMsgIdRsp* IMGetLatestMsgIdRsp::New(::google::protobuf::Arena* arena) const {
  IMGetLatestMsgIdRsp* n = new IMGetLatestMsgIdRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetLatestMsgIdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetLatestMsgIdRsp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMGetLatestMsgIdRsp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMGetLatestMsgIdRsp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(session_id_, latest_msg_id_);
    user_id_ = 0u;
    session_type_ = 1;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGetLatestMsgIdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGetLatestMsgIdRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetLatestMsgIdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_latest_msg_id;
        break;
      }

      // required uint32 latest_msg_id = 4;
      case 4: {
        if (tag == 32) {
         parse_latest_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_id_)));
          set_has_latest_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetLatestMsgIdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetLatestMsgIdRsp)
  return false;
#undef DO_
}

void IMGetLatestMsgIdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetLatestMsgIdRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // required uint32 latest_msg_id = 4;
  if (has_latest_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latest_msg_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetLatestMsgIdRsp)
}

int IMGetLatestMsgIdRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Message.IMGetLatestMsgIdRsp)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_session_type()) {
    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  if (has_session_id()) {
    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_latest_msg_id()) {
    // required uint32 latest_msg_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_id());
  }

  return total_size;
}
int IMGetLatestMsgIdRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetLatestMsgIdRsp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required uint32 latest_msg_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetLatestMsgIdRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetLatestMsgIdRsp*>(&from));
}

void IMGetLatestMsgIdRsp::MergeFrom(const IMGetLatestMsgIdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetLatestMsgIdRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_latest_msg_id()) {
      set_latest_msg_id(from.latest_msg_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGetLatestMsgIdRsp::CopyFrom(const IMGetLatestMsgIdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetLatestMsgIdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetLatestMsgIdRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGetLatestMsgIdRsp::Swap(IMGetLatestMsgIdRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetLatestMsgIdRsp::InternalSwap(IMGetLatestMsgIdRsp* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(latest_msg_id_, other->latest_msg_id_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetLatestMsgIdRsp::GetTypeName() const {
  return "IM.Message.IMGetLatestMsgIdRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetLatestMsgIdRsp

// required uint32 user_id = 1;
bool IMGetLatestMsgIdRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGetLatestMsgIdRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGetLatestMsgIdRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGetLatestMsgIdRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGetLatestMsgIdRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.user_id)
  return user_id_;
}
 void IMGetLatestMsgIdRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.user_id)
}

// required .IM.BaseDefine.SessionType session_type = 2;
bool IMGetLatestMsgIdRsp::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGetLatestMsgIdRsp::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGetLatestMsgIdRsp::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGetLatestMsgIdRsp::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
 ::IM::BaseDefine::SessionType IMGetLatestMsgIdRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
 void IMGetLatestMsgIdRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.session_type)
}

// required uint32 session_id = 3;
bool IMGetLatestMsgIdRsp::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGetLatestMsgIdRsp::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGetLatestMsgIdRsp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGetLatestMsgIdRsp::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 IMGetLatestMsgIdRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.session_id)
  return session_id_;
}
 void IMGetLatestMsgIdRsp::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.session_id)
}

// required uint32 latest_msg_id = 4;
bool IMGetLatestMsgIdRsp::has_latest_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMGetLatestMsgIdRsp::set_has_latest_msg_id() {
  _has_bits_[0] |= 0x00000008u;
}
void IMGetLatestMsgIdRsp::clear_has_latest_msg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMGetLatestMsgIdRsp::clear_latest_msg_id() {
  latest_msg_id_ = 0u;
  clear_has_latest_msg_id();
}
 ::google::protobuf::uint32 IMGetLatestMsgIdRsp::latest_msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.latest_msg_id)
  return latest_msg_id_;
}
 void IMGetLatestMsgIdRsp::set_latest_msg_id(::google::protobuf::uint32 value) {
  set_has_latest_msg_id();
  latest_msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.latest_msg_id)
}

// optional bytes attach_data = 20;
bool IMGetLatestMsgIdRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMGetLatestMsgIdRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
void IMGetLatestMsgIdRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMGetLatestMsgIdRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGetLatestMsgIdRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetLatestMsgIdRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.attach_data)
}
 void IMGetLatestMsgIdRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetLatestMsgIdRsp.attach_data)
}
 void IMGetLatestMsgIdRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetLatestMsgIdRsp.attach_data)
}
 ::std::string* IMGetLatestMsgIdRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetLatestMsgIdRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGetLatestMsgIdRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetLatestMsgIdRsp.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetLatestMsgIdRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetLatestMsgIdRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGetMsgByIdReq(
    IMGetMsgByIdReq* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetMsgByIdReq::kUserIdFieldNumber;
const int IMGetMsgByIdReq::kSessionTypeFieldNumber;
const int IMGetMsgByIdReq::kSessionIdFieldNumber;
const int IMGetMsgByIdReq::kMsgIdListFieldNumber;
const int IMGetMsgByIdReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetMsgByIdReq::IMGetMsgByIdReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgByIdReq)
}

void IMGetMsgByIdReq::InitAsDefaultInstance() {
}

IMGetMsgByIdReq::IMGetMsgByIdReq(const IMGetMsgByIdReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgByIdReq)
}

void IMGetMsgByIdReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetMsgByIdReq::~IMGetMsgByIdReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgByIdReq)
  SharedDtor();
}

void IMGetMsgByIdReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGetMsgByIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetMsgByIdReq& IMGetMsgByIdReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMGetMsgByIdReq* IMGetMsgByIdReq::default_instance_ = NULL;

IMGetMsgByIdReq* IMGetMsgByIdReq::New(::google::protobuf::Arena* arena) const {
  IMGetMsgByIdReq* n = new IMGetMsgByIdReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetMsgByIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgByIdReq)
  if (_has_bits_[0 / 32] & 23u) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  msg_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGetMsgByIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGetMsgByIdReq, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgByIdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_list;
        break;
      }

      // repeated uint32 msg_id_list = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_msg_id_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_msg_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgByIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgByIdReq)
  return false;
#undef DO_
}

void IMGetMsgByIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgByIdReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // repeated uint32 msg_id_list = 4;
  for (int i = 0; i < this->msg_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->msg_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgByIdReq)
}

int IMGetMsgByIdReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Message.IMGetMsgByIdReq)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_session_type()) {
    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  if (has_session_id()) {
    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  return total_size;
}
int IMGetMsgByIdReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgByIdReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // repeated uint32 msg_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->msg_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->msg_id_list(i));
    }
    total_size += 1 * this->msg_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgByIdReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetMsgByIdReq*>(&from));
}

void IMGetMsgByIdReq::MergeFrom(const IMGetMsgByIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgByIdReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  msg_id_list_.MergeFrom(from.msg_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGetMsgByIdReq::CopyFrom(const IMGetMsgByIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgByIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgByIdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGetMsgByIdReq::Swap(IMGetMsgByIdReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetMsgByIdReq::InternalSwap(IMGetMsgByIdReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  msg_id_list_.UnsafeArenaSwap(&other->msg_id_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetMsgByIdReq::GetTypeName() const {
  return "IM.Message.IMGetMsgByIdReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetMsgByIdReq

// required uint32 user_id = 1;
bool IMGetMsgByIdReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGetMsgByIdReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGetMsgByIdReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGetMsgByIdReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGetMsgByIdReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.user_id)
  return user_id_;
}
 void IMGetMsgByIdReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.user_id)
}

// required .IM.BaseDefine.SessionType session_type = 2;
bool IMGetMsgByIdReq::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGetMsgByIdReq::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGetMsgByIdReq::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGetMsgByIdReq::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
 ::IM::BaseDefine::SessionType IMGetMsgByIdReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
 void IMGetMsgByIdReq::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.session_type)
}

// required uint32 session_id = 3;
bool IMGetMsgByIdReq::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGetMsgByIdReq::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGetMsgByIdReq::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGetMsgByIdReq::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 IMGetMsgByIdReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.session_id)
  return session_id_;
}
 void IMGetMsgByIdReq::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.session_id)
}

// repeated uint32 msg_id_list = 4;
int IMGetMsgByIdReq::msg_id_list_size() const {
  return msg_id_list_.size();
}
void IMGetMsgByIdReq::clear_msg_id_list() {
  msg_id_list_.Clear();
}
 ::google::protobuf::uint32 IMGetMsgByIdReq::msg_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.msg_id_list)
  return msg_id_list_.Get(index);
}
 void IMGetMsgByIdReq::set_msg_id_list(int index, ::google::protobuf::uint32 value) {
  msg_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.msg_id_list)
}
 void IMGetMsgByIdReq::add_msg_id_list(::google::protobuf::uint32 value) {
  msg_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Message.IMGetMsgByIdReq.msg_id_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGetMsgByIdReq::msg_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMGetMsgByIdReq.msg_id_list)
  return msg_id_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGetMsgByIdReq::mutable_msg_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMGetMsgByIdReq.msg_id_list)
  return &msg_id_list_;
}

// optional bytes attach_data = 20;
bool IMGetMsgByIdReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMGetMsgByIdReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
void IMGetMsgByIdReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMGetMsgByIdReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGetMsgByIdReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetMsgByIdReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.attach_data)
}
 void IMGetMsgByIdReq::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetMsgByIdReq.attach_data)
}
 void IMGetMsgByIdReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetMsgByIdReq.attach_data)
}
 ::std::string* IMGetMsgByIdReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgByIdReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGetMsgByIdReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgByIdReq.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetMsgByIdReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgByIdReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIMGetMsgByIdRsp(
    IMGetMsgByIdRsp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetMsgByIdRsp::kUserIdFieldNumber;
const int IMGetMsgByIdRsp::kSessionTypeFieldNumber;
const int IMGetMsgByIdRsp::kSessionIdFieldNumber;
const int IMGetMsgByIdRsp::kMsgListFieldNumber;
const int IMGetMsgByIdRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetMsgByIdRsp::IMGetMsgByIdRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgByIdRsp)
}

void IMGetMsgByIdRsp::InitAsDefaultInstance() {
}

IMGetMsgByIdRsp::IMGetMsgByIdRsp(const IMGetMsgByIdRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgByIdRsp)
}

void IMGetMsgByIdRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetMsgByIdRsp::~IMGetMsgByIdRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgByIdRsp)
  SharedDtor();
}

void IMGetMsgByIdRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGetMsgByIdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetMsgByIdRsp& IMGetMsgByIdRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
#endif
  return *default_instance_;
}

IMGetMsgByIdRsp* IMGetMsgByIdRsp::default_instance_ = NULL;

IMGetMsgByIdRsp* IMGetMsgByIdRsp::New(::google::protobuf::Arena* arena) const {
  IMGetMsgByIdRsp* n = new IMGetMsgByIdRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetMsgByIdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgByIdRsp)
  if (_has_bits_[0 / 32] & 23u) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  msg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IMGetMsgByIdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIMGetMsgByIdRsp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgByIdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_list;
        break;
      }

      // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
      case 4: {
        if (tag == 34) {
         parse_msg_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_msg_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_msg_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgByIdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgByIdRsp)
  return false;
#undef DO_
}

void IMGetMsgByIdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgByIdRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  for (unsigned int i = 0, n = this->msg_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->msg_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgByIdRsp)
}

int IMGetMsgByIdRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.Message.IMGetMsgByIdRsp)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_session_type()) {
    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  if (has_session_id()) {
    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  return total_size;
}
int IMGetMsgByIdRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgByIdRsp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

    // required uint32 session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  total_size += 1 * this->msg_list_size();
  for (int i = 0; i < this->msg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgByIdRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetMsgByIdRsp*>(&from));
}

void IMGetMsgByIdRsp::MergeFrom(const IMGetMsgByIdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgByIdRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  msg_list_.MergeFrom(from.msg_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IMGetMsgByIdRsp::CopyFrom(const IMGetMsgByIdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgByIdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgByIdRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_list())) return false;
  return true;
}

void IMGetMsgByIdRsp::Swap(IMGetMsgByIdRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetMsgByIdRsp::InternalSwap(IMGetMsgByIdRsp* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  msg_list_.UnsafeArenaSwap(&other->msg_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetMsgByIdRsp::GetTypeName() const {
  return "IM.Message.IMGetMsgByIdRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetMsgByIdRsp

// required uint32 user_id = 1;
bool IMGetMsgByIdRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMGetMsgByIdRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IMGetMsgByIdRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMGetMsgByIdRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 IMGetMsgByIdRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.user_id)
  return user_id_;
}
 void IMGetMsgByIdRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.user_id)
}

// required .IM.BaseDefine.SessionType session_type = 2;
bool IMGetMsgByIdRsp::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMGetMsgByIdRsp::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
void IMGetMsgByIdRsp::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMGetMsgByIdRsp::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
 ::IM::BaseDefine::SessionType IMGetMsgByIdRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
 void IMGetMsgByIdRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.session_type)
}

// required uint32 session_id = 3;
bool IMGetMsgByIdRsp::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMGetMsgByIdRsp::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IMGetMsgByIdRsp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMGetMsgByIdRsp::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 IMGetMsgByIdRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.session_id)
  return session_id_;
}
 void IMGetMsgByIdRsp::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.session_id)
}

// repeated .IM.BaseDefine.MsgInfo msg_list = 4;
int IMGetMsgByIdRsp::msg_list_size() const {
  return msg_list_.size();
}
void IMGetMsgByIdRsp::clear_msg_list() {
  msg_list_.Clear();
}
const ::IM::BaseDefine::MsgInfo& IMGetMsgByIdRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.msg_list)
  return msg_list_.Get(index);
}
::IM::BaseDefine::MsgInfo* IMGetMsgByIdRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgByIdRsp.msg_list)
  return msg_list_.Mutable(index);
}
::IM::BaseDefine::MsgInfo* IMGetMsgByIdRsp::add_msg_list() {
  // @@protoc_insertion_point(field_add:IM.Message.IMGetMsgByIdRsp.msg_list)
  return msg_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
IMGetMsgByIdRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMGetMsgByIdRsp.msg_list)
  return &msg_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
IMGetMsgByIdRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMGetMsgByIdRsp.msg_list)
  return msg_list_;
}

// optional bytes attach_data = 20;
bool IMGetMsgByIdRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMGetMsgByIdRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
void IMGetMsgByIdRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMGetMsgByIdRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
 const ::std::string& IMGetMsgByIdRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.attach_data)
  return attach_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetMsgByIdRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.attach_data)
}
 void IMGetMsgByIdRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetMsgByIdRsp.attach_data)
}
 void IMGetMsgByIdRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetMsgByIdRsp.attach_data)
}
 ::std::string* IMGetMsgByIdRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgByIdRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMGetMsgByIdRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgByIdRsp.attach_data)
  clear_has_attach_data();
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMGetMsgByIdRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgByIdRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace IM

// @@protoc_insertion_point(global_scope)
