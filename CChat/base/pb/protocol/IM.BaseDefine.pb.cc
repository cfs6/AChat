// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.BaseDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.BaseDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace BaseDefine {

void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto() {
  delete IpAddr::default_instance_;
  delete UserInfo::default_instance_;
  delete ContactSessionInfo::default_instance_;
  delete UserStat::default_instance_;
  delete ServerUserStat::default_instance_;
  delete UnreadInfo::default_instance_;
  delete MsgInfo::default_instance_;
  delete GroupVersionInfo::default_instance_;
  delete GroupInfo::default_instance_;
  delete UserTokenInfo::default_instance_;
  delete PushResult::default_instance_;
  delete ShieldStatus::default_instance_;
  delete OfflineFileInfo::default_instance_;
  delete DepartInfo::default_instance_;
  delete PushShieldStatus::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eBaseDefine_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eBaseDefine_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_IM_2eBaseDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  IpAddr::default_instance_ = new IpAddr();
  UserInfo::default_instance_ = new UserInfo();
  ContactSessionInfo::default_instance_ = new ContactSessionInfo();
  UserStat::default_instance_ = new UserStat();
  ServerUserStat::default_instance_ = new ServerUserStat();
  UnreadInfo::default_instance_ = new UnreadInfo();
  MsgInfo::default_instance_ = new MsgInfo();
  GroupVersionInfo::default_instance_ = new GroupVersionInfo();
  GroupInfo::default_instance_ = new GroupInfo();
  UserTokenInfo::default_instance_ = new UserTokenInfo();
  PushResult::default_instance_ = new PushResult();
  ShieldStatus::default_instance_ = new ShieldStatus();
  OfflineFileInfo::default_instance_ = new OfflineFileInfo();
  DepartInfo::default_instance_ = new DepartInfo();
  PushShieldStatus::default_instance_ = new PushShieldStatus();
  IpAddr::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  ContactSessionInfo::default_instance_->InitAsDefaultInstance();
  UserStat::default_instance_->InitAsDefaultInstance();
  ServerUserStat::default_instance_->InitAsDefaultInstance();
  UnreadInfo::default_instance_->InitAsDefaultInstance();
  MsgInfo::default_instance_->InitAsDefaultInstance();
  GroupVersionInfo::default_instance_->InitAsDefaultInstance();
  GroupInfo::default_instance_->InitAsDefaultInstance();
  UserTokenInfo::default_instance_->InitAsDefaultInstance();
  PushResult::default_instance_->InitAsDefaultInstance();
  ShieldStatus::default_instance_->InitAsDefaultInstance();
  OfflineFileInfo::default_instance_->InitAsDefaultInstance();
  DepartInfo::default_instance_->InitAsDefaultInstance();
  PushShieldStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eBaseDefine_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eBaseDefine_2eproto_once_);
void protobuf_AddDesc_IM_2eBaseDefine_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eBaseDefine_2eproto_once_,
                 &protobuf_AddDesc_IM_2eBaseDefine_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eBaseDefine_2eproto {
  StaticDescriptorInitializer_IM_2eBaseDefine_2eproto() {
    protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  }
} static_descriptor_initializer_IM_2eBaseDefine_2eproto_;
#endif
bool ServiceID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

bool LoginCmdID_IsValid(int value) {
  switch(value) {
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
      return true;
    default:
      return false;
  }
}

bool BuddyListCmdID_IsValid(int value) {
  switch(value) {
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
      return true;
    default:
      return false;
  }
}

bool MessageCmdID_IsValid(int value) {
  switch(value) {
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 777:
    case 778:
    case 779:
    case 780:
    case 781:
    case 782:
      return true;
    default:
      return false;
  }
}

bool GroupCmdID_IsValid(int value) {
  switch(value) {
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
      return true;
    default:
      return false;
  }
}

bool FileCmdID_IsValid(int value) {
  switch(value) {
    case 1281:
    case 1282:
    case 1283:
    case 1284:
    case 1285:
    case 1286:
    case 1287:
    case 1288:
    case 1289:
    case 1290:
    case 1291:
    case 1292:
      return true;
    default:
      return false;
  }
}

bool SwitchServiceCmdID_IsValid(int value) {
  switch(value) {
    case 1537:
      return true;
    default:
      return false;
  }
}

bool OtherCmdID_IsValid(int value) {
  switch(value) {
    case 1793:
    case 1794:
    case 1795:
    case 1796:
    case 1797:
    case 1798:
    case 1799:
    case 1800:
    case 1801:
    case 1802:
    case 1803:
    case 1805:
    case 1806:
    case 1807:
    case 1808:
    case 1809:
    case 1810:
    case 1841:
    case 1842:
    case 1843:
    case 1844:
      return true;
    default:
      return false;
  }
}

bool ResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool KickReasonType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool OnlineListType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

bool UserStatType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool SessionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

bool ClientType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

bool GroupType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool GroupModifyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool TransferFileType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool ClientFileState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ClientFileRole_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool FileServerError_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

bool SessionStatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool DepartmentStatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

static ::std::string* MutableUnknownFieldsForIpAddr(
    IpAddr* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpAddr::kIpFieldNumber;
const int IpAddr::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpAddr::IpAddr()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.IpAddr)
}

void IpAddr::InitAsDefaultInstance() {
}

IpAddr::IpAddr(const IpAddr& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.IpAddr)
}

void IpAddr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpAddr::~IpAddr() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.IpAddr)
  SharedDtor();
}

void IpAddr::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IpAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IpAddr& IpAddr::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

IpAddr* IpAddr::default_instance_ = NULL;

IpAddr* IpAddr::New(::google::protobuf::Arena* arena) const {
  IpAddr* n = new IpAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IpAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.IpAddr)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IpAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForIpAddr, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.IpAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.IpAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.IpAddr)
  return false;
#undef DO_
}

void IpAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.IpAddr)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.IpAddr)
}

int IpAddr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.IpAddr)
  int total_size = 0;

  if (has_ip()) {
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
int IpAddr::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.IpAddr)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpAddr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IpAddr*>(&from));
}

void IpAddr::MergeFrom(const IpAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.IpAddr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void IpAddr::CopyFrom(const IpAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.IpAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IpAddr::Swap(IpAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpAddr::InternalSwap(IpAddr* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IpAddr::GetTypeName() const {
  return "IM.BaseDefine.IpAddr";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IpAddr

// required string ip = 1;
bool IpAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IpAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void IpAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void IpAddr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& IpAddr::ip() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.IpAddr.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IpAddr::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.IpAddr.ip)
}
 void IpAddr::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.IpAddr.ip)
}
 void IpAddr::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.IpAddr.ip)
}
 ::std::string* IpAddr::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.IpAddr.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IpAddr::release_ip() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.IpAddr.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IpAddr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.IpAddr.ip)
}

// required uint32 port = 2;
bool IpAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IpAddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void IpAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void IpAddr::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 IpAddr::port() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.IpAddr.port)
  return port_;
}
 void IpAddr::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.IpAddr.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForUserInfo(
    UserInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kUserIdFieldNumber;
const int UserInfo::kUserGenderFieldNumber;
const int UserInfo::kUserNickNameFieldNumber;
const int UserInfo::kAvatarUrlFieldNumber;
const int UserInfo::kDepartmentIdFieldNumber;
const int UserInfo::kEmailFieldNumber;
const int UserInfo::kUserRealNameFieldNumber;
const int UserInfo::kUserTelFieldNumber;
const int UserInfo::kUserDomainFieldNumber;
const int UserInfo::kStatusFieldNumber;
const int UserInfo::kSignInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  user_gender_ = 0u;
  user_nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  department_id_ = 0u;
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_real_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_tel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  sign_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_real_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_tel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserInfo& UserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UserInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(user_id_, user_gender_);
    if (has_user_nick_name()) {
      user_nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_avatar_url()) {
      avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    department_id_ = 0u;
    if (has_email()) {
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_real_name()) {
      user_real_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_tel()) {
      user_tel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_user_domain()) {
      user_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0u;
    if (has_sign_info()) {
      sign_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForUserInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_gender;
        break;
      }

      // required uint32 user_gender = 2;
      case 2: {
        if (tag == 16) {
         parse_user_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_gender_)));
          set_has_user_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_nick_name;
        break;
      }

      // required string user_nick_name = 3;
      case 3: {
        if (tag == 26) {
         parse_user_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 4;
      case 4: {
        if (tag == 34) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_department_id;
        break;
      }

      // required uint32 department_id = 5;
      case 5: {
        if (tag == 40) {
         parse_department_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &department_id_)));
          set_has_department_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_email;
        break;
      }

      // required string email = 6;
      case 6: {
        if (tag == 50) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_user_real_name;
        break;
      }

      // required string user_real_name = 7;
      case 7: {
        if (tag == 58) {
         parse_user_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_user_tel;
        break;
      }

      // required string user_tel = 8;
      case 8: {
        if (tag == 66) {
         parse_user_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_tel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_user_domain;
        break;
      }

      // required string user_domain = 9;
      case 9: {
        if (tag == 74) {
         parse_user_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_domain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_status;
        break;
      }

      // required uint32 status = 10;
      case 10: {
        if (tag == 80) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sign_info;
        break;
      }

      // optional string sign_info = 11;
      case 11: {
        if (tag == 90) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.UserInfo)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 user_gender = 2;
  if (has_user_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_gender(), output);
  }

  // required string user_nick_name = 3;
  if (has_user_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_nick_name(), output);
  }

  // required string avatar_url = 4;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avatar_url(), output);
  }

  // required uint32 department_id = 5;
  if (has_department_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->department_id(), output);
  }

  // required string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->email(), output);
  }

  // required string user_real_name = 7;
  if (has_user_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->user_real_name(), output);
  }

  // required string user_tel = 8;
  if (has_user_tel()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->user_tel(), output);
  }

  // required string user_domain = 9;
  if (has_user_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->user_domain(), output);
  }

  // required uint32 status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->status(), output);
  }

  // optional string sign_info = 11;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sign_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.UserInfo)
}

int UserInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.UserInfo)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_user_gender()) {
    // required uint32 user_gender = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_gender());
  }

  if (has_user_nick_name()) {
    // required string user_nick_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_nick_name());
  }

  if (has_avatar_url()) {
    // required string avatar_url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  if (has_department_id()) {
    // required uint32 department_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->department_id());
  }

  if (has_email()) {
    // required string email = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  if (has_user_real_name()) {
    // required string user_real_name = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_real_name());
  }

  if (has_user_tel()) {
    // required string user_tel = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_tel());
  }

  if (has_user_domain()) {
    // required string user_domain = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_domain());
  }

  if (has_status()) {
    // required uint32 status = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
int UserInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UserInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required uint32 user_gender = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_gender());

    // required string user_nick_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_nick_name());

    // required string avatar_url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());

    // required uint32 department_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->department_id());

    // required string email = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());

    // required string user_real_name = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_real_name());

    // required string user_tel = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_tel());

    // required string user_domain = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_domain());

    // required uint32 status = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string sign_info = 11;
  if (has_sign_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign_info());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserInfo*>(&from));
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_gender()) {
      set_user_gender(from.user_gender());
    }
    if (from.has_user_nick_name()) {
      set_has_user_nick_name();
      user_nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_name_);
    }
    if (from.has_avatar_url()) {
      set_has_avatar_url();
      avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
    }
    if (from.has_department_id()) {
      set_department_id(from.department_id());
    }
    if (from.has_email()) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (from.has_user_real_name()) {
      set_has_user_real_name();
      user_real_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_real_name_);
    }
    if (from.has_user_tel()) {
      set_has_user_tel();
      user_tel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_tel_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_domain()) {
      set_has_user_domain();
      user_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_domain_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_sign_info()) {
      set_has_sign_info();
      sign_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_info_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(user_gender_, other->user_gender_);
  user_nick_name_.Swap(&other->user_nick_name_);
  avatar_url_.Swap(&other->avatar_url_);
  std::swap(department_id_, other->department_id_);
  email_.Swap(&other->email_);
  user_real_name_.Swap(&other->user_real_name_);
  user_tel_.Swap(&other->user_tel_);
  user_domain_.Swap(&other->user_domain_);
  std::swap(status_, other->status_);
  sign_info_.Swap(&other->sign_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserInfo::GetTypeName() const {
  return "IM.BaseDefine.UserInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// required uint32 user_id = 1;
bool UserInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserInfo::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_id)
  return user_id_;
}
 void UserInfo::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_id)
}

// required uint32 user_gender = 2;
bool UserInfo::has_user_gender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserInfo::set_has_user_gender() {
  _has_bits_[0] |= 0x00000002u;
}
void UserInfo::clear_has_user_gender() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserInfo::clear_user_gender() {
  user_gender_ = 0u;
  clear_has_user_gender();
}
 ::google::protobuf::uint32 UserInfo::user_gender() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_gender)
  return user_gender_;
}
 void UserInfo::set_user_gender(::google::protobuf::uint32 value) {
  set_has_user_gender();
  user_gender_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_gender)
}

// required string user_nick_name = 3;
bool UserInfo::has_user_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserInfo::set_has_user_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
void UserInfo::clear_has_user_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserInfo::clear_user_nick_name() {
  user_nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_nick_name();
}
 const ::std::string& UserInfo::user_nick_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_nick_name)
  return user_nick_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_user_nick_name(const ::std::string& value) {
  set_has_user_nick_name();
  user_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_nick_name)
}
 void UserInfo::set_user_nick_name(const char* value) {
  set_has_user_nick_name();
  user_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_nick_name)
}
 void UserInfo::set_user_nick_name(const char* value, size_t size) {
  set_has_user_nick_name();
  user_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_nick_name)
}
 ::std::string* UserInfo::mutable_user_nick_name() {
  set_has_user_nick_name();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_nick_name)
  return user_nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_user_nick_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_nick_name)
  clear_has_user_nick_name();
  return user_nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_user_nick_name(::std::string* user_nick_name) {
  if (user_nick_name != NULL) {
    set_has_user_nick_name();
  } else {
    clear_has_user_nick_name();
  }
  user_nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick_name);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_nick_name)
}

// required string avatar_url = 4;
bool UserInfo::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserInfo::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
void UserInfo::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserInfo::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatar_url();
}
 const ::std::string& UserInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.avatar_url)
}
 void UserInfo::set_avatar_url(const char* value) {
  set_has_avatar_url();
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.avatar_url)
}
 void UserInfo::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.avatar_url)
}
 ::std::string* UserInfo::mutable_avatar_url() {
  set_has_avatar_url();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.avatar_url)
  clear_has_avatar_url();
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    set_has_avatar_url();
  } else {
    clear_has_avatar_url();
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.avatar_url)
}

// required uint32 department_id = 5;
bool UserInfo::has_department_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserInfo::set_has_department_id() {
  _has_bits_[0] |= 0x00000010u;
}
void UserInfo::clear_has_department_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserInfo::clear_department_id() {
  department_id_ = 0u;
  clear_has_department_id();
}
 ::google::protobuf::uint32 UserInfo::department_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.department_id)
  return department_id_;
}
 void UserInfo::set_department_id(::google::protobuf::uint32 value) {
  set_has_department_id();
  department_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.department_id)
}

// required string email = 6;
bool UserInfo::has_email() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserInfo::set_has_email() {
  _has_bits_[0] |= 0x00000020u;
}
void UserInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
 const ::std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.email)
}
 void UserInfo::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.email)
}
 void UserInfo::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.email)
}
 ::std::string* UserInfo::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.email)
}

// required string user_real_name = 7;
bool UserInfo::has_user_real_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserInfo::set_has_user_real_name() {
  _has_bits_[0] |= 0x00000040u;
}
void UserInfo::clear_has_user_real_name() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserInfo::clear_user_real_name() {
  user_real_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_real_name();
}
 const ::std::string& UserInfo::user_real_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_real_name)
  return user_real_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_user_real_name(const ::std::string& value) {
  set_has_user_real_name();
  user_real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_real_name)
}
 void UserInfo::set_user_real_name(const char* value) {
  set_has_user_real_name();
  user_real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_real_name)
}
 void UserInfo::set_user_real_name(const char* value, size_t size) {
  set_has_user_real_name();
  user_real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_real_name)
}
 ::std::string* UserInfo::mutable_user_real_name() {
  set_has_user_real_name();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_real_name)
  return user_real_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_user_real_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_real_name)
  clear_has_user_real_name();
  return user_real_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_user_real_name(::std::string* user_real_name) {
  if (user_real_name != NULL) {
    set_has_user_real_name();
  } else {
    clear_has_user_real_name();
  }
  user_real_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_real_name);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_real_name)
}

// required string user_tel = 8;
bool UserInfo::has_user_tel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserInfo::set_has_user_tel() {
  _has_bits_[0] |= 0x00000080u;
}
void UserInfo::clear_has_user_tel() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserInfo::clear_user_tel() {
  user_tel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_tel();
}
 const ::std::string& UserInfo::user_tel() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_tel)
  return user_tel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_user_tel(const ::std::string& value) {
  set_has_user_tel();
  user_tel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_tel)
}
 void UserInfo::set_user_tel(const char* value) {
  set_has_user_tel();
  user_tel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_tel)
}
 void UserInfo::set_user_tel(const char* value, size_t size) {
  set_has_user_tel();
  user_tel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_tel)
}
 ::std::string* UserInfo::mutable_user_tel() {
  set_has_user_tel();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_tel)
  return user_tel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_user_tel() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_tel)
  clear_has_user_tel();
  return user_tel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_user_tel(::std::string* user_tel) {
  if (user_tel != NULL) {
    set_has_user_tel();
  } else {
    clear_has_user_tel();
  }
  user_tel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_tel);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_tel)
}

// required string user_domain = 9;
bool UserInfo::has_user_domain() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserInfo::set_has_user_domain() {
  _has_bits_[0] |= 0x00000100u;
}
void UserInfo::clear_has_user_domain() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserInfo::clear_user_domain() {
  user_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_domain();
}
 const ::std::string& UserInfo::user_domain() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_domain)
  return user_domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_user_domain(const ::std::string& value) {
  set_has_user_domain();
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_domain)
}
 void UserInfo::set_user_domain(const char* value) {
  set_has_user_domain();
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_domain)
}
 void UserInfo::set_user_domain(const char* value, size_t size) {
  set_has_user_domain();
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_domain)
}
 ::std::string* UserInfo::mutable_user_domain() {
  set_has_user_domain();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_domain)
  return user_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_user_domain() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_domain)
  clear_has_user_domain();
  return user_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_user_domain(::std::string* user_domain) {
  if (user_domain != NULL) {
    set_has_user_domain();
  } else {
    clear_has_user_domain();
  }
  user_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_domain);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_domain)
}

// required uint32 status = 10;
bool UserInfo::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserInfo::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
void UserInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
 ::google::protobuf::uint32 UserInfo::status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.status)
  return status_;
}
 void UserInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.status)
}

// optional string sign_info = 11;
bool UserInfo::has_sign_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserInfo::set_has_sign_info() {
  _has_bits_[0] |= 0x00000400u;
}
void UserInfo::clear_has_sign_info() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserInfo::clear_sign_info() {
  sign_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_info();
}
 const ::std::string& UserInfo::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.sign_info)
  return sign_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_sign_info(const ::std::string& value) {
  set_has_sign_info();
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.sign_info)
}
 void UserInfo::set_sign_info(const char* value) {
  set_has_sign_info();
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.sign_info)
}
 void UserInfo::set_sign_info(const char* value, size_t size) {
  set_has_sign_info();
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.sign_info)
}
 ::std::string* UserInfo::mutable_sign_info() {
  set_has_sign_info();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.sign_info)
  return sign_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.sign_info)
  clear_has_sign_info();
  return sign_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_sign_info(::std::string* sign_info) {
  if (sign_info != NULL) {
    set_has_sign_info();
  } else {
    clear_has_sign_info();
  }
  sign_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_info);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.sign_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForContactSessionInfo(
    ContactSessionInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContactSessionInfo::kSessionIdFieldNumber;
const int ContactSessionInfo::kSessionTypeFieldNumber;
const int ContactSessionInfo::kSessionStatusFieldNumber;
const int ContactSessionInfo::kUpdatedTimeFieldNumber;
const int ContactSessionInfo::kLatestMsgIdFieldNumber;
const int ContactSessionInfo::kLatestMsgDataFieldNumber;
const int ContactSessionInfo::kLatestMsgTypeFieldNumber;
const int ContactSessionInfo::kLatestMsgFromUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContactSessionInfo::ContactSessionInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.ContactSessionInfo)
}

void ContactSessionInfo::InitAsDefaultInstance() {
}

ContactSessionInfo::ContactSessionInfo(const ContactSessionInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.ContactSessionInfo)
}

void ContactSessionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_ = 0u;
  session_type_ = 1;
  session_status_ = 0;
  updated_time_ = 0u;
  latest_msg_id_ = 0u;
  latest_msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_msg_type_ = 1;
  latest_msg_from_user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactSessionInfo::~ContactSessionInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.ContactSessionInfo)
  SharedDtor();
}

void ContactSessionInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ContactSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ContactSessionInfo& ContactSessionInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

ContactSessionInfo* ContactSessionInfo::default_instance_ = NULL;

ContactSessionInfo* ContactSessionInfo::New(::google::protobuf::Arena* arena) const {
  ContactSessionInfo* n = new ContactSessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContactSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.ContactSessionInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ContactSessionInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ContactSessionInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(session_status_, updated_time_);
    session_id_ = 0u;
    session_type_ = 1;
    latest_msg_id_ = 0u;
    if (has_latest_msg_data()) {
      latest_msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    latest_msg_type_ = 1;
    latest_msg_from_user_id_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ContactSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForContactSessionInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.ContactSessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_status;
        break;
      }

      // required .IM.BaseDefine.SessionStatusType session_status = 3;
      case 3: {
        if (tag == 24) {
         parse_session_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionStatusType_IsValid(value)) {
            set_session_status(static_cast< ::IM::BaseDefine::SessionStatusType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_updated_time;
        break;
      }

      // required uint32 updated_time = 4;
      case 4: {
        if (tag == 32) {
         parse_updated_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updated_time_)));
          set_has_updated_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_latest_msg_id;
        break;
      }

      // required uint32 latest_msg_id = 5;
      case 5: {
        if (tag == 40) {
         parse_latest_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_id_)));
          set_has_latest_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_latest_msg_data;
        break;
      }

      // required bytes latest_msg_data = 6;
      case 6: {
        if (tag == 50) {
         parse_latest_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_latest_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_latest_msg_type;
        break;
      }

      // required .IM.BaseDefine.MsgType latest_msg_type = 7;
      case 7: {
        if (tag == 56) {
         parse_latest_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::MsgType_IsValid(value)) {
            set_latest_msg_type(static_cast< ::IM::BaseDefine::MsgType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_latest_msg_from_user_id;
        break;
      }

      // required uint32 latest_msg_from_user_id = 8;
      case 8: {
        if (tag == 64) {
         parse_latest_msg_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_from_user_id_)));
          set_has_latest_msg_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.ContactSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.ContactSessionInfo)
  return false;
#undef DO_
}

void ContactSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.ContactSessionInfo)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required .IM.BaseDefine.SessionStatusType session_status = 3;
  if (has_session_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->session_status(), output);
  }

  // required uint32 updated_time = 4;
  if (has_updated_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->updated_time(), output);
  }

  // required uint32 latest_msg_id = 5;
  if (has_latest_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->latest_msg_id(), output);
  }

  // required bytes latest_msg_data = 6;
  if (has_latest_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->latest_msg_data(), output);
  }

  // required .IM.BaseDefine.MsgType latest_msg_type = 7;
  if (has_latest_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->latest_msg_type(), output);
  }

  // required uint32 latest_msg_from_user_id = 8;
  if (has_latest_msg_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->latest_msg_from_user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.ContactSessionInfo)
}

int ContactSessionInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.ContactSessionInfo)
  int total_size = 0;

  if (has_session_id()) {
    // required uint32 session_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_session_type()) {
    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  if (has_session_status()) {
    // required .IM.BaseDefine.SessionStatusType session_status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_status());
  }

  if (has_updated_time()) {
    // required uint32 updated_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updated_time());
  }

  if (has_latest_msg_id()) {
    // required uint32 latest_msg_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_id());
  }

  if (has_latest_msg_data()) {
    // required bytes latest_msg_data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->latest_msg_data());
  }

  if (has_latest_msg_type()) {
    // required .IM.BaseDefine.MsgType latest_msg_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->latest_msg_type());
  }

  if (has_latest_msg_from_user_id()) {
    // required uint32 latest_msg_from_user_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_from_user_id());
  }

  return total_size;
}
int ContactSessionInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.ContactSessionInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required uint32 session_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

    // required .IM.BaseDefine.SessionStatusType session_status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_status());

    // required uint32 updated_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updated_time());

    // required uint32 latest_msg_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_id());

    // required bytes latest_msg_data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->latest_msg_data());

    // required .IM.BaseDefine.MsgType latest_msg_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->latest_msg_type());

    // required uint32 latest_msg_from_user_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_from_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactSessionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ContactSessionInfo*>(&from));
}

void ContactSessionInfo::MergeFrom(const ContactSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.ContactSessionInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_status()) {
      set_session_status(from.session_status());
    }
    if (from.has_updated_time()) {
      set_updated_time(from.updated_time());
    }
    if (from.has_latest_msg_id()) {
      set_latest_msg_id(from.latest_msg_id());
    }
    if (from.has_latest_msg_data()) {
      set_has_latest_msg_data();
      latest_msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_msg_data_);
    }
    if (from.has_latest_msg_type()) {
      set_latest_msg_type(from.latest_msg_type());
    }
    if (from.has_latest_msg_from_user_id()) {
      set_latest_msg_from_user_id(from.latest_msg_from_user_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ContactSessionInfo::CopyFrom(const ContactSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.ContactSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactSessionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void ContactSessionInfo::Swap(ContactSessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContactSessionInfo::InternalSwap(ContactSessionInfo* other) {
  std::swap(session_id_, other->session_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_status_, other->session_status_);
  std::swap(updated_time_, other->updated_time_);
  std::swap(latest_msg_id_, other->latest_msg_id_);
  latest_msg_data_.Swap(&other->latest_msg_data_);
  std::swap(latest_msg_type_, other->latest_msg_type_);
  std::swap(latest_msg_from_user_id_, other->latest_msg_from_user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ContactSessionInfo::GetTypeName() const {
  return "IM.BaseDefine.ContactSessionInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactSessionInfo

// required uint32 session_id = 1;
bool ContactSessionInfo::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContactSessionInfo::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ContactSessionInfo::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContactSessionInfo::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 ContactSessionInfo::session_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.session_id)
  return session_id_;
}
 void ContactSessionInfo::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.session_id)
}

// required .IM.BaseDefine.SessionType session_type = 2;
bool ContactSessionInfo::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContactSessionInfo::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ContactSessionInfo::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContactSessionInfo::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
 ::IM::BaseDefine::SessionType ContactSessionInfo::session_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
 void ContactSessionInfo::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.session_type)
}

// required .IM.BaseDefine.SessionStatusType session_status = 3;
bool ContactSessionInfo::has_session_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContactSessionInfo::set_has_session_status() {
  _has_bits_[0] |= 0x00000004u;
}
void ContactSessionInfo::clear_has_session_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContactSessionInfo::clear_session_status() {
  session_status_ = 0;
  clear_has_session_status();
}
 ::IM::BaseDefine::SessionStatusType ContactSessionInfo::session_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.session_status)
  return static_cast< ::IM::BaseDefine::SessionStatusType >(session_status_);
}
 void ContactSessionInfo::set_session_status(::IM::BaseDefine::SessionStatusType value) {
  assert(::IM::BaseDefine::SessionStatusType_IsValid(value));
  set_has_session_status();
  session_status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.session_status)
}

// required uint32 updated_time = 4;
bool ContactSessionInfo::has_updated_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContactSessionInfo::set_has_updated_time() {
  _has_bits_[0] |= 0x00000008u;
}
void ContactSessionInfo::clear_has_updated_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContactSessionInfo::clear_updated_time() {
  updated_time_ = 0u;
  clear_has_updated_time();
}
 ::google::protobuf::uint32 ContactSessionInfo::updated_time() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.updated_time)
  return updated_time_;
}
 void ContactSessionInfo::set_updated_time(::google::protobuf::uint32 value) {
  set_has_updated_time();
  updated_time_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.updated_time)
}

// required uint32 latest_msg_id = 5;
bool ContactSessionInfo::has_latest_msg_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ContactSessionInfo::set_has_latest_msg_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ContactSessionInfo::clear_has_latest_msg_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ContactSessionInfo::clear_latest_msg_id() {
  latest_msg_id_ = 0u;
  clear_has_latest_msg_id();
}
 ::google::protobuf::uint32 ContactSessionInfo::latest_msg_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_id)
  return latest_msg_id_;
}
 void ContactSessionInfo::set_latest_msg_id(::google::protobuf::uint32 value) {
  set_has_latest_msg_id();
  latest_msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_id)
}

// required bytes latest_msg_data = 6;
bool ContactSessionInfo::has_latest_msg_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ContactSessionInfo::set_has_latest_msg_data() {
  _has_bits_[0] |= 0x00000020u;
}
void ContactSessionInfo::clear_has_latest_msg_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void ContactSessionInfo::clear_latest_msg_data() {
  latest_msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_latest_msg_data();
}
 const ::std::string& ContactSessionInfo::latest_msg_data() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
  return latest_msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContactSessionInfo::set_latest_msg_data(const ::std::string& value) {
  set_has_latest_msg_data();
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}
 void ContactSessionInfo::set_latest_msg_data(const char* value) {
  set_has_latest_msg_data();
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}
 void ContactSessionInfo::set_latest_msg_data(const void* value, size_t size) {
  set_has_latest_msg_data();
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}
 ::std::string* ContactSessionInfo::mutable_latest_msg_data() {
  set_has_latest_msg_data();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
  return latest_msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContactSessionInfo::release_latest_msg_data() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
  clear_has_latest_msg_data();
  return latest_msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContactSessionInfo::set_allocated_latest_msg_data(::std::string* latest_msg_data) {
  if (latest_msg_data != NULL) {
    set_has_latest_msg_data();
  } else {
    clear_has_latest_msg_data();
  }
  latest_msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latest_msg_data);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}

// required .IM.BaseDefine.MsgType latest_msg_type = 7;
bool ContactSessionInfo::has_latest_msg_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ContactSessionInfo::set_has_latest_msg_type() {
  _has_bits_[0] |= 0x00000040u;
}
void ContactSessionInfo::clear_has_latest_msg_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void ContactSessionInfo::clear_latest_msg_type() {
  latest_msg_type_ = 1;
  clear_has_latest_msg_type();
}
 ::IM::BaseDefine::MsgType ContactSessionInfo::latest_msg_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_type)
  return static_cast< ::IM::BaseDefine::MsgType >(latest_msg_type_);
}
 void ContactSessionInfo::set_latest_msg_type(::IM::BaseDefine::MsgType value) {
  assert(::IM::BaseDefine::MsgType_IsValid(value));
  set_has_latest_msg_type();
  latest_msg_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_type)
}

// required uint32 latest_msg_from_user_id = 8;
bool ContactSessionInfo::has_latest_msg_from_user_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ContactSessionInfo::set_has_latest_msg_from_user_id() {
  _has_bits_[0] |= 0x00000080u;
}
void ContactSessionInfo::clear_has_latest_msg_from_user_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void ContactSessionInfo::clear_latest_msg_from_user_id() {
  latest_msg_from_user_id_ = 0u;
  clear_has_latest_msg_from_user_id();
}
 ::google::protobuf::uint32 ContactSessionInfo::latest_msg_from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
  return latest_msg_from_user_id_;
}
 void ContactSessionInfo::set_latest_msg_from_user_id(::google::protobuf::uint32 value) {
  set_has_latest_msg_from_user_id();
  latest_msg_from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForUserStat(
    UserStat* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserStat::kUserIdFieldNumber;
const int UserStat::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserStat::UserStat()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.UserStat)
}

void UserStat::InitAsDefaultInstance() {
}

UserStat::UserStat(const UserStat& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UserStat)
}

void UserStat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStat::~UserStat() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UserStat)
  SharedDtor();
}

void UserStat::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserStat& UserStat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

UserStat* UserStat::default_instance_ = NULL;

UserStat* UserStat::New(::google::protobuf::Arena* arena) const {
  UserStat* n = new UserStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserStat::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UserStat)
  if (_has_bits_[0 / 32] & 3u) {
    user_id_ = 0u;
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForUserStat, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.UserStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .IM.BaseDefine.UserStatType status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserStatType_IsValid(value)) {
            set_status(static_cast< ::IM::BaseDefine::UserStatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.UserStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.UserStat)
  return false;
#undef DO_
}

void UserStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.UserStat)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.UserStatType status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.UserStat)
}

int UserStat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.UserStat)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_status()) {
    // required .IM.BaseDefine.UserStatType status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int UserStat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UserStat)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.UserStatType status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserStat*>(&from));
}

void UserStat::MergeFrom(const UserStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UserStat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void UserStat::CopyFrom(const UserStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UserStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserStat::Swap(UserStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserStat::InternalSwap(UserStat* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserStat::GetTypeName() const {
  return "IM.BaseDefine.UserStat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserStat

// required uint32 user_id = 1;
bool UserStat::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserStat::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserStat::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserStat::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 UserStat::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserStat.user_id)
  return user_id_;
}
 void UserStat::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserStat.user_id)
}

// required .IM.BaseDefine.UserStatType status = 2;
bool UserStat::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserStat::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void UserStat::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserStat::clear_status() {
  status_ = 1;
  clear_has_status();
}
 ::IM::BaseDefine::UserStatType UserStat::status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserStat.status)
  return static_cast< ::IM::BaseDefine::UserStatType >(status_);
}
 void UserStat::set_status(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserStat.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForServerUserStat(
    ServerUserStat* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerUserStat::kUserIdFieldNumber;
const int ServerUserStat::kStatusFieldNumber;
const int ServerUserStat::kClientTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerUserStat::ServerUserStat()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.ServerUserStat)
}

void ServerUserStat::InitAsDefaultInstance() {
}

ServerUserStat::ServerUserStat(const ServerUserStat& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.ServerUserStat)
}

void ServerUserStat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  status_ = 1;
  client_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerUserStat::~ServerUserStat() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.ServerUserStat)
  SharedDtor();
}

void ServerUserStat::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerUserStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerUserStat& ServerUserStat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

ServerUserStat* ServerUserStat::default_instance_ = NULL;

ServerUserStat* ServerUserStat::New(::google::protobuf::Arena* arena) const {
  ServerUserStat* n = new ServerUserStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerUserStat::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.ServerUserStat)
  if (_has_bits_[0 / 32] & 7u) {
    user_id_ = 0u;
    status_ = 1;
    client_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServerUserStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForServerUserStat, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.ServerUserStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .IM.BaseDefine.UserStatType status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserStatType_IsValid(value)) {
            set_status(static_cast< ::IM::BaseDefine::UserStatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_type;
        break;
      }

      // required .IM.BaseDefine.ClientType client_type = 3;
      case 3: {
        if (tag == 24) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.ServerUserStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.ServerUserStat)
  return false;
#undef DO_
}

void ServerUserStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.ServerUserStat)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.UserStatType status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required .IM.BaseDefine.ClientType client_type = 3;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->client_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.ServerUserStat)
}

int ServerUserStat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.ServerUserStat)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_status()) {
    // required .IM.BaseDefine.UserStatType status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_client_type()) {
    // required .IM.BaseDefine.ClientType client_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  return total_size;
}
int ServerUserStat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.ServerUserStat)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.UserStatType status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required .IM.BaseDefine.ClientType client_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUserStat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerUserStat*>(&from));
}

void ServerUserStat::MergeFrom(const ServerUserStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.ServerUserStat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ServerUserStat::CopyFrom(const ServerUserStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.ServerUserStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUserStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ServerUserStat::Swap(ServerUserStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerUserStat::InternalSwap(ServerUserStat* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(status_, other->status_);
  std::swap(client_type_, other->client_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerUserStat::GetTypeName() const {
  return "IM.BaseDefine.ServerUserStat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerUserStat

// required uint32 user_id = 1;
bool ServerUserStat::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerUserStat::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerUserStat::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerUserStat::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 ServerUserStat::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ServerUserStat.user_id)
  return user_id_;
}
 void ServerUserStat::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ServerUserStat.user_id)
}

// required .IM.BaseDefine.UserStatType status = 2;
bool ServerUserStat::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerUserStat::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerUserStat::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerUserStat::clear_status() {
  status_ = 1;
  clear_has_status();
}
 ::IM::BaseDefine::UserStatType ServerUserStat::status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ServerUserStat.status)
  return static_cast< ::IM::BaseDefine::UserStatType >(status_);
}
 void ServerUserStat::set_status(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ServerUserStat.status)
}

// required .IM.BaseDefine.ClientType client_type = 3;
bool ServerUserStat::has_client_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerUserStat::set_has_client_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerUserStat::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerUserStat::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
 ::IM::BaseDefine::ClientType ServerUserStat::client_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ServerUserStat.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
 void ServerUserStat::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ServerUserStat.client_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForUnreadInfo(
    UnreadInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnreadInfo::kSessionIdFieldNumber;
const int UnreadInfo::kSessionTypeFieldNumber;
const int UnreadInfo::kUnreadCntFieldNumber;
const int UnreadInfo::kLatestMsgIdFieldNumber;
const int UnreadInfo::kLatestMsgDataFieldNumber;
const int UnreadInfo::kLatestMsgTypeFieldNumber;
const int UnreadInfo::kLatestMsgFromUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnreadInfo::UnreadInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.UnreadInfo)
}

void UnreadInfo::InitAsDefaultInstance() {
}

UnreadInfo::UnreadInfo(const UnreadInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UnreadInfo)
}

void UnreadInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_ = 0u;
  session_type_ = 1;
  unread_cnt_ = 0u;
  latest_msg_id_ = 0u;
  latest_msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_msg_type_ = 1;
  latest_msg_from_user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnreadInfo::~UnreadInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UnreadInfo)
  SharedDtor();
}

void UnreadInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnreadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnreadInfo& UnreadInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

UnreadInfo* UnreadInfo::default_instance_ = NULL;

UnreadInfo* UnreadInfo::New(::google::protobuf::Arena* arena) const {
  UnreadInfo* n = new UnreadInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnreadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UnreadInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UnreadInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UnreadInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(unread_cnt_, latest_msg_id_);
    session_id_ = 0u;
    session_type_ = 1;
    if (has_latest_msg_data()) {
      latest_msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    latest_msg_type_ = 1;
    latest_msg_from_user_id_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnreadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForUnreadInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.UnreadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unread_cnt;
        break;
      }

      // required uint32 unread_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_unread_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unread_cnt_)));
          set_has_unread_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_latest_msg_id;
        break;
      }

      // required uint32 latest_msg_id = 4;
      case 4: {
        if (tag == 32) {
         parse_latest_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_id_)));
          set_has_latest_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_latest_msg_data;
        break;
      }

      // required bytes latest_msg_data = 5;
      case 5: {
        if (tag == 42) {
         parse_latest_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_latest_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_latest_msg_type;
        break;
      }

      // required .IM.BaseDefine.MsgType latest_msg_type = 6;
      case 6: {
        if (tag == 48) {
         parse_latest_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::MsgType_IsValid(value)) {
            set_latest_msg_type(static_cast< ::IM::BaseDefine::MsgType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_latest_msg_from_user_id;
        break;
      }

      // required uint32 latest_msg_from_user_id = 7;
      case 7: {
        if (tag == 56) {
         parse_latest_msg_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_from_user_id_)));
          set_has_latest_msg_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.UnreadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.UnreadInfo)
  return false;
#undef DO_
}

void UnreadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.UnreadInfo)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 unread_cnt = 3;
  if (has_unread_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unread_cnt(), output);
  }

  // required uint32 latest_msg_id = 4;
  if (has_latest_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latest_msg_id(), output);
  }

  // required bytes latest_msg_data = 5;
  if (has_latest_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->latest_msg_data(), output);
  }

  // required .IM.BaseDefine.MsgType latest_msg_type = 6;
  if (has_latest_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->latest_msg_type(), output);
  }

  // required uint32 latest_msg_from_user_id = 7;
  if (has_latest_msg_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->latest_msg_from_user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.UnreadInfo)
}

int UnreadInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.UnreadInfo)
  int total_size = 0;

  if (has_session_id()) {
    // required uint32 session_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_session_type()) {
    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  if (has_unread_cnt()) {
    // required uint32 unread_cnt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unread_cnt());
  }

  if (has_latest_msg_id()) {
    // required uint32 latest_msg_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_id());
  }

  if (has_latest_msg_data()) {
    // required bytes latest_msg_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->latest_msg_data());
  }

  if (has_latest_msg_type()) {
    // required .IM.BaseDefine.MsgType latest_msg_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->latest_msg_type());
  }

  if (has_latest_msg_from_user_id()) {
    // required uint32 latest_msg_from_user_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_from_user_id());
  }

  return total_size;
}
int UnreadInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UnreadInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint32 session_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required .IM.BaseDefine.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

    // required uint32 unread_cnt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unread_cnt());

    // required uint32 latest_msg_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_id());

    // required bytes latest_msg_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->latest_msg_data());

    // required .IM.BaseDefine.MsgType latest_msg_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->latest_msg_type());

    // required uint32 latest_msg_from_user_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_from_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnreadInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnreadInfo*>(&from));
}

void UnreadInfo::MergeFrom(const UnreadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UnreadInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_unread_cnt()) {
      set_unread_cnt(from.unread_cnt());
    }
    if (from.has_latest_msg_id()) {
      set_latest_msg_id(from.latest_msg_id());
    }
    if (from.has_latest_msg_data()) {
      set_has_latest_msg_data();
      latest_msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_msg_data_);
    }
    if (from.has_latest_msg_type()) {
      set_latest_msg_type(from.latest_msg_type());
    }
    if (from.has_latest_msg_from_user_id()) {
      set_latest_msg_from_user_id(from.latest_msg_from_user_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void UnreadInfo::CopyFrom(const UnreadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UnreadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnreadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void UnreadInfo::Swap(UnreadInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnreadInfo::InternalSwap(UnreadInfo* other) {
  std::swap(session_id_, other->session_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(unread_cnt_, other->unread_cnt_);
  std::swap(latest_msg_id_, other->latest_msg_id_);
  latest_msg_data_.Swap(&other->latest_msg_data_);
  std::swap(latest_msg_type_, other->latest_msg_type_);
  std::swap(latest_msg_from_user_id_, other->latest_msg_from_user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UnreadInfo::GetTypeName() const {
  return "IM.BaseDefine.UnreadInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnreadInfo

// required uint32 session_id = 1;
bool UnreadInfo::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnreadInfo::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UnreadInfo::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnreadInfo::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
 ::google::protobuf::uint32 UnreadInfo::session_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.session_id)
  return session_id_;
}
 void UnreadInfo::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.session_id)
}

// required .IM.BaseDefine.SessionType session_type = 2;
bool UnreadInfo::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnreadInfo::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
void UnreadInfo::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnreadInfo::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
 ::IM::BaseDefine::SessionType UnreadInfo::session_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
 void UnreadInfo::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.session_type)
}

// required uint32 unread_cnt = 3;
bool UnreadInfo::has_unread_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UnreadInfo::set_has_unread_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void UnreadInfo::clear_has_unread_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void UnreadInfo::clear_unread_cnt() {
  unread_cnt_ = 0u;
  clear_has_unread_cnt();
}
 ::google::protobuf::uint32 UnreadInfo::unread_cnt() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.unread_cnt)
  return unread_cnt_;
}
 void UnreadInfo::set_unread_cnt(::google::protobuf::uint32 value) {
  set_has_unread_cnt();
  unread_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.unread_cnt)
}

// required uint32 latest_msg_id = 4;
bool UnreadInfo::has_latest_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UnreadInfo::set_has_latest_msg_id() {
  _has_bits_[0] |= 0x00000008u;
}
void UnreadInfo::clear_has_latest_msg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void UnreadInfo::clear_latest_msg_id() {
  latest_msg_id_ = 0u;
  clear_has_latest_msg_id();
}
 ::google::protobuf::uint32 UnreadInfo::latest_msg_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_id)
  return latest_msg_id_;
}
 void UnreadInfo::set_latest_msg_id(::google::protobuf::uint32 value) {
  set_has_latest_msg_id();
  latest_msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_id)
}

// required bytes latest_msg_data = 5;
bool UnreadInfo::has_latest_msg_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UnreadInfo::set_has_latest_msg_data() {
  _has_bits_[0] |= 0x00000010u;
}
void UnreadInfo::clear_has_latest_msg_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void UnreadInfo::clear_latest_msg_data() {
  latest_msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_latest_msg_data();
}
 const ::std::string& UnreadInfo::latest_msg_data() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_data)
  return latest_msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnreadInfo::set_latest_msg_data(const ::std::string& value) {
  set_has_latest_msg_data();
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_data)
}
 void UnreadInfo::set_latest_msg_data(const char* value) {
  set_has_latest_msg_data();
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UnreadInfo.latest_msg_data)
}
 void UnreadInfo::set_latest_msg_data(const void* value, size_t size) {
  set_has_latest_msg_data();
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UnreadInfo.latest_msg_data)
}
 ::std::string* UnreadInfo::mutable_latest_msg_data() {
  set_has_latest_msg_data();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UnreadInfo.latest_msg_data)
  return latest_msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnreadInfo::release_latest_msg_data() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UnreadInfo.latest_msg_data)
  clear_has_latest_msg_data();
  return latest_msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnreadInfo::set_allocated_latest_msg_data(::std::string* latest_msg_data) {
  if (latest_msg_data != NULL) {
    set_has_latest_msg_data();
  } else {
    clear_has_latest_msg_data();
  }
  latest_msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latest_msg_data);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UnreadInfo.latest_msg_data)
}

// required .IM.BaseDefine.MsgType latest_msg_type = 6;
bool UnreadInfo::has_latest_msg_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UnreadInfo::set_has_latest_msg_type() {
  _has_bits_[0] |= 0x00000020u;
}
void UnreadInfo::clear_has_latest_msg_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void UnreadInfo::clear_latest_msg_type() {
  latest_msg_type_ = 1;
  clear_has_latest_msg_type();
}
 ::IM::BaseDefine::MsgType UnreadInfo::latest_msg_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_type)
  return static_cast< ::IM::BaseDefine::MsgType >(latest_msg_type_);
}
 void UnreadInfo::set_latest_msg_type(::IM::BaseDefine::MsgType value) {
  assert(::IM::BaseDefine::MsgType_IsValid(value));
  set_has_latest_msg_type();
  latest_msg_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_type)
}

// required uint32 latest_msg_from_user_id = 7;
bool UnreadInfo::has_latest_msg_from_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UnreadInfo::set_has_latest_msg_from_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
void UnreadInfo::clear_has_latest_msg_from_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void UnreadInfo::clear_latest_msg_from_user_id() {
  latest_msg_from_user_id_ = 0u;
  clear_has_latest_msg_from_user_id();
}
 ::google::protobuf::uint32 UnreadInfo::latest_msg_from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
  return latest_msg_from_user_id_;
}
 void UnreadInfo::set_latest_msg_from_user_id(::google::protobuf::uint32 value) {
  set_has_latest_msg_from_user_id();
  latest_msg_from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForMsgInfo(
    MsgInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgInfo::kMsgIdFieldNumber;
const int MsgInfo::kFromSessionIdFieldNumber;
const int MsgInfo::kCreateTimeFieldNumber;
const int MsgInfo::kMsgTypeFieldNumber;
const int MsgInfo::kMsgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgInfo::MsgInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.MsgInfo)
}

void MsgInfo::InitAsDefaultInstance() {
}

MsgInfo::MsgInfo(const MsgInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.MsgInfo)
}

void MsgInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = 0u;
  from_session_id_ = 0u;
  create_time_ = 0u;
  msg_type_ = 1;
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInfo::~MsgInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.MsgInfo)
  SharedDtor();
}

void MsgInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgInfo& MsgInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

MsgInfo* MsgInfo::default_instance_ = NULL;

MsgInfo* MsgInfo::New(::google::protobuf::Arena* arena) const {
  MsgInfo* n = new MsgInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.MsgInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(msg_id_, create_time_);
    msg_type_ = 1;
    if (has_msg_data()) {
      msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForMsgInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.MsgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msg_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_session_id;
        break;
      }

      // required uint32 from_session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_session_id_)));
          set_has_from_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 3;
      case 3: {
        if (tag == 24) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_type;
        break;
      }

      // required .IM.BaseDefine.MsgType msg_type = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::IM::BaseDefine::MsgType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 5;
      case 5: {
        if (tag == 42) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.MsgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.MsgInfo)
  return false;
#undef DO_
}

void MsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.MsgInfo)
  // required uint32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }

  // required uint32 from_session_id = 2;
  if (has_from_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_session_id(), output);
  }

  // required uint32 create_time = 3;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->create_time(), output);
  }

  // required .IM.BaseDefine.MsgType msg_type = 4;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msg_type(), output);
  }

  // required bytes msg_data = 5;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->msg_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.MsgInfo)
}

int MsgInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.MsgInfo)
  int total_size = 0;

  if (has_msg_id()) {
    // required uint32 msg_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  if (has_from_session_id()) {
    // required uint32 from_session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_session_id());
  }

  if (has_create_time()) {
    // required uint32 create_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_time());
  }

  if (has_msg_type()) {
    // required .IM.BaseDefine.MsgType msg_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  if (has_msg_data()) {
    // required bytes msg_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());
  }

  return total_size;
}
int MsgInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.MsgInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 msg_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());

    // required uint32 from_session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_session_id());

    // required uint32 create_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_time());

    // required .IM.BaseDefine.MsgType msg_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());

    // required bytes msg_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgInfo*>(&from));
}

void MsgInfo::MergeFrom(const MsgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.MsgInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_from_session_id()) {
      set_from_session_id(from.from_session_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_data()) {
      set_has_msg_data();
      msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void MsgInfo::CopyFrom(const MsgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.MsgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MsgInfo::Swap(MsgInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgInfo::InternalSwap(MsgInfo* other) {
  std::swap(msg_id_, other->msg_id_);
  std::swap(from_session_id_, other->from_session_id_);
  std::swap(create_time_, other->create_time_);
  std::swap(msg_type_, other->msg_type_);
  msg_data_.Swap(&other->msg_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgInfo::GetTypeName() const {
  return "IM.BaseDefine.MsgInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgInfo

// required uint32 msg_id = 1;
bool MsgInfo::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgInfo::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgInfo::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgInfo::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
 ::google::protobuf::uint32 MsgInfo::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.msg_id)
  return msg_id_;
}
 void MsgInfo::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.msg_id)
}

// required uint32 from_session_id = 2;
bool MsgInfo::has_from_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgInfo::set_has_from_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgInfo::clear_has_from_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgInfo::clear_from_session_id() {
  from_session_id_ = 0u;
  clear_has_from_session_id();
}
 ::google::protobuf::uint32 MsgInfo::from_session_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.from_session_id)
  return from_session_id_;
}
 void MsgInfo::set_from_session_id(::google::protobuf::uint32 value) {
  set_has_from_session_id();
  from_session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.from_session_id)
}

// required uint32 create_time = 3;
bool MsgInfo::has_create_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgInfo::set_has_create_time() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgInfo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgInfo::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
 ::google::protobuf::uint32 MsgInfo::create_time() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.create_time)
  return create_time_;
}
 void MsgInfo::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.create_time)
}

// required .IM.BaseDefine.MsgType msg_type = 4;
bool MsgInfo::has_msg_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MsgInfo::set_has_msg_type() {
  _has_bits_[0] |= 0x00000008u;
}
void MsgInfo::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void MsgInfo::clear_msg_type() {
  msg_type_ = 1;
  clear_has_msg_type();
}
 ::IM::BaseDefine::MsgType MsgInfo::msg_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.msg_type)
  return static_cast< ::IM::BaseDefine::MsgType >(msg_type_);
}
 void MsgInfo::set_msg_type(::IM::BaseDefine::MsgType value) {
  assert(::IM::BaseDefine::MsgType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.msg_type)
}

// required bytes msg_data = 5;
bool MsgInfo::has_msg_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MsgInfo::set_has_msg_data() {
  _has_bits_[0] |= 0x00000010u;
}
void MsgInfo::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void MsgInfo::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_data();
}
 const ::std::string& MsgInfo::msg_data() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.msg_data)
  return msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgInfo::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.msg_data)
}
 void MsgInfo::set_msg_data(const char* value) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.MsgInfo.msg_data)
}
 void MsgInfo::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.MsgInfo.msg_data)
}
 ::std::string* MsgInfo::mutable_msg_data() {
  set_has_msg_data();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.MsgInfo.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgInfo::release_msg_data() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.MsgInfo.msg_data)
  clear_has_msg_data();
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgInfo::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    set_has_msg_data();
  } else {
    clear_has_msg_data();
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.MsgInfo.msg_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGroupVersionInfo(
    GroupVersionInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupVersionInfo::kGroupIdFieldNumber;
const int GroupVersionInfo::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupVersionInfo::GroupVersionInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.GroupVersionInfo)
}

void GroupVersionInfo::InitAsDefaultInstance() {
}

GroupVersionInfo::GroupVersionInfo(const GroupVersionInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.GroupVersionInfo)
}

void GroupVersionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0u;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupVersionInfo::~GroupVersionInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.GroupVersionInfo)
  SharedDtor();
}

void GroupVersionInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupVersionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupVersionInfo& GroupVersionInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

GroupVersionInfo* GroupVersionInfo::default_instance_ = NULL;

GroupVersionInfo* GroupVersionInfo::New(::google::protobuf::Arena* arena) const {
  GroupVersionInfo* n = new GroupVersionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupVersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.GroupVersionInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupVersionInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupVersionInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(group_id_, version_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupVersionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForGroupVersionInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.GroupVersionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.GroupVersionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.GroupVersionInfo)
  return false;
#undef DO_
}

void GroupVersionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.GroupVersionInfo)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.GroupVersionInfo)
}

int GroupVersionInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.GroupVersionInfo)
  int total_size = 0;

  if (has_group_id()) {
    // required uint32 group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  if (has_version()) {
    // required uint32 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
int GroupVersionInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.GroupVersionInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());

    // required uint32 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupVersionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupVersionInfo*>(&from));
}

void GroupVersionInfo::MergeFrom(const GroupVersionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.GroupVersionInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GroupVersionInfo::CopyFrom(const GroupVersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.GroupVersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupVersionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupVersionInfo::Swap(GroupVersionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupVersionInfo::InternalSwap(GroupVersionInfo* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupVersionInfo::GetTypeName() const {
  return "IM.BaseDefine.GroupVersionInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupVersionInfo

// required uint32 group_id = 1;
bool GroupVersionInfo::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GroupVersionInfo::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GroupVersionInfo::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GroupVersionInfo::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
 ::google::protobuf::uint32 GroupVersionInfo::group_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupVersionInfo.group_id)
  return group_id_;
}
 void GroupVersionInfo::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupVersionInfo.group_id)
}

// required uint32 version = 2;
bool GroupVersionInfo::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GroupVersionInfo::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void GroupVersionInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void GroupVersionInfo::clear_version() {
  version_ = 0u;
  clear_has_version();
}
 ::google::protobuf::uint32 GroupVersionInfo::version() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupVersionInfo.version)
  return version_;
}
 void GroupVersionInfo::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupVersionInfo.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGroupInfo(
    GroupInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupInfo::kGroupIdFieldNumber;
const int GroupInfo::kVersionFieldNumber;
const int GroupInfo::kGroupNameFieldNumber;
const int GroupInfo::kGroupAvatarFieldNumber;
const int GroupInfo::kGroupCreatorIdFieldNumber;
const int GroupInfo::kGroupTypeFieldNumber;
const int GroupInfo::kShieldStatusFieldNumber;
const int GroupInfo::kGroupMemberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupInfo::GroupInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.GroupInfo)
}

void GroupInfo::InitAsDefaultInstance() {
}

GroupInfo::GroupInfo(const GroupInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.GroupInfo)
}

void GroupInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0u;
  version_ = 0u;
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_creator_id_ = 0u;
  group_type_ = 1;
  shield_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.GroupInfo)
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupInfo& GroupInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

GroupInfo* GroupInfo::default_instance_ = NULL;

GroupInfo* GroupInfo::New(::google::protobuf::Arena* arena) const {
  GroupInfo* n = new GroupInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.GroupInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(group_id_, version_);
    if (has_group_name()) {
      group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_group_avatar()) {
      group_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    group_creator_id_ = 0u;
    group_type_ = 1;
    shield_status_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  group_member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForGroupInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.GroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // required string group_name = 3;
      case 3: {
        if (tag == 26) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_avatar;
        break;
      }

      // required string group_avatar = 4;
      case 4: {
        if (tag == 34) {
         parse_group_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_creator_id;
        break;
      }

      // required uint32 group_creator_id = 5;
      case 5: {
        if (tag == 40) {
         parse_group_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_creator_id_)));
          set_has_group_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 6;
      case 6: {
        if (tag == 48) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_shield_status;
        break;
      }

      // required uint32 shield_status = 7;
      case 7: {
        if (tag == 56) {
         parse_shield_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
          set_has_shield_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_group_member_list;
        break;
      }

      // repeated uint32 group_member_list = 8;
      case 8: {
        if (tag == 64) {
         parse_group_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_group_member_list())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_group_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_group_member_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.GroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.GroupInfo)
  return false;
#undef DO_
}

void GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.GroupInfo)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // required string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // required string group_avatar = 4;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_avatar(), output);
  }

  // required uint32 group_creator_id = 5;
  if (has_group_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group_creator_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 6;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->group_type(), output);
  }

  // required uint32 shield_status = 7;
  if (has_shield_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->shield_status(), output);
  }

  // repeated uint32 group_member_list = 8;
  for (int i = 0; i < this->group_member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->group_member_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.GroupInfo)
}

int GroupInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.GroupInfo)
  int total_size = 0;

  if (has_group_id()) {
    // required uint32 group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  if (has_version()) {
    // required uint32 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  if (has_group_name()) {
    // required string group_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());
  }

  if (has_group_avatar()) {
    // required string group_avatar = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_avatar());
  }

  if (has_group_creator_id()) {
    // required uint32 group_creator_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_creator_id());
  }

  if (has_group_type()) {
    // required .IM.BaseDefine.GroupType group_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
  }

  if (has_shield_status()) {
    // required uint32 shield_status = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  return total_size;
}
int GroupInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.GroupInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint32 group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());

    // required uint32 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

    // required string group_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());

    // required string group_avatar = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_avatar());

    // required uint32 group_creator_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_creator_id());

    // required .IM.BaseDefine.GroupType group_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());

    // required uint32 shield_status = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 group_member_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->group_member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->group_member_list(i));
    }
    total_size += 1 * this->group_member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupInfo*>(&from));
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.GroupInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  group_member_list_.MergeFrom(from.group_member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_group_name()) {
      set_has_group_name();
      group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
    }
    if (from.has_group_avatar()) {
      set_has_group_avatar();
      group_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_avatar_);
    }
    if (from.has_group_creator_id()) {
      set_group_creator_id(from.group_creator_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_shield_status()) {
      set_shield_status(from.shield_status());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void GroupInfo::Swap(GroupInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupInfo::InternalSwap(GroupInfo* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(version_, other->version_);
  group_name_.Swap(&other->group_name_);
  group_avatar_.Swap(&other->group_avatar_);
  std::swap(group_creator_id_, other->group_creator_id_);
  std::swap(group_type_, other->group_type_);
  std::swap(shield_status_, other->shield_status_);
  group_member_list_.UnsafeArenaSwap(&other->group_member_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupInfo::GetTypeName() const {
  return "IM.BaseDefine.GroupInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupInfo

// required uint32 group_id = 1;
bool GroupInfo::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GroupInfo::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GroupInfo::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GroupInfo::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
 ::google::protobuf::uint32 GroupInfo::group_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_id)
  return group_id_;
}
 void GroupInfo::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_id)
}

// required uint32 version = 2;
bool GroupInfo::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GroupInfo::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void GroupInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void GroupInfo::clear_version() {
  version_ = 0u;
  clear_has_version();
}
 ::google::protobuf::uint32 GroupInfo::version() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.version)
  return version_;
}
 void GroupInfo::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.version)
}

// required string group_name = 3;
bool GroupInfo::has_group_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GroupInfo::set_has_group_name() {
  _has_bits_[0] |= 0x00000004u;
}
void GroupInfo::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void GroupInfo::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_name();
}
 const ::std::string& GroupInfo::group_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_name)
  return group_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_group_name(const ::std::string& value) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_name)
}
 void GroupInfo::set_group_name(const char* value) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.GroupInfo.group_name)
}
 void GroupInfo::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.GroupInfo.group_name)
}
 ::std::string* GroupInfo::mutable_group_name() {
  set_has_group_name();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.GroupInfo.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInfo::release_group_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.GroupInfo.group_name)
  clear_has_group_name();
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    set_has_group_name();
  } else {
    clear_has_group_name();
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.GroupInfo.group_name)
}

// required string group_avatar = 4;
bool GroupInfo::has_group_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GroupInfo::set_has_group_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
void GroupInfo::clear_has_group_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
void GroupInfo::clear_group_avatar() {
  group_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_avatar();
}
 const ::std::string& GroupInfo::group_avatar() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_avatar)
  return group_avatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_group_avatar(const ::std::string& value) {
  set_has_group_avatar();
  group_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_avatar)
}
 void GroupInfo::set_group_avatar(const char* value) {
  set_has_group_avatar();
  group_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.GroupInfo.group_avatar)
}
 void GroupInfo::set_group_avatar(const char* value, size_t size) {
  set_has_group_avatar();
  group_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.GroupInfo.group_avatar)
}
 ::std::string* GroupInfo::mutable_group_avatar() {
  set_has_group_avatar();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.GroupInfo.group_avatar)
  return group_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInfo::release_group_avatar() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.GroupInfo.group_avatar)
  clear_has_group_avatar();
  return group_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_allocated_group_avatar(::std::string* group_avatar) {
  if (group_avatar != NULL) {
    set_has_group_avatar();
  } else {
    clear_has_group_avatar();
  }
  group_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_avatar);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.GroupInfo.group_avatar)
}

// required uint32 group_creator_id = 5;
bool GroupInfo::has_group_creator_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GroupInfo::set_has_group_creator_id() {
  _has_bits_[0] |= 0x00000010u;
}
void GroupInfo::clear_has_group_creator_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void GroupInfo::clear_group_creator_id() {
  group_creator_id_ = 0u;
  clear_has_group_creator_id();
}
 ::google::protobuf::uint32 GroupInfo::group_creator_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_creator_id)
  return group_creator_id_;
}
 void GroupInfo::set_group_creator_id(::google::protobuf::uint32 value) {
  set_has_group_creator_id();
  group_creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_creator_id)
}

// required .IM.BaseDefine.GroupType group_type = 6;
bool GroupInfo::has_group_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GroupInfo::set_has_group_type() {
  _has_bits_[0] |= 0x00000020u;
}
void GroupInfo::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void GroupInfo::clear_group_type() {
  group_type_ = 1;
  clear_has_group_type();
}
 ::IM::BaseDefine::GroupType GroupInfo::group_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
 void GroupInfo::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_type)
}

// required uint32 shield_status = 7;
bool GroupInfo::has_shield_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GroupInfo::set_has_shield_status() {
  _has_bits_[0] |= 0x00000040u;
}
void GroupInfo::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void GroupInfo::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
 ::google::protobuf::uint32 GroupInfo::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.shield_status)
  return shield_status_;
}
 void GroupInfo::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.shield_status)
}

// repeated uint32 group_member_list = 8;
int GroupInfo::group_member_list_size() const {
  return group_member_list_.size();
}
void GroupInfo::clear_group_member_list() {
  group_member_list_.Clear();
}
 ::google::protobuf::uint32 GroupInfo::group_member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_member_list)
  return group_member_list_.Get(index);
}
 void GroupInfo::set_group_member_list(int index, ::google::protobuf::uint32 value) {
  group_member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_member_list)
}
 void GroupInfo::add_group_member_list(::google::protobuf::uint32 value) {
  group_member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.BaseDefine.GroupInfo.group_member_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GroupInfo::group_member_list() const {
  // @@protoc_insertion_point(field_list:IM.BaseDefine.GroupInfo.group_member_list)
  return group_member_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GroupInfo::mutable_group_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.BaseDefine.GroupInfo.group_member_list)
  return &group_member_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForUserTokenInfo(
    UserTokenInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTokenInfo::kUserIdFieldNumber;
const int UserTokenInfo::kUserTypeFieldNumber;
const int UserTokenInfo::kTokenFieldNumber;
const int UserTokenInfo::kPushCountFieldNumber;
const int UserTokenInfo::kPushTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTokenInfo::UserTokenInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.UserTokenInfo)
}

void UserTokenInfo::InitAsDefaultInstance() {
}

UserTokenInfo::UserTokenInfo(const UserTokenInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UserTokenInfo)
}

void UserTokenInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  user_type_ = 1;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  push_count_ = 0u;
  push_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTokenInfo::~UserTokenInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UserTokenInfo)
  SharedDtor();
}

void UserTokenInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserTokenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserTokenInfo& UserTokenInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

UserTokenInfo* UserTokenInfo::default_instance_ = NULL;

UserTokenInfo* UserTokenInfo::New(::google::protobuf::Arena* arena) const {
  UserTokenInfo* n = new UserTokenInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserTokenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UserTokenInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserTokenInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserTokenInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(push_count_, push_type_);
    user_id_ = 0u;
    user_type_ = 1;
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserTokenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForUserTokenInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.UserTokenInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_type;
        break;
      }

      // required .IM.BaseDefine.ClientType user_type = 2;
      case 2: {
        if (tag == 16) {
         parse_user_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ClientType_IsValid(value)) {
            set_user_type(static_cast< ::IM::BaseDefine::ClientType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_push_count;
        break;
      }

      // required uint32 push_count = 4;
      case 4: {
        if (tag == 32) {
         parse_push_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &push_count_)));
          set_has_push_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_push_type;
        break;
      }

      // required uint32 push_type = 5;
      case 5: {
        if (tag == 40) {
         parse_push_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &push_type_)));
          set_has_push_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.UserTokenInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.UserTokenInfo)
  return false;
#undef DO_
}

void UserTokenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.UserTokenInfo)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.ClientType user_type = 2;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->user_type(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // required uint32 push_count = 4;
  if (has_push_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->push_count(), output);
  }

  // required uint32 push_type = 5;
  if (has_push_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->push_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.UserTokenInfo)
}

int UserTokenInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.UserTokenInfo)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_user_type()) {
    // required .IM.BaseDefine.ClientType user_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_type());
  }

  if (has_token()) {
    // required string token = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_push_count()) {
    // required uint32 push_count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->push_count());
  }

  if (has_push_type()) {
    // required uint32 push_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->push_type());
  }

  return total_size;
}
int UserTokenInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UserTokenInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required .IM.BaseDefine.ClientType user_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_type());

    // required string token = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required uint32 push_count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->push_count());

    // required uint32 push_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->push_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTokenInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserTokenInfo*>(&from));
}

void UserTokenInfo::MergeFrom(const UserTokenInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UserTokenInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_type()) {
      set_user_type(from.user_type());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_push_count()) {
      set_push_count(from.push_count());
    }
    if (from.has_push_type()) {
      set_push_type(from.push_type());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void UserTokenInfo::CopyFrom(const UserTokenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UserTokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTokenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void UserTokenInfo::Swap(UserTokenInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserTokenInfo::InternalSwap(UserTokenInfo* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(user_type_, other->user_type_);
  token_.Swap(&other->token_);
  std::swap(push_count_, other->push_count_);
  std::swap(push_type_, other->push_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserTokenInfo::GetTypeName() const {
  return "IM.BaseDefine.UserTokenInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserTokenInfo

// required uint32 user_id = 1;
bool UserTokenInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserTokenInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserTokenInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserTokenInfo::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 UserTokenInfo::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.user_id)
  return user_id_;
}
 void UserTokenInfo::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.user_id)
}

// required .IM.BaseDefine.ClientType user_type = 2;
bool UserTokenInfo::has_user_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserTokenInfo::set_has_user_type() {
  _has_bits_[0] |= 0x00000002u;
}
void UserTokenInfo::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserTokenInfo::clear_user_type() {
  user_type_ = 1;
  clear_has_user_type();
}
 ::IM::BaseDefine::ClientType UserTokenInfo::user_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.user_type)
  return static_cast< ::IM::BaseDefine::ClientType >(user_type_);
}
 void UserTokenInfo::set_user_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.user_type)
}

// required string token = 3;
bool UserTokenInfo::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserTokenInfo::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
void UserTokenInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserTokenInfo::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& UserTokenInfo::token() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserTokenInfo::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.token)
}
 void UserTokenInfo::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserTokenInfo.token)
}
 void UserTokenInfo::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserTokenInfo.token)
}
 ::std::string* UserTokenInfo::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserTokenInfo.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserTokenInfo::release_token() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserTokenInfo.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserTokenInfo::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserTokenInfo.token)
}

// required uint32 push_count = 4;
bool UserTokenInfo::has_push_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserTokenInfo::set_has_push_count() {
  _has_bits_[0] |= 0x00000008u;
}
void UserTokenInfo::clear_has_push_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserTokenInfo::clear_push_count() {
  push_count_ = 0u;
  clear_has_push_count();
}
 ::google::protobuf::uint32 UserTokenInfo::push_count() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.push_count)
  return push_count_;
}
 void UserTokenInfo::set_push_count(::google::protobuf::uint32 value) {
  set_has_push_count();
  push_count_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.push_count)
}

// required uint32 push_type = 5;
bool UserTokenInfo::has_push_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserTokenInfo::set_has_push_type() {
  _has_bits_[0] |= 0x00000010u;
}
void UserTokenInfo::clear_has_push_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserTokenInfo::clear_push_type() {
  push_type_ = 0u;
  clear_has_push_type();
}
 ::google::protobuf::uint32 UserTokenInfo::push_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.push_type)
  return push_type_;
}
 void UserTokenInfo::set_push_type(::google::protobuf::uint32 value) {
  set_has_push_type();
  push_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.push_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPushResult(
    PushResult* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushResult::kUserTokenFieldNumber;
const int PushResult::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushResult::PushResult()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.PushResult)
}

void PushResult::InitAsDefaultInstance() {
}

PushResult::PushResult(const PushResult& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.PushResult)
}

void PushResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushResult::~PushResult() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.PushResult)
  SharedDtor();
}

void PushResult::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushResult& PushResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

PushResult* PushResult::default_instance_ = NULL;

PushResult* PushResult::New(::google::protobuf::Arena* arena) const {
  PushResult* n = new PushResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushResult::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.PushResult)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user_token()) {
      user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    result_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PushResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForPushResult, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.PushResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.PushResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.PushResult)
  return false;
#undef DO_
}

void PushResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.PushResult)
  // required string user_token = 1;
  if (has_user_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_token(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.PushResult)
}

int PushResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.PushResult)
  int total_size = 0;

  if (has_user_token()) {
    // required string user_token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_token());
  }

  if (has_result_code()) {
    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  return total_size;
}
int PushResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.PushResult)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string user_token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_token());

    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushResult*>(&from));
}

void PushResult::MergeFrom(const PushResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.PushResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_token()) {
      set_has_user_token();
      user_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_token_);
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PushResult::CopyFrom(const PushResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.PushResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PushResult::Swap(PushResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushResult::InternalSwap(PushResult* other) {
  user_token_.Swap(&other->user_token_);
  std::swap(result_code_, other->result_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PushResult::GetTypeName() const {
  return "IM.BaseDefine.PushResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushResult

// required string user_token = 1;
bool PushResult::has_user_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PushResult::set_has_user_token() {
  _has_bits_[0] |= 0x00000001u;
}
void PushResult::clear_has_user_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void PushResult::clear_user_token() {
  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_token();
}
 const ::std::string& PushResult::user_token() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushResult.user_token)
  return user_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PushResult::set_user_token(const ::std::string& value) {
  set_has_user_token();
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushResult.user_token)
}
 void PushResult::set_user_token(const char* value) {
  set_has_user_token();
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.PushResult.user_token)
}
 void PushResult::set_user_token(const char* value, size_t size) {
  set_has_user_token();
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.PushResult.user_token)
}
 ::std::string* PushResult::mutable_user_token() {
  set_has_user_token();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.PushResult.user_token)
  return user_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PushResult::release_user_token() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.PushResult.user_token)
  clear_has_user_token();
  return user_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PushResult::set_allocated_user_token(::std::string* user_token) {
  if (user_token != NULL) {
    set_has_user_token();
  } else {
    clear_has_user_token();
  }
  user_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_token);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.PushResult.user_token)
}

// required uint32 result_code = 2;
bool PushResult::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PushResult::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
void PushResult::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void PushResult::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
 ::google::protobuf::uint32 PushResult::result_code() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushResult.result_code)
  return result_code_;
}
 void PushResult::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushResult.result_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForShieldStatus(
    ShieldStatus* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShieldStatus::kUserIdFieldNumber;
const int ShieldStatus::kGroupIdFieldNumber;
const int ShieldStatus::kShieldStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShieldStatus::ShieldStatus()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.ShieldStatus)
}

void ShieldStatus::InitAsDefaultInstance() {
}

ShieldStatus::ShieldStatus(const ShieldStatus& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.ShieldStatus)
}

void ShieldStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  group_id_ = 0u;
  shield_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShieldStatus::~ShieldStatus() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.ShieldStatus)
  SharedDtor();
}

void ShieldStatus::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShieldStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShieldStatus& ShieldStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

ShieldStatus* ShieldStatus::default_instance_ = NULL;

ShieldStatus* ShieldStatus::New(::google::protobuf::Arena* arena) const {
  ShieldStatus* n = new ShieldStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShieldStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.ShieldStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ShieldStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ShieldStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, shield_status_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ShieldStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForShieldStatus, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.ShieldStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shield_status;
        break;
      }

      // required uint32 shield_status = 3;
      case 3: {
        if (tag == 24) {
         parse_shield_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
          set_has_shield_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.ShieldStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.ShieldStatus)
  return false;
#undef DO_
}

void ShieldStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.ShieldStatus)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 shield_status = 3;
  if (has_shield_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shield_status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.ShieldStatus)
}

int ShieldStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.ShieldStatus)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_group_id()) {
    // required uint32 group_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  if (has_shield_status()) {
    // required uint32 shield_status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  return total_size;
}
int ShieldStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.ShieldStatus)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required uint32 group_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());

    // required uint32 shield_status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShieldStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShieldStatus*>(&from));
}

void ShieldStatus::MergeFrom(const ShieldStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.ShieldStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_shield_status()) {
      set_shield_status(from.shield_status());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ShieldStatus::CopyFrom(const ShieldStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.ShieldStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ShieldStatus::Swap(ShieldStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShieldStatus::InternalSwap(ShieldStatus* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(group_id_, other->group_id_);
  std::swap(shield_status_, other->shield_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ShieldStatus::GetTypeName() const {
  return "IM.BaseDefine.ShieldStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShieldStatus

// required uint32 user_id = 1;
bool ShieldStatus::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShieldStatus::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ShieldStatus::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShieldStatus::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 ShieldStatus::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ShieldStatus.user_id)
  return user_id_;
}
 void ShieldStatus::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ShieldStatus.user_id)
}

// required uint32 group_id = 2;
bool ShieldStatus::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShieldStatus::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ShieldStatus::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShieldStatus::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
 ::google::protobuf::uint32 ShieldStatus::group_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ShieldStatus.group_id)
  return group_id_;
}
 void ShieldStatus::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ShieldStatus.group_id)
}

// required uint32 shield_status = 3;
bool ShieldStatus::has_shield_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShieldStatus::set_has_shield_status() {
  _has_bits_[0] |= 0x00000004u;
}
void ShieldStatus::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShieldStatus::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
 ::google::protobuf::uint32 ShieldStatus::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ShieldStatus.shield_status)
  return shield_status_;
}
 void ShieldStatus::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ShieldStatus.shield_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForOfflineFileInfo(
    OfflineFileInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfflineFileInfo::kFromUserIdFieldNumber;
const int OfflineFileInfo::kTaskIdFieldNumber;
const int OfflineFileInfo::kFileNameFieldNumber;
const int OfflineFileInfo::kFileSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfflineFileInfo::OfflineFileInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.OfflineFileInfo)
}

void OfflineFileInfo::InitAsDefaultInstance() {
}

OfflineFileInfo::OfflineFileInfo(const OfflineFileInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.OfflineFileInfo)
}

void OfflineFileInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_user_id_ = 0u;
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineFileInfo::~OfflineFileInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.OfflineFileInfo)
  SharedDtor();
}

void OfflineFileInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfflineFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfflineFileInfo& OfflineFileInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

OfflineFileInfo* OfflineFileInfo::default_instance_ = NULL;

OfflineFileInfo* OfflineFileInfo::New(::google::protobuf::Arena* arena) const {
  OfflineFileInfo* n = new OfflineFileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfflineFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.OfflineFileInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OfflineFileInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OfflineFileInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(from_user_id_, file_size_);
    if (has_task_id()) {
      task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_file_name()) {
      file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OfflineFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForOfflineFileInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.OfflineFileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required string task_id = 2;
      case 2: {
        if (tag == 18) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // required string file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_file_size;
        break;
      }

      // required uint32 file_size = 4;
      case 4: {
        if (tag == 32) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.OfflineFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.OfflineFileInfo)
  return false;
#undef DO_
}

void OfflineFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.OfflineFileInfo)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_id(), output);
  }

  // required string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // required uint32 file_size = 4;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->file_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.OfflineFileInfo)
}

int OfflineFileInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.OfflineFileInfo)
  int total_size = 0;

  if (has_from_user_id()) {
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  if (has_task_id()) {
    // required string task_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  if (has_file_name()) {
    // required string file_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (has_file_size()) {
    // required uint32 file_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_size());
  }

  return total_size;
}
int OfflineFileInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.OfflineFileInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 from_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());

    // required string task_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());

    // required string file_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());

    // required uint32 file_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineFileInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfflineFileInfo*>(&from));
}

void OfflineFileInfo::MergeFrom(const OfflineFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.OfflineFileInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void OfflineFileInfo::CopyFrom(const OfflineFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.OfflineFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineFileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void OfflineFileInfo::Swap(OfflineFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfflineFileInfo::InternalSwap(OfflineFileInfo* other) {
  std::swap(from_user_id_, other->from_user_id_);
  task_id_.Swap(&other->task_id_);
  file_name_.Swap(&other->file_name_);
  std::swap(file_size_, other->file_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OfflineFileInfo::GetTypeName() const {
  return "IM.BaseDefine.OfflineFileInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OfflineFileInfo

// required uint32 from_user_id = 1;
bool OfflineFileInfo::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OfflineFileInfo::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void OfflineFileInfo::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void OfflineFileInfo::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
 ::google::protobuf::uint32 OfflineFileInfo::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.from_user_id)
  return from_user_id_;
}
 void OfflineFileInfo::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.from_user_id)
}

// required string task_id = 2;
bool OfflineFileInfo::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OfflineFileInfo::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
void OfflineFileInfo::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void OfflineFileInfo::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& OfflineFileInfo::task_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OfflineFileInfo::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.task_id)
}
 void OfflineFileInfo::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.OfflineFileInfo.task_id)
}
 void OfflineFileInfo::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.OfflineFileInfo.task_id)
}
 ::std::string* OfflineFileInfo::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.OfflineFileInfo.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OfflineFileInfo::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.OfflineFileInfo.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OfflineFileInfo::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.OfflineFileInfo.task_id)
}

// required string file_name = 3;
bool OfflineFileInfo::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OfflineFileInfo::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
void OfflineFileInfo::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void OfflineFileInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& OfflineFileInfo::file_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OfflineFileInfo::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.file_name)
}
 void OfflineFileInfo::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.OfflineFileInfo.file_name)
}
 void OfflineFileInfo::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.OfflineFileInfo.file_name)
}
 ::std::string* OfflineFileInfo::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.OfflineFileInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OfflineFileInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.OfflineFileInfo.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OfflineFileInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.OfflineFileInfo.file_name)
}

// required uint32 file_size = 4;
bool OfflineFileInfo::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OfflineFileInfo::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
void OfflineFileInfo::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void OfflineFileInfo::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
 ::google::protobuf::uint32 OfflineFileInfo::file_size() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.file_size)
  return file_size_;
}
 void OfflineFileInfo::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.file_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDepartInfo(
    DepartInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepartInfo::kDeptIdFieldNumber;
const int DepartInfo::kPriorityFieldNumber;
const int DepartInfo::kDeptNameFieldNumber;
const int DepartInfo::kParentDeptIdFieldNumber;
const int DepartInfo::kDeptStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepartInfo::DepartInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.DepartInfo)
}

void DepartInfo::InitAsDefaultInstance() {
}

DepartInfo::DepartInfo(const DepartInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.DepartInfo)
}

void DepartInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dept_id_ = 0u;
  priority_ = 0u;
  dept_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_dept_id_ = 0u;
  dept_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepartInfo::~DepartInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.DepartInfo)
  SharedDtor();
}

void DepartInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dept_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DepartInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DepartInfo& DepartInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

DepartInfo* DepartInfo::default_instance_ = NULL;

DepartInfo* DepartInfo::New(::google::protobuf::Arena* arena) const {
  DepartInfo* n = new DepartInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DepartInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.DepartInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DepartInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DepartInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(dept_id_, priority_);
    ZR_(parent_dept_id_, dept_status_);
    if (has_dept_name()) {
      dept_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DepartInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForDepartInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.DepartInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dept_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dept_id_)));
          set_has_dept_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_priority;
        break;
      }

      // required uint32 priority = 2;
      case 2: {
        if (tag == 16) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dept_name;
        break;
      }

      // required string dept_name = 3;
      case 3: {
        if (tag == 26) {
         parse_dept_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dept_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_parent_dept_id;
        break;
      }

      // required uint32 parent_dept_id = 4;
      case 4: {
        if (tag == 32) {
         parse_parent_dept_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_dept_id_)));
          set_has_parent_dept_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dept_status;
        break;
      }

      // required .IM.BaseDefine.DepartmentStatusType dept_status = 5;
      case 5: {
        if (tag == 40) {
         parse_dept_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::DepartmentStatusType_IsValid(value)) {
            set_dept_status(static_cast< ::IM::BaseDefine::DepartmentStatusType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.DepartInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.DepartInfo)
  return false;
#undef DO_
}

void DepartInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.DepartInfo)
  // required uint32 dept_id = 1;
  if (has_dept_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dept_id(), output);
  }

  // required uint32 priority = 2;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->priority(), output);
  }

  // required string dept_name = 3;
  if (has_dept_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dept_name(), output);
  }

  // required uint32 parent_dept_id = 4;
  if (has_parent_dept_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->parent_dept_id(), output);
  }

  // required .IM.BaseDefine.DepartmentStatusType dept_status = 5;
  if (has_dept_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dept_status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.DepartInfo)
}

int DepartInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.DepartInfo)
  int total_size = 0;

  if (has_dept_id()) {
    // required uint32 dept_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dept_id());
  }

  if (has_priority()) {
    // required uint32 priority = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  if (has_dept_name()) {
    // required string dept_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dept_name());
  }

  if (has_parent_dept_id()) {
    // required uint32 parent_dept_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent_dept_id());
  }

  if (has_dept_status()) {
    // required .IM.BaseDefine.DepartmentStatusType dept_status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dept_status());
  }

  return total_size;
}
int DepartInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.DepartInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 dept_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dept_id());

    // required uint32 priority = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());

    // required string dept_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dept_name());

    // required uint32 parent_dept_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent_dept_id());

    // required .IM.BaseDefine.DepartmentStatusType dept_status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dept_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepartInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DepartInfo*>(&from));
}

void DepartInfo::MergeFrom(const DepartInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.DepartInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dept_id()) {
      set_dept_id(from.dept_id());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_dept_name()) {
      set_has_dept_name();
      dept_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dept_name_);
    }
    if (from.has_parent_dept_id()) {
      set_parent_dept_id(from.parent_dept_id());
    }
    if (from.has_dept_status()) {
      set_dept_status(from.dept_status());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DepartInfo::CopyFrom(const DepartInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.DepartInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DepartInfo::Swap(DepartInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepartInfo::InternalSwap(DepartInfo* other) {
  std::swap(dept_id_, other->dept_id_);
  std::swap(priority_, other->priority_);
  dept_name_.Swap(&other->dept_name_);
  std::swap(parent_dept_id_, other->parent_dept_id_);
  std::swap(dept_status_, other->dept_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DepartInfo::GetTypeName() const {
  return "IM.BaseDefine.DepartInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DepartInfo

// required uint32 dept_id = 1;
bool DepartInfo::has_dept_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DepartInfo::set_has_dept_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DepartInfo::clear_has_dept_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DepartInfo::clear_dept_id() {
  dept_id_ = 0u;
  clear_has_dept_id();
}
 ::google::protobuf::uint32 DepartInfo::dept_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.dept_id)
  return dept_id_;
}
 void DepartInfo::set_dept_id(::google::protobuf::uint32 value) {
  set_has_dept_id();
  dept_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.dept_id)
}

// required uint32 priority = 2;
bool DepartInfo::has_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DepartInfo::set_has_priority() {
  _has_bits_[0] |= 0x00000002u;
}
void DepartInfo::clear_has_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
void DepartInfo::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
 ::google::protobuf::uint32 DepartInfo::priority() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.priority)
  return priority_;
}
 void DepartInfo::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.priority)
}

// required string dept_name = 3;
bool DepartInfo::has_dept_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DepartInfo::set_has_dept_name() {
  _has_bits_[0] |= 0x00000004u;
}
void DepartInfo::clear_has_dept_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void DepartInfo::clear_dept_name() {
  dept_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dept_name();
}
 const ::std::string& DepartInfo::dept_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.dept_name)
  return dept_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DepartInfo::set_dept_name(const ::std::string& value) {
  set_has_dept_name();
  dept_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.dept_name)
}
 void DepartInfo::set_dept_name(const char* value) {
  set_has_dept_name();
  dept_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.DepartInfo.dept_name)
}
 void DepartInfo::set_dept_name(const char* value, size_t size) {
  set_has_dept_name();
  dept_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.DepartInfo.dept_name)
}
 ::std::string* DepartInfo::mutable_dept_name() {
  set_has_dept_name();
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.DepartInfo.dept_name)
  return dept_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DepartInfo::release_dept_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.DepartInfo.dept_name)
  clear_has_dept_name();
  return dept_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DepartInfo::set_allocated_dept_name(::std::string* dept_name) {
  if (dept_name != NULL) {
    set_has_dept_name();
  } else {
    clear_has_dept_name();
  }
  dept_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dept_name);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.DepartInfo.dept_name)
}

// required uint32 parent_dept_id = 4;
bool DepartInfo::has_parent_dept_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DepartInfo::set_has_parent_dept_id() {
  _has_bits_[0] |= 0x00000008u;
}
void DepartInfo::clear_has_parent_dept_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void DepartInfo::clear_parent_dept_id() {
  parent_dept_id_ = 0u;
  clear_has_parent_dept_id();
}
 ::google::protobuf::uint32 DepartInfo::parent_dept_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.parent_dept_id)
  return parent_dept_id_;
}
 void DepartInfo::set_parent_dept_id(::google::protobuf::uint32 value) {
  set_has_parent_dept_id();
  parent_dept_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.parent_dept_id)
}

// required .IM.BaseDefine.DepartmentStatusType dept_status = 5;
bool DepartInfo::has_dept_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DepartInfo::set_has_dept_status() {
  _has_bits_[0] |= 0x00000010u;
}
void DepartInfo::clear_has_dept_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void DepartInfo::clear_dept_status() {
  dept_status_ = 0;
  clear_has_dept_status();
}
 ::IM::BaseDefine::DepartmentStatusType DepartInfo::dept_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.dept_status)
  return static_cast< ::IM::BaseDefine::DepartmentStatusType >(dept_status_);
}
 void DepartInfo::set_dept_status(::IM::BaseDefine::DepartmentStatusType value) {
  assert(::IM::BaseDefine::DepartmentStatusType_IsValid(value));
  set_has_dept_status();
  dept_status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.dept_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPushShieldStatus(
    PushShieldStatus* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushShieldStatus::kUserIdFieldNumber;
const int PushShieldStatus::kShieldStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushShieldStatus::PushShieldStatus()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.PushShieldStatus)
}

void PushShieldStatus::InitAsDefaultInstance() {
}

PushShieldStatus::PushShieldStatus(const PushShieldStatus& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.PushShieldStatus)
}

void PushShieldStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  shield_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushShieldStatus::~PushShieldStatus() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.PushShieldStatus)
  SharedDtor();
}

void PushShieldStatus::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushShieldStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushShieldStatus& PushShieldStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
#endif
  return *default_instance_;
}

PushShieldStatus* PushShieldStatus::default_instance_ = NULL;

PushShieldStatus* PushShieldStatus::New(::google::protobuf::Arena* arena) const {
  PushShieldStatus* n = new PushShieldStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushShieldStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.PushShieldStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PushShieldStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PushShieldStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, shield_status_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PushShieldStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForPushShieldStatus, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.PushShieldStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shield_status;
        break;
      }

      // required uint32 shield_status = 2;
      case 2: {
        if (tag == 16) {
         parse_shield_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
          set_has_shield_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.PushShieldStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.PushShieldStatus)
  return false;
#undef DO_
}

void PushShieldStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.PushShieldStatus)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 shield_status = 2;
  if (has_shield_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shield_status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.PushShieldStatus)
}

int PushShieldStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IM.BaseDefine.PushShieldStatus)
  int total_size = 0;

  if (has_user_id()) {
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  if (has_shield_status()) {
    // required uint32 shield_status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  return total_size;
}
int PushShieldStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.PushShieldStatus)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());

    // required uint32 shield_status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushShieldStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushShieldStatus*>(&from));
}

void PushShieldStatus::MergeFrom(const PushShieldStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.PushShieldStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_shield_status()) {
      set_shield_status(from.shield_status());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PushShieldStatus::CopyFrom(const PushShieldStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.PushShieldStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushShieldStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PushShieldStatus::Swap(PushShieldStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushShieldStatus::InternalSwap(PushShieldStatus* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(shield_status_, other->shield_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PushShieldStatus::GetTypeName() const {
  return "IM.BaseDefine.PushShieldStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushShieldStatus

// required uint32 user_id = 1;
bool PushShieldStatus::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PushShieldStatus::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PushShieldStatus::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PushShieldStatus::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 PushShieldStatus::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushShieldStatus.user_id)
  return user_id_;
}
 void PushShieldStatus::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushShieldStatus.user_id)
}

// required uint32 shield_status = 2;
bool PushShieldStatus::has_shield_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PushShieldStatus::set_has_shield_status() {
  _has_bits_[0] |= 0x00000002u;
}
void PushShieldStatus::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void PushShieldStatus::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
 ::google::protobuf::uint32 PushShieldStatus::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushShieldStatus.shield_status)
  return shield_status_;
}
 void PushShieldStatus::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushShieldStatus.shield_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace BaseDefine
}  // namespace IM

// @@protoc_insertion_point(global_scope)
